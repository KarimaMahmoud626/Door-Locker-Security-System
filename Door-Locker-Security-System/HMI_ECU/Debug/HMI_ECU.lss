
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003164  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000112  00800060  00003164  000031f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  00800172  00800172  0000330a  2**0
                  ALLOC
  3 .stab         00002ed4  00000000  00000000  0000330c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000012aa  00000000  00000000  000061e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000748a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000075ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000773a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009383  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a26e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b01c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b17c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b409  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bbd7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 f1 15 	jmp	0x2be2	; 0x2be2 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 24 16 	jmp	0x2c48	; 0x2c48 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e6       	ldi	r30, 0x64	; 100
      68:	f1 e3       	ldi	r31, 0x31	; 49
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 37       	cpi	r26, 0x72	; 114
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 e7       	ldi	r26, 0x72	; 114
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 37       	cpi	r26, 0x7B	; 123
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <main>
      8a:	0c 94 b0 18 	jmp	0x3160	; 0x3160 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 34 18 	jmp	0x3068	; 0x3068 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac e5       	ldi	r26, 0x5C	; 92
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 50 18 	jmp	0x30a0	; 0x30a0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 40 18 	jmp	0x3080	; 0x3080 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 5c 18 	jmp	0x30b8	; 0x30b8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 40 18 	jmp	0x3080	; 0x3080 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 5c 18 	jmp	0x30b8	; 0x30b8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 34 18 	jmp	0x3068	; 0x3068 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8c e5       	ldi	r24, 0x5C	; 92
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 50 18 	jmp	0x30a0	; 0x30a0 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 40 18 	jmp	0x3080	; 0x3080 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 5c 18 	jmp	0x30b8	; 0x30b8 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 40 18 	jmp	0x3080	; 0x3080 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 5c 18 	jmp	0x30b8	; 0x30b8 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 40 18 	jmp	0x3080	; 0x3080 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 5c 18 	jmp	0x30b8	; 0x30b8 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 44 18 	jmp	0x3088	; 0x3088 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 60 18 	jmp	0x30c0	; 0x30c0 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <GPIO_setupPinDirection>:
 *[ARGUMENTS]		: port number and pin number of type uint8 and pin direction
                      of type GPIO_PinDirectionType
 *[RETURNS]			: void
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <GPIO_setupPinDirection+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <GPIO_setupPinDirection+0x8>
     b4e:	0f 92       	push	r0
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	89 83       	std	Y+1, r24	; 0x01
     b56:	6a 83       	std	Y+2, r22	; 0x02
     b58:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     b5a:	8a 81       	ldd	r24, Y+2	; 0x02
     b5c:	88 30       	cpi	r24, 0x08	; 8
     b5e:	08 f0       	brcs	.+2      	; 0xb62 <GPIO_setupPinDirection+0x1c>
     b60:	d5 c0       	rjmp	.+426    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
     b62:	89 81       	ldd	r24, Y+1	; 0x01
     b64:	84 30       	cpi	r24, 0x04	; 4
     b66:	08 f0       	brcs	.+2      	; 0xb6a <GPIO_setupPinDirection+0x24>
     b68:	d1 c0       	rjmp	.+418    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     b6a:	89 81       	ldd	r24, Y+1	; 0x01
     b6c:	28 2f       	mov	r18, r24
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	3d 83       	std	Y+5, r19	; 0x05
     b72:	2c 83       	std	Y+4, r18	; 0x04
     b74:	8c 81       	ldd	r24, Y+4	; 0x04
     b76:	9d 81       	ldd	r25, Y+5	; 0x05
     b78:	81 30       	cpi	r24, 0x01	; 1
     b7a:	91 05       	cpc	r25, r1
     b7c:	09 f4       	brne	.+2      	; 0xb80 <GPIO_setupPinDirection+0x3a>
     b7e:	43 c0       	rjmp	.+134    	; 0xc06 <GPIO_setupPinDirection+0xc0>
     b80:	2c 81       	ldd	r18, Y+4	; 0x04
     b82:	3d 81       	ldd	r19, Y+5	; 0x05
     b84:	22 30       	cpi	r18, 0x02	; 2
     b86:	31 05       	cpc	r19, r1
     b88:	2c f4       	brge	.+10     	; 0xb94 <GPIO_setupPinDirection+0x4e>
     b8a:	8c 81       	ldd	r24, Y+4	; 0x04
     b8c:	9d 81       	ldd	r25, Y+5	; 0x05
     b8e:	00 97       	sbiw	r24, 0x00	; 0
     b90:	71 f0       	breq	.+28     	; 0xbae <GPIO_setupPinDirection+0x68>
     b92:	bc c0       	rjmp	.+376    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
     b94:	2c 81       	ldd	r18, Y+4	; 0x04
     b96:	3d 81       	ldd	r19, Y+5	; 0x05
     b98:	22 30       	cpi	r18, 0x02	; 2
     b9a:	31 05       	cpc	r19, r1
     b9c:	09 f4       	brne	.+2      	; 0xba0 <GPIO_setupPinDirection+0x5a>
     b9e:	5f c0       	rjmp	.+190    	; 0xc5e <GPIO_setupPinDirection+0x118>
     ba0:	8c 81       	ldd	r24, Y+4	; 0x04
     ba2:	9d 81       	ldd	r25, Y+5	; 0x05
     ba4:	83 30       	cpi	r24, 0x03	; 3
     ba6:	91 05       	cpc	r25, r1
     ba8:	09 f4       	brne	.+2      	; 0xbac <GPIO_setupPinDirection+0x66>
     baa:	85 c0       	rjmp	.+266    	; 0xcb6 <GPIO_setupPinDirection+0x170>
     bac:	af c0       	rjmp	.+350    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     bae:	8b 81       	ldd	r24, Y+3	; 0x03
     bb0:	81 30       	cpi	r24, 0x01	; 1
     bb2:	a1 f4       	brne	.+40     	; 0xbdc <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     bb4:	aa e3       	ldi	r26, 0x3A	; 58
     bb6:	b0 e0       	ldi	r27, 0x00	; 0
     bb8:	ea e3       	ldi	r30, 0x3A	; 58
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	80 81       	ld	r24, Z
     bbe:	48 2f       	mov	r20, r24
     bc0:	8a 81       	ldd	r24, Y+2	; 0x02
     bc2:	28 2f       	mov	r18, r24
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	02 2e       	mov	r0, r18
     bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <GPIO_setupPinDirection+0x8c>
     bce:	88 0f       	add	r24, r24
     bd0:	99 1f       	adc	r25, r25
     bd2:	0a 94       	dec	r0
     bd4:	e2 f7       	brpl	.-8      	; 0xbce <GPIO_setupPinDirection+0x88>
     bd6:	84 2b       	or	r24, r20
     bd8:	8c 93       	st	X, r24
     bda:	98 c0       	rjmp	.+304    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     bdc:	aa e3       	ldi	r26, 0x3A	; 58
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	ea e3       	ldi	r30, 0x3A	; 58
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	48 2f       	mov	r20, r24
     be8:	8a 81       	ldd	r24, Y+2	; 0x02
     bea:	28 2f       	mov	r18, r24
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	81 e0       	ldi	r24, 0x01	; 1
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	02 2e       	mov	r0, r18
     bf4:	02 c0       	rjmp	.+4      	; 0xbfa <GPIO_setupPinDirection+0xb4>
     bf6:	88 0f       	add	r24, r24
     bf8:	99 1f       	adc	r25, r25
     bfa:	0a 94       	dec	r0
     bfc:	e2 f7       	brpl	.-8      	; 0xbf6 <GPIO_setupPinDirection+0xb0>
     bfe:	80 95       	com	r24
     c00:	84 23       	and	r24, r20
     c02:	8c 93       	st	X, r24
     c04:	83 c0       	rjmp	.+262    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     c06:	8b 81       	ldd	r24, Y+3	; 0x03
     c08:	81 30       	cpi	r24, 0x01	; 1
     c0a:	a1 f4       	brne	.+40     	; 0xc34 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     c0c:	a7 e3       	ldi	r26, 0x37	; 55
     c0e:	b0 e0       	ldi	r27, 0x00	; 0
     c10:	e7 e3       	ldi	r30, 0x37	; 55
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	48 2f       	mov	r20, r24
     c18:	8a 81       	ldd	r24, Y+2	; 0x02
     c1a:	28 2f       	mov	r18, r24
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	81 e0       	ldi	r24, 0x01	; 1
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	02 2e       	mov	r0, r18
     c24:	02 c0       	rjmp	.+4      	; 0xc2a <GPIO_setupPinDirection+0xe4>
     c26:	88 0f       	add	r24, r24
     c28:	99 1f       	adc	r25, r25
     c2a:	0a 94       	dec	r0
     c2c:	e2 f7       	brpl	.-8      	; 0xc26 <GPIO_setupPinDirection+0xe0>
     c2e:	84 2b       	or	r24, r20
     c30:	8c 93       	st	X, r24
     c32:	6c c0       	rjmp	.+216    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     c34:	a7 e3       	ldi	r26, 0x37	; 55
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	e7 e3       	ldi	r30, 0x37	; 55
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	80 81       	ld	r24, Z
     c3e:	48 2f       	mov	r20, r24
     c40:	8a 81       	ldd	r24, Y+2	; 0x02
     c42:	28 2f       	mov	r18, r24
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	02 2e       	mov	r0, r18
     c4c:	02 c0       	rjmp	.+4      	; 0xc52 <GPIO_setupPinDirection+0x10c>
     c4e:	88 0f       	add	r24, r24
     c50:	99 1f       	adc	r25, r25
     c52:	0a 94       	dec	r0
     c54:	e2 f7       	brpl	.-8      	; 0xc4e <GPIO_setupPinDirection+0x108>
     c56:	80 95       	com	r24
     c58:	84 23       	and	r24, r20
     c5a:	8c 93       	st	X, r24
     c5c:	57 c0       	rjmp	.+174    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     c5e:	8b 81       	ldd	r24, Y+3	; 0x03
     c60:	81 30       	cpi	r24, 0x01	; 1
     c62:	a1 f4       	brne	.+40     	; 0xc8c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     c64:	a4 e3       	ldi	r26, 0x34	; 52
     c66:	b0 e0       	ldi	r27, 0x00	; 0
     c68:	e4 e3       	ldi	r30, 0x34	; 52
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	80 81       	ld	r24, Z
     c6e:	48 2f       	mov	r20, r24
     c70:	8a 81       	ldd	r24, Y+2	; 0x02
     c72:	28 2f       	mov	r18, r24
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	02 2e       	mov	r0, r18
     c7c:	02 c0       	rjmp	.+4      	; 0xc82 <GPIO_setupPinDirection+0x13c>
     c7e:	88 0f       	add	r24, r24
     c80:	99 1f       	adc	r25, r25
     c82:	0a 94       	dec	r0
     c84:	e2 f7       	brpl	.-8      	; 0xc7e <GPIO_setupPinDirection+0x138>
     c86:	84 2b       	or	r24, r20
     c88:	8c 93       	st	X, r24
     c8a:	40 c0       	rjmp	.+128    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     c8c:	a4 e3       	ldi	r26, 0x34	; 52
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	e4 e3       	ldi	r30, 0x34	; 52
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	48 2f       	mov	r20, r24
     c98:	8a 81       	ldd	r24, Y+2	; 0x02
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	02 2e       	mov	r0, r18
     ca4:	02 c0       	rjmp	.+4      	; 0xcaa <GPIO_setupPinDirection+0x164>
     ca6:	88 0f       	add	r24, r24
     ca8:	99 1f       	adc	r25, r25
     caa:	0a 94       	dec	r0
     cac:	e2 f7       	brpl	.-8      	; 0xca6 <GPIO_setupPinDirection+0x160>
     cae:	80 95       	com	r24
     cb0:	84 23       	and	r24, r20
     cb2:	8c 93       	st	X, r24
     cb4:	2b c0       	rjmp	.+86     	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     cb6:	8b 81       	ldd	r24, Y+3	; 0x03
     cb8:	81 30       	cpi	r24, 0x01	; 1
     cba:	a1 f4       	brne	.+40     	; 0xce4 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     cbc:	a1 e3       	ldi	r26, 0x31	; 49
     cbe:	b0 e0       	ldi	r27, 0x00	; 0
     cc0:	e1 e3       	ldi	r30, 0x31	; 49
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	48 2f       	mov	r20, r24
     cc8:	8a 81       	ldd	r24, Y+2	; 0x02
     cca:	28 2f       	mov	r18, r24
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	02 2e       	mov	r0, r18
     cd4:	02 c0       	rjmp	.+4      	; 0xcda <GPIO_setupPinDirection+0x194>
     cd6:	88 0f       	add	r24, r24
     cd8:	99 1f       	adc	r25, r25
     cda:	0a 94       	dec	r0
     cdc:	e2 f7       	brpl	.-8      	; 0xcd6 <GPIO_setupPinDirection+0x190>
     cde:	84 2b       	or	r24, r20
     ce0:	8c 93       	st	X, r24
     ce2:	14 c0       	rjmp	.+40     	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     ce4:	a1 e3       	ldi	r26, 0x31	; 49
     ce6:	b0 e0       	ldi	r27, 0x00	; 0
     ce8:	e1 e3       	ldi	r30, 0x31	; 49
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	80 81       	ld	r24, Z
     cee:	48 2f       	mov	r20, r24
     cf0:	8a 81       	ldd	r24, Y+2	; 0x02
     cf2:	28 2f       	mov	r18, r24
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	02 2e       	mov	r0, r18
     cfc:	02 c0       	rjmp	.+4      	; 0xd02 <GPIO_setupPinDirection+0x1bc>
     cfe:	88 0f       	add	r24, r24
     d00:	99 1f       	adc	r25, r25
     d02:	0a 94       	dec	r0
     d04:	e2 f7       	brpl	.-8      	; 0xcfe <GPIO_setupPinDirection+0x1b8>
     d06:	80 95       	com	r24
     d08:	84 23       	and	r24, r20
     d0a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
     d12:	0f 90       	pop	r0
     d14:	0f 90       	pop	r0
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	08 95       	ret

00000d1c <GPIO_writePin>:
                       If the pin is input, this function will enable/disable the internal pull-up resistor.
 *[ARGUMENTS]		: port number, pin number, and pin value of type uint8
 *[RETURNS]			: void
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     d1c:	df 93       	push	r29
     d1e:	cf 93       	push	r28
     d20:	00 d0       	rcall	.+0      	; 0xd22 <GPIO_writePin+0x6>
     d22:	00 d0       	rcall	.+0      	; 0xd24 <GPIO_writePin+0x8>
     d24:	0f 92       	push	r0
     d26:	cd b7       	in	r28, 0x3d	; 61
     d28:	de b7       	in	r29, 0x3e	; 62
     d2a:	89 83       	std	Y+1, r24	; 0x01
     d2c:	6a 83       	std	Y+2, r22	; 0x02
     d2e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     d30:	8a 81       	ldd	r24, Y+2	; 0x02
     d32:	88 30       	cpi	r24, 0x08	; 8
     d34:	08 f0       	brcs	.+2      	; 0xd38 <GPIO_writePin+0x1c>
     d36:	d5 c0       	rjmp	.+426    	; 0xee2 <GPIO_writePin+0x1c6>
     d38:	89 81       	ldd	r24, Y+1	; 0x01
     d3a:	84 30       	cpi	r24, 0x04	; 4
     d3c:	08 f0       	brcs	.+2      	; 0xd40 <GPIO_writePin+0x24>
     d3e:	d1 c0       	rjmp	.+418    	; 0xee2 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     d40:	89 81       	ldd	r24, Y+1	; 0x01
     d42:	28 2f       	mov	r18, r24
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	3d 83       	std	Y+5, r19	; 0x05
     d48:	2c 83       	std	Y+4, r18	; 0x04
     d4a:	8c 81       	ldd	r24, Y+4	; 0x04
     d4c:	9d 81       	ldd	r25, Y+5	; 0x05
     d4e:	81 30       	cpi	r24, 0x01	; 1
     d50:	91 05       	cpc	r25, r1
     d52:	09 f4       	brne	.+2      	; 0xd56 <GPIO_writePin+0x3a>
     d54:	43 c0       	rjmp	.+134    	; 0xddc <GPIO_writePin+0xc0>
     d56:	2c 81       	ldd	r18, Y+4	; 0x04
     d58:	3d 81       	ldd	r19, Y+5	; 0x05
     d5a:	22 30       	cpi	r18, 0x02	; 2
     d5c:	31 05       	cpc	r19, r1
     d5e:	2c f4       	brge	.+10     	; 0xd6a <GPIO_writePin+0x4e>
     d60:	8c 81       	ldd	r24, Y+4	; 0x04
     d62:	9d 81       	ldd	r25, Y+5	; 0x05
     d64:	00 97       	sbiw	r24, 0x00	; 0
     d66:	71 f0       	breq	.+28     	; 0xd84 <GPIO_writePin+0x68>
     d68:	bc c0       	rjmp	.+376    	; 0xee2 <GPIO_writePin+0x1c6>
     d6a:	2c 81       	ldd	r18, Y+4	; 0x04
     d6c:	3d 81       	ldd	r19, Y+5	; 0x05
     d6e:	22 30       	cpi	r18, 0x02	; 2
     d70:	31 05       	cpc	r19, r1
     d72:	09 f4       	brne	.+2      	; 0xd76 <GPIO_writePin+0x5a>
     d74:	5f c0       	rjmp	.+190    	; 0xe34 <GPIO_writePin+0x118>
     d76:	8c 81       	ldd	r24, Y+4	; 0x04
     d78:	9d 81       	ldd	r25, Y+5	; 0x05
     d7a:	83 30       	cpi	r24, 0x03	; 3
     d7c:	91 05       	cpc	r25, r1
     d7e:	09 f4       	brne	.+2      	; 0xd82 <GPIO_writePin+0x66>
     d80:	85 c0       	rjmp	.+266    	; 0xe8c <GPIO_writePin+0x170>
     d82:	af c0       	rjmp	.+350    	; 0xee2 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     d84:	8b 81       	ldd	r24, Y+3	; 0x03
     d86:	81 30       	cpi	r24, 0x01	; 1
     d88:	a1 f4       	brne	.+40     	; 0xdb2 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
     d8a:	ab e3       	ldi	r26, 0x3B	; 59
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	eb e3       	ldi	r30, 0x3B	; 59
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	48 2f       	mov	r20, r24
     d96:	8a 81       	ldd	r24, Y+2	; 0x02
     d98:	28 2f       	mov	r18, r24
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	02 2e       	mov	r0, r18
     da2:	02 c0       	rjmp	.+4      	; 0xda8 <GPIO_writePin+0x8c>
     da4:	88 0f       	add	r24, r24
     da6:	99 1f       	adc	r25, r25
     da8:	0a 94       	dec	r0
     daa:	e2 f7       	brpl	.-8      	; 0xda4 <GPIO_writePin+0x88>
     dac:	84 2b       	or	r24, r20
     dae:	8c 93       	st	X, r24
     db0:	98 c0       	rjmp	.+304    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
     db2:	ab e3       	ldi	r26, 0x3B	; 59
     db4:	b0 e0       	ldi	r27, 0x00	; 0
     db6:	eb e3       	ldi	r30, 0x3B	; 59
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	80 81       	ld	r24, Z
     dbc:	48 2f       	mov	r20, r24
     dbe:	8a 81       	ldd	r24, Y+2	; 0x02
     dc0:	28 2f       	mov	r18, r24
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	02 2e       	mov	r0, r18
     dca:	02 c0       	rjmp	.+4      	; 0xdd0 <GPIO_writePin+0xb4>
     dcc:	88 0f       	add	r24, r24
     dce:	99 1f       	adc	r25, r25
     dd0:	0a 94       	dec	r0
     dd2:	e2 f7       	brpl	.-8      	; 0xdcc <GPIO_writePin+0xb0>
     dd4:	80 95       	com	r24
     dd6:	84 23       	and	r24, r20
     dd8:	8c 93       	st	X, r24
     dda:	83 c0       	rjmp	.+262    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
     ddc:	8b 81       	ldd	r24, Y+3	; 0x03
     dde:	81 30       	cpi	r24, 0x01	; 1
     de0:	a1 f4       	brne	.+40     	; 0xe0a <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
     de2:	a8 e3       	ldi	r26, 0x38	; 56
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	e8 e3       	ldi	r30, 0x38	; 56
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	48 2f       	mov	r20, r24
     dee:	8a 81       	ldd	r24, Y+2	; 0x02
     df0:	28 2f       	mov	r18, r24
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	02 2e       	mov	r0, r18
     dfa:	02 c0       	rjmp	.+4      	; 0xe00 <GPIO_writePin+0xe4>
     dfc:	88 0f       	add	r24, r24
     dfe:	99 1f       	adc	r25, r25
     e00:	0a 94       	dec	r0
     e02:	e2 f7       	brpl	.-8      	; 0xdfc <GPIO_writePin+0xe0>
     e04:	84 2b       	or	r24, r20
     e06:	8c 93       	st	X, r24
     e08:	6c c0       	rjmp	.+216    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
     e0a:	a8 e3       	ldi	r26, 0x38	; 56
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	e8 e3       	ldi	r30, 0x38	; 56
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	48 2f       	mov	r20, r24
     e16:	8a 81       	ldd	r24, Y+2	; 0x02
     e18:	28 2f       	mov	r18, r24
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	02 2e       	mov	r0, r18
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <GPIO_writePin+0x10c>
     e24:	88 0f       	add	r24, r24
     e26:	99 1f       	adc	r25, r25
     e28:	0a 94       	dec	r0
     e2a:	e2 f7       	brpl	.-8      	; 0xe24 <GPIO_writePin+0x108>
     e2c:	80 95       	com	r24
     e2e:	84 23       	and	r24, r20
     e30:	8c 93       	st	X, r24
     e32:	57 c0       	rjmp	.+174    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
     e34:	8b 81       	ldd	r24, Y+3	; 0x03
     e36:	81 30       	cpi	r24, 0x01	; 1
     e38:	a1 f4       	brne	.+40     	; 0xe62 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
     e3a:	a5 e3       	ldi	r26, 0x35	; 53
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	e5 e3       	ldi	r30, 0x35	; 53
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	48 2f       	mov	r20, r24
     e46:	8a 81       	ldd	r24, Y+2	; 0x02
     e48:	28 2f       	mov	r18, r24
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	02 2e       	mov	r0, r18
     e52:	02 c0       	rjmp	.+4      	; 0xe58 <GPIO_writePin+0x13c>
     e54:	88 0f       	add	r24, r24
     e56:	99 1f       	adc	r25, r25
     e58:	0a 94       	dec	r0
     e5a:	e2 f7       	brpl	.-8      	; 0xe54 <GPIO_writePin+0x138>
     e5c:	84 2b       	or	r24, r20
     e5e:	8c 93       	st	X, r24
     e60:	40 c0       	rjmp	.+128    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
     e62:	a5 e3       	ldi	r26, 0x35	; 53
     e64:	b0 e0       	ldi	r27, 0x00	; 0
     e66:	e5 e3       	ldi	r30, 0x35	; 53
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
     e6c:	48 2f       	mov	r20, r24
     e6e:	8a 81       	ldd	r24, Y+2	; 0x02
     e70:	28 2f       	mov	r18, r24
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	02 2e       	mov	r0, r18
     e7a:	02 c0       	rjmp	.+4      	; 0xe80 <GPIO_writePin+0x164>
     e7c:	88 0f       	add	r24, r24
     e7e:	99 1f       	adc	r25, r25
     e80:	0a 94       	dec	r0
     e82:	e2 f7       	brpl	.-8      	; 0xe7c <GPIO_writePin+0x160>
     e84:	80 95       	com	r24
     e86:	84 23       	and	r24, r20
     e88:	8c 93       	st	X, r24
     e8a:	2b c0       	rjmp	.+86     	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
     e8c:	8b 81       	ldd	r24, Y+3	; 0x03
     e8e:	81 30       	cpi	r24, 0x01	; 1
     e90:	a1 f4       	brne	.+40     	; 0xeba <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
     e92:	a2 e3       	ldi	r26, 0x32	; 50
     e94:	b0 e0       	ldi	r27, 0x00	; 0
     e96:	e2 e3       	ldi	r30, 0x32	; 50
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	48 2f       	mov	r20, r24
     e9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ea0:	28 2f       	mov	r18, r24
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	02 2e       	mov	r0, r18
     eaa:	02 c0       	rjmp	.+4      	; 0xeb0 <GPIO_writePin+0x194>
     eac:	88 0f       	add	r24, r24
     eae:	99 1f       	adc	r25, r25
     eb0:	0a 94       	dec	r0
     eb2:	e2 f7       	brpl	.-8      	; 0xeac <GPIO_writePin+0x190>
     eb4:	84 2b       	or	r24, r20
     eb6:	8c 93       	st	X, r24
     eb8:	14 c0       	rjmp	.+40     	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
     eba:	a2 e3       	ldi	r26, 0x32	; 50
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	e2 e3       	ldi	r30, 0x32	; 50
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	48 2f       	mov	r20, r24
     ec6:	8a 81       	ldd	r24, Y+2	; 0x02
     ec8:	28 2f       	mov	r18, r24
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	02 2e       	mov	r0, r18
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <GPIO_writePin+0x1bc>
     ed4:	88 0f       	add	r24, r24
     ed6:	99 1f       	adc	r25, r25
     ed8:	0a 94       	dec	r0
     eda:	e2 f7       	brpl	.-8      	; 0xed4 <GPIO_writePin+0x1b8>
     edc:	80 95       	com	r24
     ede:	84 23       	and	r24, r20
     ee0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     ee2:	0f 90       	pop	r0
     ee4:	0f 90       	pop	r0
     ee6:	0f 90       	pop	r0
     ee8:	0f 90       	pop	r0
     eea:	0f 90       	pop	r0
     eec:	cf 91       	pop	r28
     eee:	df 91       	pop	r29
     ef0:	08 95       	ret

00000ef2 <GPIO_readPin>:
 *[ARGUMENTS]		: port number and pin number of type uint8
 *[RETURNS]			: uint8
 */

uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
     ef2:	df 93       	push	r29
     ef4:	cf 93       	push	r28
     ef6:	00 d0       	rcall	.+0      	; 0xef8 <GPIO_readPin+0x6>
     ef8:	00 d0       	rcall	.+0      	; 0xefa <GPIO_readPin+0x8>
     efa:	0f 92       	push	r0
     efc:	cd b7       	in	r28, 0x3d	; 61
     efe:	de b7       	in	r29, 0x3e	; 62
     f00:	8a 83       	std	Y+2, r24	; 0x02
     f02:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
     f04:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     f06:	8b 81       	ldd	r24, Y+3	; 0x03
     f08:	88 30       	cpi	r24, 0x08	; 8
     f0a:	08 f0       	brcs	.+2      	; 0xf0e <GPIO_readPin+0x1c>
     f0c:	84 c0       	rjmp	.+264    	; 0x1016 <GPIO_readPin+0x124>
     f0e:	8a 81       	ldd	r24, Y+2	; 0x02
     f10:	84 30       	cpi	r24, 0x04	; 4
     f12:	08 f0       	brcs	.+2      	; 0xf16 <GPIO_readPin+0x24>
     f14:	80 c0       	rjmp	.+256    	; 0x1016 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
     f16:	8a 81       	ldd	r24, Y+2	; 0x02
     f18:	28 2f       	mov	r18, r24
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	3d 83       	std	Y+5, r19	; 0x05
     f1e:	2c 83       	std	Y+4, r18	; 0x04
     f20:	4c 81       	ldd	r20, Y+4	; 0x04
     f22:	5d 81       	ldd	r21, Y+5	; 0x05
     f24:	41 30       	cpi	r20, 0x01	; 1
     f26:	51 05       	cpc	r21, r1
     f28:	79 f1       	breq	.+94     	; 0xf88 <GPIO_readPin+0x96>
     f2a:	8c 81       	ldd	r24, Y+4	; 0x04
     f2c:	9d 81       	ldd	r25, Y+5	; 0x05
     f2e:	82 30       	cpi	r24, 0x02	; 2
     f30:	91 05       	cpc	r25, r1
     f32:	34 f4       	brge	.+12     	; 0xf40 <GPIO_readPin+0x4e>
     f34:	2c 81       	ldd	r18, Y+4	; 0x04
     f36:	3d 81       	ldd	r19, Y+5	; 0x05
     f38:	21 15       	cp	r18, r1
     f3a:	31 05       	cpc	r19, r1
     f3c:	69 f0       	breq	.+26     	; 0xf58 <GPIO_readPin+0x66>
     f3e:	6b c0       	rjmp	.+214    	; 0x1016 <GPIO_readPin+0x124>
     f40:	4c 81       	ldd	r20, Y+4	; 0x04
     f42:	5d 81       	ldd	r21, Y+5	; 0x05
     f44:	42 30       	cpi	r20, 0x02	; 2
     f46:	51 05       	cpc	r21, r1
     f48:	b9 f1       	breq	.+110    	; 0xfb8 <GPIO_readPin+0xc6>
     f4a:	8c 81       	ldd	r24, Y+4	; 0x04
     f4c:	9d 81       	ldd	r25, Y+5	; 0x05
     f4e:	83 30       	cpi	r24, 0x03	; 3
     f50:	91 05       	cpc	r25, r1
     f52:	09 f4       	brne	.+2      	; 0xf56 <GPIO_readPin+0x64>
     f54:	49 c0       	rjmp	.+146    	; 0xfe8 <GPIO_readPin+0xf6>
     f56:	5f c0       	rjmp	.+190    	; 0x1016 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
     f58:	e9 e3       	ldi	r30, 0x39	; 57
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	28 2f       	mov	r18, r24
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	8b 81       	ldd	r24, Y+3	; 0x03
     f64:	88 2f       	mov	r24, r24
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	a9 01       	movw	r20, r18
     f6a:	02 c0       	rjmp	.+4      	; 0xf70 <GPIO_readPin+0x7e>
     f6c:	55 95       	asr	r21
     f6e:	47 95       	ror	r20
     f70:	8a 95       	dec	r24
     f72:	e2 f7       	brpl	.-8      	; 0xf6c <GPIO_readPin+0x7a>
     f74:	ca 01       	movw	r24, r20
     f76:	81 70       	andi	r24, 0x01	; 1
     f78:	90 70       	andi	r25, 0x00	; 0
     f7a:	88 23       	and	r24, r24
     f7c:	19 f0       	breq	.+6      	; 0xf84 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	89 83       	std	Y+1, r24	; 0x01
     f82:	49 c0       	rjmp	.+146    	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     f84:	19 82       	std	Y+1, r1	; 0x01
     f86:	47 c0       	rjmp	.+142    	; 0x1016 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
     f88:	e6 e3       	ldi	r30, 0x36	; 54
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 81       	ld	r24, Z
     f8e:	28 2f       	mov	r18, r24
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	8b 81       	ldd	r24, Y+3	; 0x03
     f94:	88 2f       	mov	r24, r24
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	a9 01       	movw	r20, r18
     f9a:	02 c0       	rjmp	.+4      	; 0xfa0 <GPIO_readPin+0xae>
     f9c:	55 95       	asr	r21
     f9e:	47 95       	ror	r20
     fa0:	8a 95       	dec	r24
     fa2:	e2 f7       	brpl	.-8      	; 0xf9c <GPIO_readPin+0xaa>
     fa4:	ca 01       	movw	r24, r20
     fa6:	81 70       	andi	r24, 0x01	; 1
     fa8:	90 70       	andi	r25, 0x00	; 0
     faa:	88 23       	and	r24, r24
     fac:	19 f0       	breq	.+6      	; 0xfb4 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	89 83       	std	Y+1, r24	; 0x01
     fb2:	31 c0       	rjmp	.+98     	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     fb4:	19 82       	std	Y+1, r1	; 0x01
     fb6:	2f c0       	rjmp	.+94     	; 0x1016 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
     fb8:	e3 e3       	ldi	r30, 0x33	; 51
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	28 2f       	mov	r18, r24
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	8b 81       	ldd	r24, Y+3	; 0x03
     fc4:	88 2f       	mov	r24, r24
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	a9 01       	movw	r20, r18
     fca:	02 c0       	rjmp	.+4      	; 0xfd0 <GPIO_readPin+0xde>
     fcc:	55 95       	asr	r21
     fce:	47 95       	ror	r20
     fd0:	8a 95       	dec	r24
     fd2:	e2 f7       	brpl	.-8      	; 0xfcc <GPIO_readPin+0xda>
     fd4:	ca 01       	movw	r24, r20
     fd6:	81 70       	andi	r24, 0x01	; 1
     fd8:	90 70       	andi	r25, 0x00	; 0
     fda:	88 23       	and	r24, r24
     fdc:	19 f0       	breq	.+6      	; 0xfe4 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	89 83       	std	Y+1, r24	; 0x01
     fe2:	19 c0       	rjmp	.+50     	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     fe4:	19 82       	std	Y+1, r1	; 0x01
     fe6:	17 c0       	rjmp	.+46     	; 0x1016 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
     fe8:	e0 e3       	ldi	r30, 0x30	; 48
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	28 2f       	mov	r18, r24
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	8b 81       	ldd	r24, Y+3	; 0x03
     ff4:	88 2f       	mov	r24, r24
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	a9 01       	movw	r20, r18
     ffa:	02 c0       	rjmp	.+4      	; 0x1000 <GPIO_readPin+0x10e>
     ffc:	55 95       	asr	r21
     ffe:	47 95       	ror	r20
    1000:	8a 95       	dec	r24
    1002:	e2 f7       	brpl	.-8      	; 0xffc <GPIO_readPin+0x10a>
    1004:	ca 01       	movw	r24, r20
    1006:	81 70       	andi	r24, 0x01	; 1
    1008:	90 70       	andi	r25, 0x00	; 0
    100a:	88 23       	and	r24, r24
    100c:	19 f0       	breq	.+6      	; 0x1014 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	89 83       	std	Y+1, r24	; 0x01
    1012:	01 c0       	rjmp	.+2      	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1014:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1016:	89 81       	ldd	r24, Y+1	; 0x01
}
    1018:	0f 90       	pop	r0
    101a:	0f 90       	pop	r0
    101c:	0f 90       	pop	r0
    101e:	0f 90       	pop	r0
    1020:	0f 90       	pop	r0
    1022:	cf 91       	pop	r28
    1024:	df 91       	pop	r29
    1026:	08 95       	ret

00001028 <GPIO_setupPortDirection>:
 *[ARGUMENTS]		: port number of type uint8 and port direction
                      of type GPIO_PortDirectionType
 *[RETURNS]			: void
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1028:	df 93       	push	r29
    102a:	cf 93       	push	r28
    102c:	00 d0       	rcall	.+0      	; 0x102e <GPIO_setupPortDirection+0x6>
    102e:	00 d0       	rcall	.+0      	; 0x1030 <GPIO_setupPortDirection+0x8>
    1030:	cd b7       	in	r28, 0x3d	; 61
    1032:	de b7       	in	r29, 0x3e	; 62
    1034:	89 83       	std	Y+1, r24	; 0x01
    1036:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1038:	89 81       	ldd	r24, Y+1	; 0x01
    103a:	84 30       	cpi	r24, 0x04	; 4
    103c:	90 f5       	brcc	.+100    	; 0x10a2 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    103e:	89 81       	ldd	r24, Y+1	; 0x01
    1040:	28 2f       	mov	r18, r24
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	3c 83       	std	Y+4, r19	; 0x04
    1046:	2b 83       	std	Y+3, r18	; 0x03
    1048:	8b 81       	ldd	r24, Y+3	; 0x03
    104a:	9c 81       	ldd	r25, Y+4	; 0x04
    104c:	81 30       	cpi	r24, 0x01	; 1
    104e:	91 05       	cpc	r25, r1
    1050:	d1 f0       	breq	.+52     	; 0x1086 <GPIO_setupPortDirection+0x5e>
    1052:	2b 81       	ldd	r18, Y+3	; 0x03
    1054:	3c 81       	ldd	r19, Y+4	; 0x04
    1056:	22 30       	cpi	r18, 0x02	; 2
    1058:	31 05       	cpc	r19, r1
    105a:	2c f4       	brge	.+10     	; 0x1066 <GPIO_setupPortDirection+0x3e>
    105c:	8b 81       	ldd	r24, Y+3	; 0x03
    105e:	9c 81       	ldd	r25, Y+4	; 0x04
    1060:	00 97       	sbiw	r24, 0x00	; 0
    1062:	61 f0       	breq	.+24     	; 0x107c <GPIO_setupPortDirection+0x54>
    1064:	1e c0       	rjmp	.+60     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
    1066:	2b 81       	ldd	r18, Y+3	; 0x03
    1068:	3c 81       	ldd	r19, Y+4	; 0x04
    106a:	22 30       	cpi	r18, 0x02	; 2
    106c:	31 05       	cpc	r19, r1
    106e:	81 f0       	breq	.+32     	; 0x1090 <GPIO_setupPortDirection+0x68>
    1070:	8b 81       	ldd	r24, Y+3	; 0x03
    1072:	9c 81       	ldd	r25, Y+4	; 0x04
    1074:	83 30       	cpi	r24, 0x03	; 3
    1076:	91 05       	cpc	r25, r1
    1078:	81 f0       	breq	.+32     	; 0x109a <GPIO_setupPortDirection+0x72>
    107a:	13 c0       	rjmp	.+38     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    107c:	ea e3       	ldi	r30, 0x3A	; 58
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	8a 81       	ldd	r24, Y+2	; 0x02
    1082:	80 83       	st	Z, r24
    1084:	0e c0       	rjmp	.+28     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1086:	e7 e3       	ldi	r30, 0x37	; 55
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	8a 81       	ldd	r24, Y+2	; 0x02
    108c:	80 83       	st	Z, r24
    108e:	09 c0       	rjmp	.+18     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1090:	e4 e3       	ldi	r30, 0x34	; 52
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	8a 81       	ldd	r24, Y+2	; 0x02
    1096:	80 83       	st	Z, r24
    1098:	04 c0       	rjmp	.+8      	; 0x10a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    109a:	e1 e3       	ldi	r30, 0x31	; 49
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	8a 81       	ldd	r24, Y+2	; 0x02
    10a0:	80 83       	st	Z, r24
			break;
		}
	}
}
    10a2:	0f 90       	pop	r0
    10a4:	0f 90       	pop	r0
    10a6:	0f 90       	pop	r0
    10a8:	0f 90       	pop	r0
    10aa:	cf 91       	pop	r28
    10ac:	df 91       	pop	r29
    10ae:	08 95       	ret

000010b0 <GPIO_writePort>:
                      If the input port number is not correct, The function will not handle the request.
 *[ARGUMENTS]		: port number and port value of type uint8
 *[RETURNS]			: void
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    10b0:	df 93       	push	r29
    10b2:	cf 93       	push	r28
    10b4:	00 d0       	rcall	.+0      	; 0x10b6 <GPIO_writePort+0x6>
    10b6:	00 d0       	rcall	.+0      	; 0x10b8 <GPIO_writePort+0x8>
    10b8:	cd b7       	in	r28, 0x3d	; 61
    10ba:	de b7       	in	r29, 0x3e	; 62
    10bc:	89 83       	std	Y+1, r24	; 0x01
    10be:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    10c0:	89 81       	ldd	r24, Y+1	; 0x01
    10c2:	84 30       	cpi	r24, 0x04	; 4
    10c4:	90 f5       	brcc	.+100    	; 0x112a <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    10c6:	89 81       	ldd	r24, Y+1	; 0x01
    10c8:	28 2f       	mov	r18, r24
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	3c 83       	std	Y+4, r19	; 0x04
    10ce:	2b 83       	std	Y+3, r18	; 0x03
    10d0:	8b 81       	ldd	r24, Y+3	; 0x03
    10d2:	9c 81       	ldd	r25, Y+4	; 0x04
    10d4:	81 30       	cpi	r24, 0x01	; 1
    10d6:	91 05       	cpc	r25, r1
    10d8:	d1 f0       	breq	.+52     	; 0x110e <GPIO_writePort+0x5e>
    10da:	2b 81       	ldd	r18, Y+3	; 0x03
    10dc:	3c 81       	ldd	r19, Y+4	; 0x04
    10de:	22 30       	cpi	r18, 0x02	; 2
    10e0:	31 05       	cpc	r19, r1
    10e2:	2c f4       	brge	.+10     	; 0x10ee <GPIO_writePort+0x3e>
    10e4:	8b 81       	ldd	r24, Y+3	; 0x03
    10e6:	9c 81       	ldd	r25, Y+4	; 0x04
    10e8:	00 97       	sbiw	r24, 0x00	; 0
    10ea:	61 f0       	breq	.+24     	; 0x1104 <GPIO_writePort+0x54>
    10ec:	1e c0       	rjmp	.+60     	; 0x112a <GPIO_writePort+0x7a>
    10ee:	2b 81       	ldd	r18, Y+3	; 0x03
    10f0:	3c 81       	ldd	r19, Y+4	; 0x04
    10f2:	22 30       	cpi	r18, 0x02	; 2
    10f4:	31 05       	cpc	r19, r1
    10f6:	81 f0       	breq	.+32     	; 0x1118 <GPIO_writePort+0x68>
    10f8:	8b 81       	ldd	r24, Y+3	; 0x03
    10fa:	9c 81       	ldd	r25, Y+4	; 0x04
    10fc:	83 30       	cpi	r24, 0x03	; 3
    10fe:	91 05       	cpc	r25, r1
    1100:	81 f0       	breq	.+32     	; 0x1122 <GPIO_writePort+0x72>
    1102:	13 c0       	rjmp	.+38     	; 0x112a <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1104:	eb e3       	ldi	r30, 0x3B	; 59
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	8a 81       	ldd	r24, Y+2	; 0x02
    110a:	80 83       	st	Z, r24
    110c:	0e c0       	rjmp	.+28     	; 0x112a <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    110e:	e8 e3       	ldi	r30, 0x38	; 56
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	8a 81       	ldd	r24, Y+2	; 0x02
    1114:	80 83       	st	Z, r24
    1116:	09 c0       	rjmp	.+18     	; 0x112a <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1118:	e5 e3       	ldi	r30, 0x35	; 53
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	8a 81       	ldd	r24, Y+2	; 0x02
    111e:	80 83       	st	Z, r24
    1120:	04 c0       	rjmp	.+8      	; 0x112a <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1122:	e2 e3       	ldi	r30, 0x32	; 50
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	8a 81       	ldd	r24, Y+2	; 0x02
    1128:	80 83       	st	Z, r24
			break;
		}
	}
}
    112a:	0f 90       	pop	r0
    112c:	0f 90       	pop	r0
    112e:	0f 90       	pop	r0
    1130:	0f 90       	pop	r0
    1132:	cf 91       	pop	r28
    1134:	df 91       	pop	r29
    1136:	08 95       	ret

00001138 <GPIO_readPort>:
                      If the input port number is not correct, The function will return ZERO value.
 *[ARGUMENTS]		: port number of type uint8
 *[RETURNS]			: uint8
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1138:	df 93       	push	r29
    113a:	cf 93       	push	r28
    113c:	00 d0       	rcall	.+0      	; 0x113e <GPIO_readPort+0x6>
    113e:	00 d0       	rcall	.+0      	; 0x1140 <GPIO_readPort+0x8>
    1140:	cd b7       	in	r28, 0x3d	; 61
    1142:	de b7       	in	r29, 0x3e	; 62
    1144:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1146:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1148:	8a 81       	ldd	r24, Y+2	; 0x02
    114a:	84 30       	cpi	r24, 0x04	; 4
    114c:	90 f5       	brcc	.+100    	; 0x11b2 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    114e:	8a 81       	ldd	r24, Y+2	; 0x02
    1150:	28 2f       	mov	r18, r24
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	3c 83       	std	Y+4, r19	; 0x04
    1156:	2b 83       	std	Y+3, r18	; 0x03
    1158:	8b 81       	ldd	r24, Y+3	; 0x03
    115a:	9c 81       	ldd	r25, Y+4	; 0x04
    115c:	81 30       	cpi	r24, 0x01	; 1
    115e:	91 05       	cpc	r25, r1
    1160:	d1 f0       	breq	.+52     	; 0x1196 <GPIO_readPort+0x5e>
    1162:	2b 81       	ldd	r18, Y+3	; 0x03
    1164:	3c 81       	ldd	r19, Y+4	; 0x04
    1166:	22 30       	cpi	r18, 0x02	; 2
    1168:	31 05       	cpc	r19, r1
    116a:	2c f4       	brge	.+10     	; 0x1176 <GPIO_readPort+0x3e>
    116c:	8b 81       	ldd	r24, Y+3	; 0x03
    116e:	9c 81       	ldd	r25, Y+4	; 0x04
    1170:	00 97       	sbiw	r24, 0x00	; 0
    1172:	61 f0       	breq	.+24     	; 0x118c <GPIO_readPort+0x54>
    1174:	1e c0       	rjmp	.+60     	; 0x11b2 <GPIO_readPort+0x7a>
    1176:	2b 81       	ldd	r18, Y+3	; 0x03
    1178:	3c 81       	ldd	r19, Y+4	; 0x04
    117a:	22 30       	cpi	r18, 0x02	; 2
    117c:	31 05       	cpc	r19, r1
    117e:	81 f0       	breq	.+32     	; 0x11a0 <GPIO_readPort+0x68>
    1180:	8b 81       	ldd	r24, Y+3	; 0x03
    1182:	9c 81       	ldd	r25, Y+4	; 0x04
    1184:	83 30       	cpi	r24, 0x03	; 3
    1186:	91 05       	cpc	r25, r1
    1188:	81 f0       	breq	.+32     	; 0x11aa <GPIO_readPort+0x72>
    118a:	13 c0       	rjmp	.+38     	; 0x11b2 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    118c:	e9 e3       	ldi	r30, 0x39	; 57
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	89 83       	std	Y+1, r24	; 0x01
    1194:	0e c0       	rjmp	.+28     	; 0x11b2 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1196:	e6 e3       	ldi	r30, 0x36	; 54
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	89 83       	std	Y+1, r24	; 0x01
    119e:	09 c0       	rjmp	.+18     	; 0x11b2 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    11a0:	e3 e3       	ldi	r30, 0x33	; 51
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	89 83       	std	Y+1, r24	; 0x01
    11a8:	04 c0       	rjmp	.+8      	; 0x11b2 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    11aa:	e0 e3       	ldi	r30, 0x30	; 48
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	80 81       	ld	r24, Z
    11b0:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    11b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    11b4:	0f 90       	pop	r0
    11b6:	0f 90       	pop	r0
    11b8:	0f 90       	pop	r0
    11ba:	0f 90       	pop	r0
    11bc:	cf 91       	pop	r28
    11be:	df 91       	pop	r29
    11c0:	08 95       	ret

000011c2 <main>:
uint8 g_ticks = 0;
uint8 pressed_key = 0;


int main(void)
{
    11c2:	df 93       	push	r29
    11c4:	cf 93       	push	r28
    11c6:	cd b7       	in	r28, 0x3d	; 61
    11c8:	de b7       	in	r29, 0x3e	; 62
    11ca:	a5 97       	sbiw	r28, 0x25	; 37
    11cc:	0f b6       	in	r0, 0x3f	; 63
    11ce:	f8 94       	cli
    11d0:	de bf       	out	0x3e, r29	; 62
    11d2:	0f be       	out	0x3f, r0	; 63
    11d4:	cd bf       	out	0x3d, r28	; 61
	/*Enable I-bit*/
	SREG|=(1<<7);
    11d6:	af e5       	ldi	r26, 0x5F	; 95
    11d8:	b0 e0       	ldi	r27, 0x00	; 0
    11da:	ef e5       	ldi	r30, 0x5F	; 95
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	80 81       	ld	r24, Z
    11e0:	80 68       	ori	r24, 0x80	; 128
    11e2:	8c 93       	st	X, r24

	/* Initialize UART driver */
	UART_ConfigType uart_configurations = {EIGHT_BITS,EVEN,ONE_BIT,9600};
    11e4:	ce 01       	movw	r24, r28
    11e6:	0f 96       	adiw	r24, 0x0f	; 15
    11e8:	9d 8f       	std	Y+29, r25	; 0x1d
    11ea:	8c 8f       	std	Y+28, r24	; 0x1c
    11ec:	ea e6       	ldi	r30, 0x6A	; 106
    11ee:	f1 e0       	ldi	r31, 0x01	; 1
    11f0:	ff 8f       	std	Y+31, r31	; 0x1f
    11f2:	ee 8f       	std	Y+30, r30	; 0x1e
    11f4:	f7 e0       	ldi	r31, 0x07	; 7
    11f6:	f8 a3       	std	Y+32, r31	; 0x20
    11f8:	ee 8d       	ldd	r30, Y+30	; 0x1e
    11fa:	ff 8d       	ldd	r31, Y+31	; 0x1f
    11fc:	00 80       	ld	r0, Z
    11fe:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1200:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1202:	01 96       	adiw	r24, 0x01	; 1
    1204:	9f 8f       	std	Y+31, r25	; 0x1f
    1206:	8e 8f       	std	Y+30, r24	; 0x1e
    1208:	ec 8d       	ldd	r30, Y+28	; 0x1c
    120a:	fd 8d       	ldd	r31, Y+29	; 0x1d
    120c:	00 82       	st	Z, r0
    120e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1210:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1212:	01 96       	adiw	r24, 0x01	; 1
    1214:	9d 8f       	std	Y+29, r25	; 0x1d
    1216:	8c 8f       	std	Y+28, r24	; 0x1c
    1218:	98 a1       	ldd	r25, Y+32	; 0x20
    121a:	91 50       	subi	r25, 0x01	; 1
    121c:	98 a3       	std	Y+32, r25	; 0x20
    121e:	e8 a1       	ldd	r30, Y+32	; 0x20
    1220:	ee 23       	and	r30, r30
    1222:	51 f7       	brne	.-44     	; 0x11f8 <main+0x36>
	UART_init(&uart_configurations);
    1224:	ce 01       	movw	r24, r28
    1226:	0f 96       	adiw	r24, 0x0f	; 15
    1228:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <UART_init>

	/* Initialize Timer1 Driver to make an interrupt every 1sec */
	Timer1_ConfigType configurations = {0,8000,F_CPU_1024,CTC};
    122c:	ce 01       	movw	r24, r28
    122e:	46 96       	adiw	r24, 0x16	; 22
    1230:	9a a3       	std	Y+34, r25	; 0x22
    1232:	89 a3       	std	Y+33, r24	; 0x21
    1234:	e4 e6       	ldi	r30, 0x64	; 100
    1236:	f1 e0       	ldi	r31, 0x01	; 1
    1238:	fc a3       	std	Y+36, r31	; 0x24
    123a:	eb a3       	std	Y+35, r30	; 0x23
    123c:	f6 e0       	ldi	r31, 0x06	; 6
    123e:	fd a3       	std	Y+37, r31	; 0x25
    1240:	eb a1       	ldd	r30, Y+35	; 0x23
    1242:	fc a1       	ldd	r31, Y+36	; 0x24
    1244:	00 80       	ld	r0, Z
    1246:	8b a1       	ldd	r24, Y+35	; 0x23
    1248:	9c a1       	ldd	r25, Y+36	; 0x24
    124a:	01 96       	adiw	r24, 0x01	; 1
    124c:	9c a3       	std	Y+36, r25	; 0x24
    124e:	8b a3       	std	Y+35, r24	; 0x23
    1250:	e9 a1       	ldd	r30, Y+33	; 0x21
    1252:	fa a1       	ldd	r31, Y+34	; 0x22
    1254:	00 82       	st	Z, r0
    1256:	89 a1       	ldd	r24, Y+33	; 0x21
    1258:	9a a1       	ldd	r25, Y+34	; 0x22
    125a:	01 96       	adiw	r24, 0x01	; 1
    125c:	9a a3       	std	Y+34, r25	; 0x22
    125e:	89 a3       	std	Y+33, r24	; 0x21
    1260:	9d a1       	ldd	r25, Y+37	; 0x25
    1262:	91 50       	subi	r25, 0x01	; 1
    1264:	9d a3       	std	Y+37, r25	; 0x25
    1266:	ed a1       	ldd	r30, Y+37	; 0x25
    1268:	ee 23       	and	r30, r30
    126a:	51 f7       	brne	.-44     	; 0x1240 <main+0x7e>
	Timer1_init(&configurations);
    126c:	ce 01       	movw	r24, r28
    126e:	46 96       	adiw	r24, 0x16	; 22
    1270:	0e 94 57 16 	call	0x2cae	; 0x2cae <Timer1_init>
	Timer1_setCallBack(Timer1_callBack);
    1274:	8d ed       	ldi	r24, 0xDD	; 221
    1276:	99 e0       	ldi	r25, 0x09	; 9
    1278:	0e 94 d7 16 	call	0x2dae	; 0x2dae <Timer1_setCallBack>

	/*Initialize the LCD driver*/
	LCD_init();
    127c:	0e 94 c6 10 	call	0x218c	; 0x218c <LCD_init>

	/* LCD Initialization completed and ready to communication */
	UART_sendByte(HMI_ECU_READY);
    1280:	80 e1       	ldi	r24, 0x10	; 16
    1282:	0e 94 80 17 	call	0x2f00	; 0x2f00 <UART_sendByte>

	LCD_displayStringRowColumn(0,2,"Door Locker");
    1286:	20 e6       	ldi	r18, 0x60	; 96
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	80 e0       	ldi	r24, 0x00	; 0
    128c:	62 e0       	ldi	r22, 0x02	; 2
    128e:	a9 01       	movw	r20, r18
    1290:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,0,"Security System!");
    1294:	2c e6       	ldi	r18, 0x6C	; 108
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	81 e0       	ldi	r24, 0x01	; 1
    129a:	60 e0       	ldi	r22, 0x00	; 0
    129c:	a9 01       	movw	r20, r18
    129e:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <LCD_displayStringRowColumn>
    12a2:	80 e0       	ldi	r24, 0x00	; 0
    12a4:	90 e4       	ldi	r25, 0x40	; 64
    12a6:	ac e1       	ldi	r26, 0x1C	; 28
    12a8:	b5 e4       	ldi	r27, 0x45	; 69
    12aa:	8b 87       	std	Y+11, r24	; 0x0b
    12ac:	9c 87       	std	Y+12, r25	; 0x0c
    12ae:	ad 87       	std	Y+13, r26	; 0x0d
    12b0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    12b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    12b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    12b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    12ba:	20 e0       	ldi	r18, 0x00	; 0
    12bc:	30 e0       	ldi	r19, 0x00	; 0
    12be:	4a ef       	ldi	r20, 0xFA	; 250
    12c0:	54 e4       	ldi	r21, 0x44	; 68
    12c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12c6:	dc 01       	movw	r26, r24
    12c8:	cb 01       	movw	r24, r22
    12ca:	8f 83       	std	Y+7, r24	; 0x07
    12cc:	98 87       	std	Y+8, r25	; 0x08
    12ce:	a9 87       	std	Y+9, r26	; 0x09
    12d0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12d2:	6f 81       	ldd	r22, Y+7	; 0x07
    12d4:	78 85       	ldd	r23, Y+8	; 0x08
    12d6:	89 85       	ldd	r24, Y+9	; 0x09
    12d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    12da:	20 e0       	ldi	r18, 0x00	; 0
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	40 e8       	ldi	r20, 0x80	; 128
    12e0:	5f e3       	ldi	r21, 0x3F	; 63
    12e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12e6:	88 23       	and	r24, r24
    12e8:	2c f4       	brge	.+10     	; 0x12f4 <main+0x132>
		__ticks = 1;
    12ea:	81 e0       	ldi	r24, 0x01	; 1
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	9e 83       	std	Y+6, r25	; 0x06
    12f0:	8d 83       	std	Y+5, r24	; 0x05
    12f2:	3f c0       	rjmp	.+126    	; 0x1372 <main+0x1b0>
	else if (__tmp > 65535)
    12f4:	6f 81       	ldd	r22, Y+7	; 0x07
    12f6:	78 85       	ldd	r23, Y+8	; 0x08
    12f8:	89 85       	ldd	r24, Y+9	; 0x09
    12fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    12fc:	20 e0       	ldi	r18, 0x00	; 0
    12fe:	3f ef       	ldi	r19, 0xFF	; 255
    1300:	4f e7       	ldi	r20, 0x7F	; 127
    1302:	57 e4       	ldi	r21, 0x47	; 71
    1304:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1308:	18 16       	cp	r1, r24
    130a:	4c f5       	brge	.+82     	; 0x135e <main+0x19c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    130c:	6b 85       	ldd	r22, Y+11	; 0x0b
    130e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1310:	8d 85       	ldd	r24, Y+13	; 0x0d
    1312:	9e 85       	ldd	r25, Y+14	; 0x0e
    1314:	20 e0       	ldi	r18, 0x00	; 0
    1316:	30 e0       	ldi	r19, 0x00	; 0
    1318:	40 e2       	ldi	r20, 0x20	; 32
    131a:	51 e4       	ldi	r21, 0x41	; 65
    131c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1320:	dc 01       	movw	r26, r24
    1322:	cb 01       	movw	r24, r22
    1324:	bc 01       	movw	r22, r24
    1326:	cd 01       	movw	r24, r26
    1328:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    132c:	dc 01       	movw	r26, r24
    132e:	cb 01       	movw	r24, r22
    1330:	9e 83       	std	Y+6, r25	; 0x06
    1332:	8d 83       	std	Y+5, r24	; 0x05
    1334:	0f c0       	rjmp	.+30     	; 0x1354 <main+0x192>
    1336:	88 ec       	ldi	r24, 0xC8	; 200
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	9c 83       	std	Y+4, r25	; 0x04
    133c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    133e:	8b 81       	ldd	r24, Y+3	; 0x03
    1340:	9c 81       	ldd	r25, Y+4	; 0x04
    1342:	01 97       	sbiw	r24, 0x01	; 1
    1344:	f1 f7       	brne	.-4      	; 0x1342 <main+0x180>
    1346:	9c 83       	std	Y+4, r25	; 0x04
    1348:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    134a:	8d 81       	ldd	r24, Y+5	; 0x05
    134c:	9e 81       	ldd	r25, Y+6	; 0x06
    134e:	01 97       	sbiw	r24, 0x01	; 1
    1350:	9e 83       	std	Y+6, r25	; 0x06
    1352:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1354:	8d 81       	ldd	r24, Y+5	; 0x05
    1356:	9e 81       	ldd	r25, Y+6	; 0x06
    1358:	00 97       	sbiw	r24, 0x00	; 0
    135a:	69 f7       	brne	.-38     	; 0x1336 <main+0x174>
    135c:	14 c0       	rjmp	.+40     	; 0x1386 <main+0x1c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    135e:	6f 81       	ldd	r22, Y+7	; 0x07
    1360:	78 85       	ldd	r23, Y+8	; 0x08
    1362:	89 85       	ldd	r24, Y+9	; 0x09
    1364:	9a 85       	ldd	r25, Y+10	; 0x0a
    1366:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    136a:	dc 01       	movw	r26, r24
    136c:	cb 01       	movw	r24, r22
    136e:	9e 83       	std	Y+6, r25	; 0x06
    1370:	8d 83       	std	Y+5, r24	; 0x05
    1372:	8d 81       	ldd	r24, Y+5	; 0x05
    1374:	9e 81       	ldd	r25, Y+6	; 0x06
    1376:	9a 83       	std	Y+2, r25	; 0x02
    1378:	89 83       	std	Y+1, r24	; 0x01
    137a:	89 81       	ldd	r24, Y+1	; 0x01
    137c:	9a 81       	ldd	r25, Y+2	; 0x02
    137e:	01 97       	sbiw	r24, 0x01	; 1
    1380:	f1 f7       	brne	.-4      	; 0x137e <main+0x1bc>
    1382:	9a 83       	std	Y+2, r25	; 0x02
    1384:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2500);

	/* Call the Set Password Function */
	Set_Password();
    1386:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <Set_Password>

	while(1)
	{
		pressed_key = KEYPAD_getPressedKey();
    138a:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <KEYPAD_getPressedKey>
    138e:	80 93 73 01 	sts	0x0173, r24

		/* Send the pressed key to the CONTROL_ECU */
		UART_sendByte(pressed_key);
    1392:	80 91 73 01 	lds	r24, 0x0173
    1396:	0e 94 80 17 	call	0x2f00	; 0x2f00 <UART_sendByte>

		/* The LCD will always display main options */
		Main_Options();
    139a:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <Main_Options>

		if(pressed_key == OPEN_DOOR)
    139e:	80 91 73 01 	lds	r24, 0x0173
    13a2:	8b 32       	cpi	r24, 0x2B	; 43
    13a4:	19 f4       	brne	.+6      	; 0x13ac <main+0x1ea>
		{
			Open_Door();
    13a6:	0e 94 88 0b 	call	0x1710	; 0x1710 <Open_Door>
    13aa:	ef cf       	rjmp	.-34     	; 0x138a <main+0x1c8>
		}
		else if(pressed_key == CHANGE_PASS)
    13ac:	80 91 73 01 	lds	r24, 0x0173
    13b0:	8d 32       	cpi	r24, 0x2D	; 45
    13b2:	59 f7       	brne	.-42     	; 0x138a <main+0x1c8>
		{
			Change_Password();
    13b4:	0e 94 49 0c 	call	0x1892	; 0x1892 <Change_Password>
    13b8:	e8 cf       	rjmp	.-48     	; 0x138a <main+0x1c8>

000013ba <Timer1_callBack>:
	}
}


void Timer1_callBack(void)
{
    13ba:	df 93       	push	r29
    13bc:	cf 93       	push	r28
    13be:	cd b7       	in	r28, 0x3d	; 61
    13c0:	de b7       	in	r29, 0x3e	; 62
	g_ticks++;
    13c2:	80 91 72 01 	lds	r24, 0x0172
    13c6:	8f 5f       	subi	r24, 0xFF	; 255
    13c8:	80 93 72 01 	sts	0x0172, r24
}
    13cc:	cf 91       	pop	r28
    13ce:	df 91       	pop	r29
    13d0:	08 95       	ret

000013d2 <Set_Password>:

void Set_Password(void)
{
    13d2:	df 93       	push	r29
    13d4:	cf 93       	push	r28
    13d6:	cd b7       	in	r28, 0x3d	; 61
    13d8:	de b7       	in	r29, 0x3e	; 62
    13da:	69 97       	sbiw	r28, 0x19	; 25
    13dc:	0f b6       	in	r0, 0x3f	; 63
    13de:	f8 94       	cli
    13e0:	de bf       	out	0x3e, r29	; 62
    13e2:	0f be       	out	0x3f, r0	; 63
    13e4:	cd bf       	out	0x3d, r28	; 61
	uint8 entered_password[PASSWORD_SIZE], reentered_password[PASSWORD_SIZE];
	uint8 pass_state = UNMATCHED_PASSWORD;
    13e6:	80 e5       	ldi	r24, 0x50	; 80
    13e8:	8f 87       	std	Y+15, r24	; 0x0f
    13ea:	3d c0       	rjmp	.+122    	; 0x1466 <Set_Password+0x94>

	while(pass_state != MATCHED_PASSWORD)
	{
		/* Display enter password message */
		Enter_passMessage();
    13ec:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <Enter_passMessage>

		/* Get the entered password from the user */
		Get_Password(entered_password,PASSWORD_SIZE);
    13f0:	ce 01       	movw	r24, r28
    13f2:	40 96       	adiw	r24, 0x10	; 16
    13f4:	65 e0       	ldi	r22, 0x05	; 5
    13f6:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <Get_Password>

		/* Display message to ask user to re-enter the password */
		ReEnter_passMessage();
    13fa:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <ReEnter_passMessage>

		/* Get the re-entered password from the user */
		Get_Password(reentered_password,PASSWORD_SIZE);
    13fe:	ce 01       	movw	r24, r28
    1400:	45 96       	adiw	r24, 0x15	; 21
    1402:	65 e0       	ldi	r22, 0x05	; 5
    1404:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <Get_Password>

		/* Send a verification pattern to the CONTROL_ECU */
		UART_sendByte(HMI_ECU_READY);
    1408:	80 e1       	ldi	r24, 0x10	; 16
    140a:	0e 94 80 17 	call	0x2f00	; 0x2f00 <UART_sendByte>

		/* Wait for confirmation from the CONTROL_ECU */
		while(UART_recieveByte() != CONTROL_ECU_READY);
    140e:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <UART_recieveByte>
    1412:	80 32       	cpi	r24, 0x20	; 32
    1414:	e1 f7       	brne	.-8      	; 0x140e <Set_Password+0x3c>

		/* Send the first entered password to the CONTROL_ECU */
		Send_Password(entered_password,PASSWORD_SIZE);
    1416:	ce 01       	movw	r24, r28
    1418:	40 96       	adiw	r24, 0x10	; 16
    141a:	65 e0       	ldi	r22, 0x05	; 5
    141c:	0e 94 bf 0a 	call	0x157e	; 0x157e <Send_Password>

		/* Wait for the Sending is completed */
		while(UART_recieveByte() != FIRST_PASSWORD_DELIVERED);
    1420:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <UART_recieveByte>
    1424:	80 38       	cpi	r24, 0x80	; 128
    1426:	e1 f7       	brne	.-8      	; 0x1420 <Set_Password+0x4e>

		/* Send the second entered password/re-entered password to the CONTROL_ECU */
		Send_Password(reentered_password,PASSWORD_SIZE);
    1428:	ce 01       	movw	r24, r28
    142a:	45 96       	adiw	r24, 0x15	; 21
    142c:	65 e0       	ldi	r22, 0x05	; 5
    142e:	0e 94 bf 0a 	call	0x157e	; 0x157e <Send_Password>

		/* Wait for the Sending is completed */
		while(UART_recieveByte() != SECOND_PASSWORD_DELIVERED);
    1432:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <UART_recieveByte>
    1436:	88 30       	cpi	r24, 0x08	; 8
    1438:	e1 f7       	brne	.-8      	; 0x1432 <Set_Password+0x60>

		/* Read the matching state of the passwords */
		pass_state = UART_recieveByte();
    143a:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <UART_recieveByte>
    143e:	8f 87       	std	Y+15, r24	; 0x0f

		/* Check the state */
		if(pass_state == UNMATCHED_PASSWORD)
    1440:	8f 85       	ldd	r24, Y+15	; 0x0f
    1442:	80 35       	cpi	r24, 0x50	; 80
    1444:	81 f4       	brne	.+32     	; 0x1466 <Set_Password+0x94>
		{
			LCD_clearScreen();
    1446:	0e 94 e7 15 	call	0x2bce	; 0x2bce <LCD_clearScreen>
			LCD_displayStringRowColumn(0,0,"Unmatched Pass");
    144a:	2d e7       	ldi	r18, 0x7D	; 125
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	80 e0       	ldi	r24, 0x00	; 0
    1450:	60 e0       	ldi	r22, 0x00	; 0
    1452:	a9 01       	movw	r20, r18
    1454:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(0,1,"Try again!!");
    1458:	2c e8       	ldi	r18, 0x8C	; 140
    145a:	30 e0       	ldi	r19, 0x00	; 0
    145c:	80 e0       	ldi	r24, 0x00	; 0
    145e:	61 e0       	ldi	r22, 0x01	; 1
    1460:	a9 01       	movw	r20, r18
    1462:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <LCD_displayStringRowColumn>
void Set_Password(void)
{
	uint8 entered_password[PASSWORD_SIZE], reentered_password[PASSWORD_SIZE];
	uint8 pass_state = UNMATCHED_PASSWORD;

	while(pass_state != MATCHED_PASSWORD)
    1466:	8f 85       	ldd	r24, Y+15	; 0x0f
    1468:	85 30       	cpi	r24, 0x05	; 5
    146a:	09 f0       	breq	.+2      	; 0x146e <Set_Password+0x9c>
    146c:	bf cf       	rjmp	.-130    	; 0x13ec <Set_Password+0x1a>
			LCD_displayStringRowColumn(0,1,"Try again!!");

		}
	}

	LCD_clearScreen();
    146e:	0e 94 e7 15 	call	0x2bce	; 0x2bce <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"New Pass is Set!");
    1472:	28 e9       	ldi	r18, 0x98	; 152
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	80 e0       	ldi	r24, 0x00	; 0
    1478:	60 e0       	ldi	r22, 0x00	; 0
    147a:	a9 01       	movw	r20, r18
    147c:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <LCD_displayStringRowColumn>
    1480:	80 e0       	ldi	r24, 0x00	; 0
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	aa e7       	ldi	r26, 0x7A	; 122
    1486:	b4 e4       	ldi	r27, 0x44	; 68
    1488:	8b 87       	std	Y+11, r24	; 0x0b
    148a:	9c 87       	std	Y+12, r25	; 0x0c
    148c:	ad 87       	std	Y+13, r26	; 0x0d
    148e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1490:	6b 85       	ldd	r22, Y+11	; 0x0b
    1492:	7c 85       	ldd	r23, Y+12	; 0x0c
    1494:	8d 85       	ldd	r24, Y+13	; 0x0d
    1496:	9e 85       	ldd	r25, Y+14	; 0x0e
    1498:	20 e0       	ldi	r18, 0x00	; 0
    149a:	30 e0       	ldi	r19, 0x00	; 0
    149c:	4a ef       	ldi	r20, 0xFA	; 250
    149e:	54 e4       	ldi	r21, 0x44	; 68
    14a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14a4:	dc 01       	movw	r26, r24
    14a6:	cb 01       	movw	r24, r22
    14a8:	8f 83       	std	Y+7, r24	; 0x07
    14aa:	98 87       	std	Y+8, r25	; 0x08
    14ac:	a9 87       	std	Y+9, r26	; 0x09
    14ae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14b0:	6f 81       	ldd	r22, Y+7	; 0x07
    14b2:	78 85       	ldd	r23, Y+8	; 0x08
    14b4:	89 85       	ldd	r24, Y+9	; 0x09
    14b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    14b8:	20 e0       	ldi	r18, 0x00	; 0
    14ba:	30 e0       	ldi	r19, 0x00	; 0
    14bc:	40 e8       	ldi	r20, 0x80	; 128
    14be:	5f e3       	ldi	r21, 0x3F	; 63
    14c0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14c4:	88 23       	and	r24, r24
    14c6:	2c f4       	brge	.+10     	; 0x14d2 <Set_Password+0x100>
		__ticks = 1;
    14c8:	81 e0       	ldi	r24, 0x01	; 1
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	9e 83       	std	Y+6, r25	; 0x06
    14ce:	8d 83       	std	Y+5, r24	; 0x05
    14d0:	3f c0       	rjmp	.+126    	; 0x1550 <Set_Password+0x17e>
	else if (__tmp > 65535)
    14d2:	6f 81       	ldd	r22, Y+7	; 0x07
    14d4:	78 85       	ldd	r23, Y+8	; 0x08
    14d6:	89 85       	ldd	r24, Y+9	; 0x09
    14d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    14da:	20 e0       	ldi	r18, 0x00	; 0
    14dc:	3f ef       	ldi	r19, 0xFF	; 255
    14de:	4f e7       	ldi	r20, 0x7F	; 127
    14e0:	57 e4       	ldi	r21, 0x47	; 71
    14e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14e6:	18 16       	cp	r1, r24
    14e8:	4c f5       	brge	.+82     	; 0x153c <Set_Password+0x16a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    14ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    14ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    14f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    14f2:	20 e0       	ldi	r18, 0x00	; 0
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	40 e2       	ldi	r20, 0x20	; 32
    14f8:	51 e4       	ldi	r21, 0x41	; 65
    14fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14fe:	dc 01       	movw	r26, r24
    1500:	cb 01       	movw	r24, r22
    1502:	bc 01       	movw	r22, r24
    1504:	cd 01       	movw	r24, r26
    1506:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    150a:	dc 01       	movw	r26, r24
    150c:	cb 01       	movw	r24, r22
    150e:	9e 83       	std	Y+6, r25	; 0x06
    1510:	8d 83       	std	Y+5, r24	; 0x05
    1512:	0f c0       	rjmp	.+30     	; 0x1532 <Set_Password+0x160>
    1514:	88 ec       	ldi	r24, 0xC8	; 200
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	9c 83       	std	Y+4, r25	; 0x04
    151a:	8b 83       	std	Y+3, r24	; 0x03
    151c:	8b 81       	ldd	r24, Y+3	; 0x03
    151e:	9c 81       	ldd	r25, Y+4	; 0x04
    1520:	01 97       	sbiw	r24, 0x01	; 1
    1522:	f1 f7       	brne	.-4      	; 0x1520 <Set_Password+0x14e>
    1524:	9c 83       	std	Y+4, r25	; 0x04
    1526:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1528:	8d 81       	ldd	r24, Y+5	; 0x05
    152a:	9e 81       	ldd	r25, Y+6	; 0x06
    152c:	01 97       	sbiw	r24, 0x01	; 1
    152e:	9e 83       	std	Y+6, r25	; 0x06
    1530:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1532:	8d 81       	ldd	r24, Y+5	; 0x05
    1534:	9e 81       	ldd	r25, Y+6	; 0x06
    1536:	00 97       	sbiw	r24, 0x00	; 0
    1538:	69 f7       	brne	.-38     	; 0x1514 <Set_Password+0x142>
    153a:	14 c0       	rjmp	.+40     	; 0x1564 <Set_Password+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    153c:	6f 81       	ldd	r22, Y+7	; 0x07
    153e:	78 85       	ldd	r23, Y+8	; 0x08
    1540:	89 85       	ldd	r24, Y+9	; 0x09
    1542:	9a 85       	ldd	r25, Y+10	; 0x0a
    1544:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1548:	dc 01       	movw	r26, r24
    154a:	cb 01       	movw	r24, r22
    154c:	9e 83       	std	Y+6, r25	; 0x06
    154e:	8d 83       	std	Y+5, r24	; 0x05
    1550:	8d 81       	ldd	r24, Y+5	; 0x05
    1552:	9e 81       	ldd	r25, Y+6	; 0x06
    1554:	9a 83       	std	Y+2, r25	; 0x02
    1556:	89 83       	std	Y+1, r24	; 0x01
    1558:	89 81       	ldd	r24, Y+1	; 0x01
    155a:	9a 81       	ldd	r25, Y+2	; 0x02
    155c:	01 97       	sbiw	r24, 0x01	; 1
    155e:	f1 f7       	brne	.-4      	; 0x155c <Set_Password+0x18a>
    1560:	9a 83       	std	Y+2, r25	; 0x02
    1562:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	LCD_clearScreen();
    1564:	0e 94 e7 15 	call	0x2bce	; 0x2bce <LCD_clearScreen>
	/*If Password MATCHED display main menu one time before while*/
	Main_Options();
    1568:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <Main_Options>
}
    156c:	69 96       	adiw	r28, 0x19	; 25
    156e:	0f b6       	in	r0, 0x3f	; 63
    1570:	f8 94       	cli
    1572:	de bf       	out	0x3e, r29	; 62
    1574:	0f be       	out	0x3f, r0	; 63
    1576:	cd bf       	out	0x3d, r28	; 61
    1578:	cf 91       	pop	r28
    157a:	df 91       	pop	r29
    157c:	08 95       	ret

0000157e <Send_Password>:

void Send_Password(uint8 *password, uint8 password_size)
{
    157e:	df 93       	push	r29
    1580:	cf 93       	push	r28
    1582:	cd b7       	in	r28, 0x3d	; 61
    1584:	de b7       	in	r29, 0x3e	; 62
    1586:	62 97       	sbiw	r28, 0x12	; 18
    1588:	0f b6       	in	r0, 0x3f	; 63
    158a:	f8 94       	cli
    158c:	de bf       	out	0x3e, r29	; 62
    158e:	0f be       	out	0x3f, r0	; 63
    1590:	cd bf       	out	0x3d, r28	; 61
    1592:	99 8b       	std	Y+17, r25	; 0x11
    1594:	88 8b       	std	Y+16, r24	; 0x10
    1596:	6a 8b       	std	Y+18, r22	; 0x12
	uint8 counter = 0;
    1598:	1f 86       	std	Y+15, r1	; 0x0f

	for(counter = 0 ; counter < password_size ; counter++)
    159a:	1f 86       	std	Y+15, r1	; 0x0f
    159c:	80 c0       	rjmp	.+256    	; 0x169e <Send_Password+0x120>
	{
		UART_sendByte(password[counter]);
    159e:	8f 85       	ldd	r24, Y+15	; 0x0f
    15a0:	28 2f       	mov	r18, r24
    15a2:	30 e0       	ldi	r19, 0x00	; 0
    15a4:	88 89       	ldd	r24, Y+16	; 0x10
    15a6:	99 89       	ldd	r25, Y+17	; 0x11
    15a8:	fc 01       	movw	r30, r24
    15aa:	e2 0f       	add	r30, r18
    15ac:	f3 1f       	adc	r31, r19
    15ae:	80 81       	ld	r24, Z
    15b0:	0e 94 80 17 	call	0x2f00	; 0x2f00 <UART_sendByte>
    15b4:	80 e0       	ldi	r24, 0x00	; 0
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	a8 e4       	ldi	r26, 0x48	; 72
    15ba:	b2 e4       	ldi	r27, 0x42	; 66
    15bc:	8b 87       	std	Y+11, r24	; 0x0b
    15be:	9c 87       	std	Y+12, r25	; 0x0c
    15c0:	ad 87       	std	Y+13, r26	; 0x0d
    15c2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    15c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    15c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    15ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    15cc:	20 e0       	ldi	r18, 0x00	; 0
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	4a ef       	ldi	r20, 0xFA	; 250
    15d2:	54 e4       	ldi	r21, 0x44	; 68
    15d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15d8:	dc 01       	movw	r26, r24
    15da:	cb 01       	movw	r24, r22
    15dc:	8f 83       	std	Y+7, r24	; 0x07
    15de:	98 87       	std	Y+8, r25	; 0x08
    15e0:	a9 87       	std	Y+9, r26	; 0x09
    15e2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    15e4:	6f 81       	ldd	r22, Y+7	; 0x07
    15e6:	78 85       	ldd	r23, Y+8	; 0x08
    15e8:	89 85       	ldd	r24, Y+9	; 0x09
    15ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    15ec:	20 e0       	ldi	r18, 0x00	; 0
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	40 e8       	ldi	r20, 0x80	; 128
    15f2:	5f e3       	ldi	r21, 0x3F	; 63
    15f4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15f8:	88 23       	and	r24, r24
    15fa:	2c f4       	brge	.+10     	; 0x1606 <Send_Password+0x88>
		__ticks = 1;
    15fc:	81 e0       	ldi	r24, 0x01	; 1
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	9e 83       	std	Y+6, r25	; 0x06
    1602:	8d 83       	std	Y+5, r24	; 0x05
    1604:	3f c0       	rjmp	.+126    	; 0x1684 <Send_Password+0x106>
	else if (__tmp > 65535)
    1606:	6f 81       	ldd	r22, Y+7	; 0x07
    1608:	78 85       	ldd	r23, Y+8	; 0x08
    160a:	89 85       	ldd	r24, Y+9	; 0x09
    160c:	9a 85       	ldd	r25, Y+10	; 0x0a
    160e:	20 e0       	ldi	r18, 0x00	; 0
    1610:	3f ef       	ldi	r19, 0xFF	; 255
    1612:	4f e7       	ldi	r20, 0x7F	; 127
    1614:	57 e4       	ldi	r21, 0x47	; 71
    1616:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    161a:	18 16       	cp	r1, r24
    161c:	4c f5       	brge	.+82     	; 0x1670 <Send_Password+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    161e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1620:	7c 85       	ldd	r23, Y+12	; 0x0c
    1622:	8d 85       	ldd	r24, Y+13	; 0x0d
    1624:	9e 85       	ldd	r25, Y+14	; 0x0e
    1626:	20 e0       	ldi	r18, 0x00	; 0
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	40 e2       	ldi	r20, 0x20	; 32
    162c:	51 e4       	ldi	r21, 0x41	; 65
    162e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1632:	dc 01       	movw	r26, r24
    1634:	cb 01       	movw	r24, r22
    1636:	bc 01       	movw	r22, r24
    1638:	cd 01       	movw	r24, r26
    163a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    163e:	dc 01       	movw	r26, r24
    1640:	cb 01       	movw	r24, r22
    1642:	9e 83       	std	Y+6, r25	; 0x06
    1644:	8d 83       	std	Y+5, r24	; 0x05
    1646:	0f c0       	rjmp	.+30     	; 0x1666 <Send_Password+0xe8>
    1648:	88 ec       	ldi	r24, 0xC8	; 200
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	9c 83       	std	Y+4, r25	; 0x04
    164e:	8b 83       	std	Y+3, r24	; 0x03
    1650:	8b 81       	ldd	r24, Y+3	; 0x03
    1652:	9c 81       	ldd	r25, Y+4	; 0x04
    1654:	01 97       	sbiw	r24, 0x01	; 1
    1656:	f1 f7       	brne	.-4      	; 0x1654 <Send_Password+0xd6>
    1658:	9c 83       	std	Y+4, r25	; 0x04
    165a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    165c:	8d 81       	ldd	r24, Y+5	; 0x05
    165e:	9e 81       	ldd	r25, Y+6	; 0x06
    1660:	01 97       	sbiw	r24, 0x01	; 1
    1662:	9e 83       	std	Y+6, r25	; 0x06
    1664:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1666:	8d 81       	ldd	r24, Y+5	; 0x05
    1668:	9e 81       	ldd	r25, Y+6	; 0x06
    166a:	00 97       	sbiw	r24, 0x00	; 0
    166c:	69 f7       	brne	.-38     	; 0x1648 <Send_Password+0xca>
    166e:	14 c0       	rjmp	.+40     	; 0x1698 <Send_Password+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1670:	6f 81       	ldd	r22, Y+7	; 0x07
    1672:	78 85       	ldd	r23, Y+8	; 0x08
    1674:	89 85       	ldd	r24, Y+9	; 0x09
    1676:	9a 85       	ldd	r25, Y+10	; 0x0a
    1678:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    167c:	dc 01       	movw	r26, r24
    167e:	cb 01       	movw	r24, r22
    1680:	9e 83       	std	Y+6, r25	; 0x06
    1682:	8d 83       	std	Y+5, r24	; 0x05
    1684:	8d 81       	ldd	r24, Y+5	; 0x05
    1686:	9e 81       	ldd	r25, Y+6	; 0x06
    1688:	9a 83       	std	Y+2, r25	; 0x02
    168a:	89 83       	std	Y+1, r24	; 0x01
    168c:	89 81       	ldd	r24, Y+1	; 0x01
    168e:	9a 81       	ldd	r25, Y+2	; 0x02
    1690:	01 97       	sbiw	r24, 0x01	; 1
    1692:	f1 f7       	brne	.-4      	; 0x1690 <Send_Password+0x112>
    1694:	9a 83       	std	Y+2, r25	; 0x02
    1696:	89 83       	std	Y+1, r24	; 0x01

void Send_Password(uint8 *password, uint8 password_size)
{
	uint8 counter = 0;

	for(counter = 0 ; counter < password_size ; counter++)
    1698:	8f 85       	ldd	r24, Y+15	; 0x0f
    169a:	8f 5f       	subi	r24, 0xFF	; 255
    169c:	8f 87       	std	Y+15, r24	; 0x0f
    169e:	9f 85       	ldd	r25, Y+15	; 0x0f
    16a0:	8a 89       	ldd	r24, Y+18	; 0x12
    16a2:	98 17       	cp	r25, r24
    16a4:	08 f4       	brcc	.+2      	; 0x16a8 <Send_Password+0x12a>
    16a6:	7b cf       	rjmp	.-266    	; 0x159e <Send_Password+0x20>
	{
		UART_sendByte(password[counter]);
		_delay_ms(50);
	}
}
    16a8:	62 96       	adiw	r28, 0x12	; 18
    16aa:	0f b6       	in	r0, 0x3f	; 63
    16ac:	f8 94       	cli
    16ae:	de bf       	out	0x3e, r29	; 62
    16b0:	0f be       	out	0x3f, r0	; 63
    16b2:	cd bf       	out	0x3d, r28	; 61
    16b4:	cf 91       	pop	r28
    16b6:	df 91       	pop	r29
    16b8:	08 95       	ret

000016ba <Enter_passMessage>:

void Enter_passMessage(void){
    16ba:	df 93       	push	r29
    16bc:	cf 93       	push	r28
    16be:	cd b7       	in	r28, 0x3d	; 61
    16c0:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    16c2:	0e 94 e7 15 	call	0x2bce	; 0x2bce <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"PLZ Enter Pass:");
    16c6:	29 ea       	ldi	r18, 0xA9	; 169
    16c8:	30 e0       	ldi	r19, 0x00	; 0
    16ca:	80 e0       	ldi	r24, 0x00	; 0
    16cc:	60 e0       	ldi	r22, 0x00	; 0
    16ce:	a9 01       	movw	r20, r18
    16d0:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <LCD_displayStringRowColumn>
	LCD_moveCursor(1,0);
    16d4:	81 e0       	ldi	r24, 0x01	; 1
    16d6:	60 e0       	ldi	r22, 0x00	; 0
    16d8:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <LCD_moveCursor>
}
    16dc:	cf 91       	pop	r28
    16de:	df 91       	pop	r29
    16e0:	08 95       	ret

000016e2 <ReEnter_passMessage>:

void ReEnter_passMessage(void)
{
    16e2:	df 93       	push	r29
    16e4:	cf 93       	push	r28
    16e6:	cd b7       	in	r28, 0x3d	; 61
    16e8:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    16ea:	0e 94 e7 15 	call	0x2bce	; 0x2bce <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"PLZ re-enter the ");
    16ee:	29 eb       	ldi	r18, 0xB9	; 185
    16f0:	30 e0       	ldi	r19, 0x00	; 0
    16f2:	80 e0       	ldi	r24, 0x00	; 0
    16f4:	60 e0       	ldi	r22, 0x00	; 0
    16f6:	a9 01       	movw	r20, r18
    16f8:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,0,"same pass:");
    16fc:	2b ec       	ldi	r18, 0xCB	; 203
    16fe:	30 e0       	ldi	r19, 0x00	; 0
    1700:	81 e0       	ldi	r24, 0x01	; 1
    1702:	60 e0       	ldi	r22, 0x00	; 0
    1704:	a9 01       	movw	r20, r18
    1706:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <LCD_displayStringRowColumn>
}
    170a:	cf 91       	pop	r28
    170c:	df 91       	pop	r29
    170e:	08 95       	ret

00001710 <Open_Door>:

void Open_Door(void)
{
    1710:	df 93       	push	r29
    1712:	cf 93       	push	r28
    1714:	cd b7       	in	r28, 0x3d	; 61
    1716:	de b7       	in	r29, 0x3e	; 62
    1718:	60 97       	sbiw	r28, 0x10	; 16
    171a:	0f b6       	in	r0, 0x3f	; 63
    171c:	f8 94       	cli
    171e:	de bf       	out	0x3e, r29	; 62
    1720:	0f be       	out	0x3f, r0	; 63
    1722:	cd bf       	out	0x3d, r28	; 61
	uint8 pass_state = UNMATCHED_PASSWORD;
    1724:	80 e5       	ldi	r24, 0x50	; 80
    1726:	88 8b       	std	Y+16, r24	; 0x10
	uint8 received_byte = 0;
    1728:	1f 86       	std	Y+15, r1	; 0x0f
    172a:	a6 c0       	rjmp	.+332    	; 0x1878 <Open_Door+0x168>

	while(pass_state != MATCHED_PASSWORD)
	{
		/* Display message to ask user to enter the old password */
		Enter_passMessage();
    172c:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <Enter_passMessage>

		/* Get the entered password */
		Get_Password(Current_Password,PASSWORD_SIZE);
    1730:	86 e7       	ldi	r24, 0x76	; 118
    1732:	91 e0       	ldi	r25, 0x01	; 1
    1734:	65 e0       	ldi	r22, 0x05	; 5
    1736:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <Get_Password>

		/* Send a verification pattern to the CONTROL_ECU */
		UART_sendByte(OPEN_DOOR);
    173a:	8b e2       	ldi	r24, 0x2B	; 43
    173c:	0e 94 80 17 	call	0x2f00	; 0x2f00 <UART_sendByte>

		/* Wait for confirmation from the CONTROL_ECU */
		while(UART_recieveByte() != CONTROL_ECU_READY);
    1740:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <UART_recieveByte>
    1744:	80 32       	cpi	r24, 0x20	; 32
    1746:	e1 f7       	brne	.-8      	; 0x1740 <Open_Door+0x30>

		/* Send the first entered password to the CONTROL_ECU */
		Send_Password(Current_Password,PASSWORD_SIZE);
    1748:	86 e7       	ldi	r24, 0x76	; 118
    174a:	91 e0       	ldi	r25, 0x01	; 1
    174c:	65 e0       	ldi	r22, 0x05	; 5
    174e:	0e 94 bf 0a 	call	0x157e	; 0x157e <Send_Password>

		/* Read the matching state of the passwords */
		received_byte = UART_recieveByte();
    1752:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <UART_recieveByte>
    1756:	8f 87       	std	Y+15, r24	; 0x0f

		/* Check the state */
		if(received_byte == MATCHED_PASSWORD)
    1758:	8f 85       	ldd	r24, Y+15	; 0x0f
    175a:	85 30       	cpi	r24, 0x05	; 5
    175c:	29 f4       	brne	.+10     	; 0x1768 <Open_Door+0x58>
		{
			/* Open the door */
			Motor_Fun();
    175e:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <Motor_Fun>
			pass_state = MATCHED_PASSWORD;
    1762:	85 e0       	ldi	r24, 0x05	; 5
    1764:	88 8b       	std	Y+16, r24	; 0x10
    1766:	8c c0       	rjmp	.+280    	; 0x1880 <Open_Door+0x170>
			break;
		}
		else if(received_byte == UNMATCHED_PASSWORD)
    1768:	8f 85       	ldd	r24, Y+15	; 0x0f
    176a:	80 35       	cpi	r24, 0x50	; 80
    176c:	09 f0       	breq	.+2      	; 0x1770 <Open_Door+0x60>
    176e:	7e c0       	rjmp	.+252    	; 0x186c <Open_Door+0x15c>
		{
			pass_state = UNMATCHED_PASSWORD;
    1770:	80 e5       	ldi	r24, 0x50	; 80
    1772:	88 8b       	std	Y+16, r24	; 0x10
			LCD_clearScreen();
    1774:	0e 94 e7 15 	call	0x2bce	; 0x2bce <LCD_clearScreen>
			LCD_displayStringRowColumn(0,1,"WRONG PASS!!");
    1778:	26 ed       	ldi	r18, 0xD6	; 214
    177a:	30 e0       	ldi	r19, 0x00	; 0
    177c:	80 e0       	ldi	r24, 0x00	; 0
    177e:	61 e0       	ldi	r22, 0x01	; 1
    1780:	a9 01       	movw	r20, r18
    1782:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <LCD_displayStringRowColumn>
    1786:	80 e0       	ldi	r24, 0x00	; 0
    1788:	90 e8       	ldi	r25, 0x80	; 128
    178a:	ab eb       	ldi	r26, 0xBB	; 187
    178c:	b4 e4       	ldi	r27, 0x44	; 68
    178e:	8b 87       	std	Y+11, r24	; 0x0b
    1790:	9c 87       	std	Y+12, r25	; 0x0c
    1792:	ad 87       	std	Y+13, r26	; 0x0d
    1794:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1796:	6b 85       	ldd	r22, Y+11	; 0x0b
    1798:	7c 85       	ldd	r23, Y+12	; 0x0c
    179a:	8d 85       	ldd	r24, Y+13	; 0x0d
    179c:	9e 85       	ldd	r25, Y+14	; 0x0e
    179e:	20 e0       	ldi	r18, 0x00	; 0
    17a0:	30 e0       	ldi	r19, 0x00	; 0
    17a2:	4a ef       	ldi	r20, 0xFA	; 250
    17a4:	54 e4       	ldi	r21, 0x44	; 68
    17a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17aa:	dc 01       	movw	r26, r24
    17ac:	cb 01       	movw	r24, r22
    17ae:	8f 83       	std	Y+7, r24	; 0x07
    17b0:	98 87       	std	Y+8, r25	; 0x08
    17b2:	a9 87       	std	Y+9, r26	; 0x09
    17b4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17b6:	6f 81       	ldd	r22, Y+7	; 0x07
    17b8:	78 85       	ldd	r23, Y+8	; 0x08
    17ba:	89 85       	ldd	r24, Y+9	; 0x09
    17bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    17be:	20 e0       	ldi	r18, 0x00	; 0
    17c0:	30 e0       	ldi	r19, 0x00	; 0
    17c2:	40 e8       	ldi	r20, 0x80	; 128
    17c4:	5f e3       	ldi	r21, 0x3F	; 63
    17c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17ca:	88 23       	and	r24, r24
    17cc:	2c f4       	brge	.+10     	; 0x17d8 <Open_Door+0xc8>
		__ticks = 1;
    17ce:	81 e0       	ldi	r24, 0x01	; 1
    17d0:	90 e0       	ldi	r25, 0x00	; 0
    17d2:	9e 83       	std	Y+6, r25	; 0x06
    17d4:	8d 83       	std	Y+5, r24	; 0x05
    17d6:	3f c0       	rjmp	.+126    	; 0x1856 <Open_Door+0x146>
	else if (__tmp > 65535)
    17d8:	6f 81       	ldd	r22, Y+7	; 0x07
    17da:	78 85       	ldd	r23, Y+8	; 0x08
    17dc:	89 85       	ldd	r24, Y+9	; 0x09
    17de:	9a 85       	ldd	r25, Y+10	; 0x0a
    17e0:	20 e0       	ldi	r18, 0x00	; 0
    17e2:	3f ef       	ldi	r19, 0xFF	; 255
    17e4:	4f e7       	ldi	r20, 0x7F	; 127
    17e6:	57 e4       	ldi	r21, 0x47	; 71
    17e8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17ec:	18 16       	cp	r1, r24
    17ee:	4c f5       	brge	.+82     	; 0x1842 <Open_Door+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    17f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    17f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    17f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    17f8:	20 e0       	ldi	r18, 0x00	; 0
    17fa:	30 e0       	ldi	r19, 0x00	; 0
    17fc:	40 e2       	ldi	r20, 0x20	; 32
    17fe:	51 e4       	ldi	r21, 0x41	; 65
    1800:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1804:	dc 01       	movw	r26, r24
    1806:	cb 01       	movw	r24, r22
    1808:	bc 01       	movw	r22, r24
    180a:	cd 01       	movw	r24, r26
    180c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1810:	dc 01       	movw	r26, r24
    1812:	cb 01       	movw	r24, r22
    1814:	9e 83       	std	Y+6, r25	; 0x06
    1816:	8d 83       	std	Y+5, r24	; 0x05
    1818:	0f c0       	rjmp	.+30     	; 0x1838 <Open_Door+0x128>
    181a:	88 ec       	ldi	r24, 0xC8	; 200
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	9c 83       	std	Y+4, r25	; 0x04
    1820:	8b 83       	std	Y+3, r24	; 0x03
    1822:	8b 81       	ldd	r24, Y+3	; 0x03
    1824:	9c 81       	ldd	r25, Y+4	; 0x04
    1826:	01 97       	sbiw	r24, 0x01	; 1
    1828:	f1 f7       	brne	.-4      	; 0x1826 <Open_Door+0x116>
    182a:	9c 83       	std	Y+4, r25	; 0x04
    182c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    182e:	8d 81       	ldd	r24, Y+5	; 0x05
    1830:	9e 81       	ldd	r25, Y+6	; 0x06
    1832:	01 97       	sbiw	r24, 0x01	; 1
    1834:	9e 83       	std	Y+6, r25	; 0x06
    1836:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1838:	8d 81       	ldd	r24, Y+5	; 0x05
    183a:	9e 81       	ldd	r25, Y+6	; 0x06
    183c:	00 97       	sbiw	r24, 0x00	; 0
    183e:	69 f7       	brne	.-38     	; 0x181a <Open_Door+0x10a>
    1840:	1b c0       	rjmp	.+54     	; 0x1878 <Open_Door+0x168>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1842:	6f 81       	ldd	r22, Y+7	; 0x07
    1844:	78 85       	ldd	r23, Y+8	; 0x08
    1846:	89 85       	ldd	r24, Y+9	; 0x09
    1848:	9a 85       	ldd	r25, Y+10	; 0x0a
    184a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    184e:	dc 01       	movw	r26, r24
    1850:	cb 01       	movw	r24, r22
    1852:	9e 83       	std	Y+6, r25	; 0x06
    1854:	8d 83       	std	Y+5, r24	; 0x05
    1856:	8d 81       	ldd	r24, Y+5	; 0x05
    1858:	9e 81       	ldd	r25, Y+6	; 0x06
    185a:	9a 83       	std	Y+2, r25	; 0x02
    185c:	89 83       	std	Y+1, r24	; 0x01
    185e:	89 81       	ldd	r24, Y+1	; 0x01
    1860:	9a 81       	ldd	r25, Y+2	; 0x02
    1862:	01 97       	sbiw	r24, 0x01	; 1
    1864:	f1 f7       	brne	.-4      	; 0x1862 <Open_Door+0x152>
    1866:	9a 83       	std	Y+2, r25	; 0x02
    1868:	89 83       	std	Y+1, r24	; 0x01
    186a:	06 c0       	rjmp	.+12     	; 0x1878 <Open_Door+0x168>
			_delay_ms(1500);
		}
		else if(received_byte  == WARNING){
    186c:	8f 85       	ldd	r24, Y+15	; 0x0f
    186e:	8c 33       	cpi	r24, 0x3C	; 60
    1870:	19 f4       	brne	.+6      	; 0x1878 <Open_Door+0x168>
			Warning_Message();
    1872:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <Warning_Message>
    1876:	04 c0       	rjmp	.+8      	; 0x1880 <Open_Door+0x170>
void Open_Door(void)
{
	uint8 pass_state = UNMATCHED_PASSWORD;
	uint8 received_byte = 0;

	while(pass_state != MATCHED_PASSWORD)
    1878:	88 89       	ldd	r24, Y+16	; 0x10
    187a:	85 30       	cpi	r24, 0x05	; 5
    187c:	09 f0       	breq	.+2      	; 0x1880 <Open_Door+0x170>
    187e:	56 cf       	rjmp	.-340    	; 0x172c <Open_Door+0x1c>
		else if(received_byte  == WARNING){
			Warning_Message();
			break;
		}
	}
}
    1880:	60 96       	adiw	r28, 0x10	; 16
    1882:	0f b6       	in	r0, 0x3f	; 63
    1884:	f8 94       	cli
    1886:	de bf       	out	0x3e, r29	; 62
    1888:	0f be       	out	0x3f, r0	; 63
    188a:	cd bf       	out	0x3d, r28	; 61
    188c:	cf 91       	pop	r28
    188e:	df 91       	pop	r29
    1890:	08 95       	ret

00001892 <Change_Password>:

void Change_Password(void)
{
    1892:	df 93       	push	r29
    1894:	cf 93       	push	r28
    1896:	cd b7       	in	r28, 0x3d	; 61
    1898:	de b7       	in	r29, 0x3e	; 62
    189a:	60 97       	sbiw	r28, 0x10	; 16
    189c:	0f b6       	in	r0, 0x3f	; 63
    189e:	f8 94       	cli
    18a0:	de bf       	out	0x3e, r29	; 62
    18a2:	0f be       	out	0x3f, r0	; 63
    18a4:	cd bf       	out	0x3d, r28	; 61
	uint8 pass_state = UNMATCHED_PASSWORD;
    18a6:	80 e5       	ldi	r24, 0x50	; 80
    18a8:	88 8b       	std	Y+16, r24	; 0x10
	uint8 received_byte = 0;
    18aa:	1f 86       	std	Y+15, r1	; 0x0f
    18ac:	a4 c0       	rjmp	.+328    	; 0x19f6 <Change_Password+0x164>

	while(pass_state != MATCHED_PASSWORD)
	{
		/* Display message to ask user to enter the old password */
		Change_passMessage();
    18ae:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <Change_passMessage>

		/* Get the entered password */
		Get_Password(Current_Password,PASSWORD_SIZE);
    18b2:	86 e7       	ldi	r24, 0x76	; 118
    18b4:	91 e0       	ldi	r25, 0x01	; 1
    18b6:	65 e0       	ldi	r22, 0x05	; 5
    18b8:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <Get_Password>

		/* Send a verification pattern to the CONTROL_ECU */
		UART_sendByte(CHANGE_PASS);
    18bc:	8d e2       	ldi	r24, 0x2D	; 45
    18be:	0e 94 80 17 	call	0x2f00	; 0x2f00 <UART_sendByte>

		/* Wait for confirmation from the CONTROL_ECU */
		while(UART_recieveByte() != CONTROL_ECU_READY);
    18c2:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <UART_recieveByte>
    18c6:	80 32       	cpi	r24, 0x20	; 32
    18c8:	e1 f7       	brne	.-8      	; 0x18c2 <Change_Password+0x30>

		/* Send the first entered password to the CONTROL_ECU */
		Send_Password(Current_Password,PASSWORD_SIZE);
    18ca:	86 e7       	ldi	r24, 0x76	; 118
    18cc:	91 e0       	ldi	r25, 0x01	; 1
    18ce:	65 e0       	ldi	r22, 0x05	; 5
    18d0:	0e 94 bf 0a 	call	0x157e	; 0x157e <Send_Password>

		/* Read the matching state of the passwords */
		received_byte = UART_recieveByte();
    18d4:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <UART_recieveByte>
    18d8:	8f 87       	std	Y+15, r24	; 0x0f

		/* Check the state */
		if(received_byte == MATCHED_PASSWORD)
    18da:	8f 85       	ldd	r24, Y+15	; 0x0f
    18dc:	85 30       	cpi	r24, 0x05	; 5
    18de:	19 f4       	brne	.+6      	; 0x18e6 <Change_Password+0x54>
		{
			/* Set the new Password */
			Set_Password();
    18e0:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <Set_Password>
    18e4:	8c c0       	rjmp	.+280    	; 0x19fe <Change_Password+0x16c>
			break;
		}
		else if(received_byte == UNMATCHED_PASSWORD)
    18e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    18e8:	80 35       	cpi	r24, 0x50	; 80
    18ea:	09 f0       	breq	.+2      	; 0x18ee <Change_Password+0x5c>
    18ec:	7e c0       	rjmp	.+252    	; 0x19ea <Change_Password+0x158>
		{
			pass_state = UNMATCHED_PASSWORD;
    18ee:	80 e5       	ldi	r24, 0x50	; 80
    18f0:	88 8b       	std	Y+16, r24	; 0x10
			LCD_clearScreen();
    18f2:	0e 94 e7 15 	call	0x2bce	; 0x2bce <LCD_clearScreen>
			LCD_displayStringRowColumn(0,1,"WRONG PASS!!");
    18f6:	26 ed       	ldi	r18, 0xD6	; 214
    18f8:	30 e0       	ldi	r19, 0x00	; 0
    18fa:	80 e0       	ldi	r24, 0x00	; 0
    18fc:	61 e0       	ldi	r22, 0x01	; 1
    18fe:	a9 01       	movw	r20, r18
    1900:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <LCD_displayStringRowColumn>
    1904:	80 e0       	ldi	r24, 0x00	; 0
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	aa ef       	ldi	r26, 0xFA	; 250
    190a:	b4 e4       	ldi	r27, 0x44	; 68
    190c:	8b 87       	std	Y+11, r24	; 0x0b
    190e:	9c 87       	std	Y+12, r25	; 0x0c
    1910:	ad 87       	std	Y+13, r26	; 0x0d
    1912:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1914:	6b 85       	ldd	r22, Y+11	; 0x0b
    1916:	7c 85       	ldd	r23, Y+12	; 0x0c
    1918:	8d 85       	ldd	r24, Y+13	; 0x0d
    191a:	9e 85       	ldd	r25, Y+14	; 0x0e
    191c:	20 e0       	ldi	r18, 0x00	; 0
    191e:	30 e0       	ldi	r19, 0x00	; 0
    1920:	4a ef       	ldi	r20, 0xFA	; 250
    1922:	54 e4       	ldi	r21, 0x44	; 68
    1924:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1928:	dc 01       	movw	r26, r24
    192a:	cb 01       	movw	r24, r22
    192c:	8f 83       	std	Y+7, r24	; 0x07
    192e:	98 87       	std	Y+8, r25	; 0x08
    1930:	a9 87       	std	Y+9, r26	; 0x09
    1932:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1934:	6f 81       	ldd	r22, Y+7	; 0x07
    1936:	78 85       	ldd	r23, Y+8	; 0x08
    1938:	89 85       	ldd	r24, Y+9	; 0x09
    193a:	9a 85       	ldd	r25, Y+10	; 0x0a
    193c:	20 e0       	ldi	r18, 0x00	; 0
    193e:	30 e0       	ldi	r19, 0x00	; 0
    1940:	40 e8       	ldi	r20, 0x80	; 128
    1942:	5f e3       	ldi	r21, 0x3F	; 63
    1944:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1948:	88 23       	and	r24, r24
    194a:	2c f4       	brge	.+10     	; 0x1956 <Change_Password+0xc4>
		__ticks = 1;
    194c:	81 e0       	ldi	r24, 0x01	; 1
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	9e 83       	std	Y+6, r25	; 0x06
    1952:	8d 83       	std	Y+5, r24	; 0x05
    1954:	3f c0       	rjmp	.+126    	; 0x19d4 <Change_Password+0x142>
	else if (__tmp > 65535)
    1956:	6f 81       	ldd	r22, Y+7	; 0x07
    1958:	78 85       	ldd	r23, Y+8	; 0x08
    195a:	89 85       	ldd	r24, Y+9	; 0x09
    195c:	9a 85       	ldd	r25, Y+10	; 0x0a
    195e:	20 e0       	ldi	r18, 0x00	; 0
    1960:	3f ef       	ldi	r19, 0xFF	; 255
    1962:	4f e7       	ldi	r20, 0x7F	; 127
    1964:	57 e4       	ldi	r21, 0x47	; 71
    1966:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    196a:	18 16       	cp	r1, r24
    196c:	4c f5       	brge	.+82     	; 0x19c0 <Change_Password+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    196e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1970:	7c 85       	ldd	r23, Y+12	; 0x0c
    1972:	8d 85       	ldd	r24, Y+13	; 0x0d
    1974:	9e 85       	ldd	r25, Y+14	; 0x0e
    1976:	20 e0       	ldi	r18, 0x00	; 0
    1978:	30 e0       	ldi	r19, 0x00	; 0
    197a:	40 e2       	ldi	r20, 0x20	; 32
    197c:	51 e4       	ldi	r21, 0x41	; 65
    197e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1982:	dc 01       	movw	r26, r24
    1984:	cb 01       	movw	r24, r22
    1986:	bc 01       	movw	r22, r24
    1988:	cd 01       	movw	r24, r26
    198a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    198e:	dc 01       	movw	r26, r24
    1990:	cb 01       	movw	r24, r22
    1992:	9e 83       	std	Y+6, r25	; 0x06
    1994:	8d 83       	std	Y+5, r24	; 0x05
    1996:	0f c0       	rjmp	.+30     	; 0x19b6 <Change_Password+0x124>
    1998:	88 ec       	ldi	r24, 0xC8	; 200
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	9c 83       	std	Y+4, r25	; 0x04
    199e:	8b 83       	std	Y+3, r24	; 0x03
    19a0:	8b 81       	ldd	r24, Y+3	; 0x03
    19a2:	9c 81       	ldd	r25, Y+4	; 0x04
    19a4:	01 97       	sbiw	r24, 0x01	; 1
    19a6:	f1 f7       	brne	.-4      	; 0x19a4 <Change_Password+0x112>
    19a8:	9c 83       	std	Y+4, r25	; 0x04
    19aa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19ac:	8d 81       	ldd	r24, Y+5	; 0x05
    19ae:	9e 81       	ldd	r25, Y+6	; 0x06
    19b0:	01 97       	sbiw	r24, 0x01	; 1
    19b2:	9e 83       	std	Y+6, r25	; 0x06
    19b4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19b6:	8d 81       	ldd	r24, Y+5	; 0x05
    19b8:	9e 81       	ldd	r25, Y+6	; 0x06
    19ba:	00 97       	sbiw	r24, 0x00	; 0
    19bc:	69 f7       	brne	.-38     	; 0x1998 <Change_Password+0x106>
    19be:	1b c0       	rjmp	.+54     	; 0x19f6 <Change_Password+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19c0:	6f 81       	ldd	r22, Y+7	; 0x07
    19c2:	78 85       	ldd	r23, Y+8	; 0x08
    19c4:	89 85       	ldd	r24, Y+9	; 0x09
    19c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    19c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19cc:	dc 01       	movw	r26, r24
    19ce:	cb 01       	movw	r24, r22
    19d0:	9e 83       	std	Y+6, r25	; 0x06
    19d2:	8d 83       	std	Y+5, r24	; 0x05
    19d4:	8d 81       	ldd	r24, Y+5	; 0x05
    19d6:	9e 81       	ldd	r25, Y+6	; 0x06
    19d8:	9a 83       	std	Y+2, r25	; 0x02
    19da:	89 83       	std	Y+1, r24	; 0x01
    19dc:	89 81       	ldd	r24, Y+1	; 0x01
    19de:	9a 81       	ldd	r25, Y+2	; 0x02
    19e0:	01 97       	sbiw	r24, 0x01	; 1
    19e2:	f1 f7       	brne	.-4      	; 0x19e0 <Change_Password+0x14e>
    19e4:	9a 83       	std	Y+2, r25	; 0x02
    19e6:	89 83       	std	Y+1, r24	; 0x01
    19e8:	06 c0       	rjmp	.+12     	; 0x19f6 <Change_Password+0x164>
			_delay_ms(2000);
		}
		else if(received_byte  == WARNING){
    19ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    19ec:	8c 33       	cpi	r24, 0x3C	; 60
    19ee:	19 f4       	brne	.+6      	; 0x19f6 <Change_Password+0x164>
			Warning_Message();
    19f0:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <Warning_Message>
    19f4:	04 c0       	rjmp	.+8      	; 0x19fe <Change_Password+0x16c>
void Change_Password(void)
{
	uint8 pass_state = UNMATCHED_PASSWORD;
	uint8 received_byte = 0;

	while(pass_state != MATCHED_PASSWORD)
    19f6:	88 89       	ldd	r24, Y+16	; 0x10
    19f8:	85 30       	cpi	r24, 0x05	; 5
    19fa:	09 f0       	breq	.+2      	; 0x19fe <Change_Password+0x16c>
    19fc:	58 cf       	rjmp	.-336    	; 0x18ae <Change_Password+0x1c>
			Warning_Message();
			break;
		}
	}

}
    19fe:	60 96       	adiw	r28, 0x10	; 16
    1a00:	0f b6       	in	r0, 0x3f	; 63
    1a02:	f8 94       	cli
    1a04:	de bf       	out	0x3e, r29	; 62
    1a06:	0f be       	out	0x3f, r0	; 63
    1a08:	cd bf       	out	0x3d, r28	; 61
    1a0a:	cf 91       	pop	r28
    1a0c:	df 91       	pop	r29
    1a0e:	08 95       	ret

00001a10 <Get_Password>:

void Get_Password(uint8 *password,uint8 pass_size)
{
    1a10:	df 93       	push	r29
    1a12:	cf 93       	push	r28
    1a14:	cd b7       	in	r28, 0x3d	; 61
    1a16:	de b7       	in	r29, 0x3e	; 62
    1a18:	a1 97       	sbiw	r28, 0x21	; 33
    1a1a:	0f b6       	in	r0, 0x3f	; 63
    1a1c:	f8 94       	cli
    1a1e:	de bf       	out	0x3e, r29	; 62
    1a20:	0f be       	out	0x3f, r0	; 63
    1a22:	cd bf       	out	0x3d, r28	; 61
    1a24:	98 a3       	std	Y+32, r25	; 0x20
    1a26:	8f 8f       	std	Y+31, r24	; 0x1f
    1a28:	69 a3       	std	Y+33, r22	; 0x21
	uint8 key;
	uint8 i =0;
    1a2a:	1d 8e       	std	Y+29, r1	; 0x1d

	for(i=0 ; i<pass_size ; i++){
    1a2c:	1d 8e       	std	Y+29, r1	; 0x1d
    1a2e:	f7 c0       	rjmp	.+494    	; 0x1c1e <Get_Password+0x20e>
    1a30:	80 e0       	ldi	r24, 0x00	; 0
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	a8 ec       	ldi	r26, 0xC8	; 200
    1a36:	b3 e4       	ldi	r27, 0x43	; 67
    1a38:	89 8f       	std	Y+25, r24	; 0x19
    1a3a:	9a 8f       	std	Y+26, r25	; 0x1a
    1a3c:	ab 8f       	std	Y+27, r26	; 0x1b
    1a3e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a40:	69 8d       	ldd	r22, Y+25	; 0x19
    1a42:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a44:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a46:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a48:	20 e0       	ldi	r18, 0x00	; 0
    1a4a:	30 e0       	ldi	r19, 0x00	; 0
    1a4c:	4a ef       	ldi	r20, 0xFA	; 250
    1a4e:	54 e4       	ldi	r21, 0x44	; 68
    1a50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a54:	dc 01       	movw	r26, r24
    1a56:	cb 01       	movw	r24, r22
    1a58:	8d 8b       	std	Y+21, r24	; 0x15
    1a5a:	9e 8b       	std	Y+22, r25	; 0x16
    1a5c:	af 8b       	std	Y+23, r26	; 0x17
    1a5e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a60:	6d 89       	ldd	r22, Y+21	; 0x15
    1a62:	7e 89       	ldd	r23, Y+22	; 0x16
    1a64:	8f 89       	ldd	r24, Y+23	; 0x17
    1a66:	98 8d       	ldd	r25, Y+24	; 0x18
    1a68:	20 e0       	ldi	r18, 0x00	; 0
    1a6a:	30 e0       	ldi	r19, 0x00	; 0
    1a6c:	40 e8       	ldi	r20, 0x80	; 128
    1a6e:	5f e3       	ldi	r21, 0x3F	; 63
    1a70:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a74:	88 23       	and	r24, r24
    1a76:	2c f4       	brge	.+10     	; 0x1a82 <Get_Password+0x72>
		__ticks = 1;
    1a78:	81 e0       	ldi	r24, 0x01	; 1
    1a7a:	90 e0       	ldi	r25, 0x00	; 0
    1a7c:	9c 8b       	std	Y+20, r25	; 0x14
    1a7e:	8b 8b       	std	Y+19, r24	; 0x13
    1a80:	3f c0       	rjmp	.+126    	; 0x1b00 <Get_Password+0xf0>
	else if (__tmp > 65535)
    1a82:	6d 89       	ldd	r22, Y+21	; 0x15
    1a84:	7e 89       	ldd	r23, Y+22	; 0x16
    1a86:	8f 89       	ldd	r24, Y+23	; 0x17
    1a88:	98 8d       	ldd	r25, Y+24	; 0x18
    1a8a:	20 e0       	ldi	r18, 0x00	; 0
    1a8c:	3f ef       	ldi	r19, 0xFF	; 255
    1a8e:	4f e7       	ldi	r20, 0x7F	; 127
    1a90:	57 e4       	ldi	r21, 0x47	; 71
    1a92:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a96:	18 16       	cp	r1, r24
    1a98:	4c f5       	brge	.+82     	; 0x1aec <Get_Password+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a9a:	69 8d       	ldd	r22, Y+25	; 0x19
    1a9c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a9e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1aa0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1aa2:	20 e0       	ldi	r18, 0x00	; 0
    1aa4:	30 e0       	ldi	r19, 0x00	; 0
    1aa6:	40 e2       	ldi	r20, 0x20	; 32
    1aa8:	51 e4       	ldi	r21, 0x41	; 65
    1aaa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aae:	dc 01       	movw	r26, r24
    1ab0:	cb 01       	movw	r24, r22
    1ab2:	bc 01       	movw	r22, r24
    1ab4:	cd 01       	movw	r24, r26
    1ab6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aba:	dc 01       	movw	r26, r24
    1abc:	cb 01       	movw	r24, r22
    1abe:	9c 8b       	std	Y+20, r25	; 0x14
    1ac0:	8b 8b       	std	Y+19, r24	; 0x13
    1ac2:	0f c0       	rjmp	.+30     	; 0x1ae2 <Get_Password+0xd2>
    1ac4:	88 ec       	ldi	r24, 0xC8	; 200
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	9a 8b       	std	Y+18, r25	; 0x12
    1aca:	89 8b       	std	Y+17, r24	; 0x11
    1acc:	89 89       	ldd	r24, Y+17	; 0x11
    1ace:	9a 89       	ldd	r25, Y+18	; 0x12
    1ad0:	01 97       	sbiw	r24, 0x01	; 1
    1ad2:	f1 f7       	brne	.-4      	; 0x1ad0 <Get_Password+0xc0>
    1ad4:	9a 8b       	std	Y+18, r25	; 0x12
    1ad6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ad8:	8b 89       	ldd	r24, Y+19	; 0x13
    1ada:	9c 89       	ldd	r25, Y+20	; 0x14
    1adc:	01 97       	sbiw	r24, 0x01	; 1
    1ade:	9c 8b       	std	Y+20, r25	; 0x14
    1ae0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ae2:	8b 89       	ldd	r24, Y+19	; 0x13
    1ae4:	9c 89       	ldd	r25, Y+20	; 0x14
    1ae6:	00 97       	sbiw	r24, 0x00	; 0
    1ae8:	69 f7       	brne	.-38     	; 0x1ac4 <Get_Password+0xb4>
    1aea:	14 c0       	rjmp	.+40     	; 0x1b14 <Get_Password+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aec:	6d 89       	ldd	r22, Y+21	; 0x15
    1aee:	7e 89       	ldd	r23, Y+22	; 0x16
    1af0:	8f 89       	ldd	r24, Y+23	; 0x17
    1af2:	98 8d       	ldd	r25, Y+24	; 0x18
    1af4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1af8:	dc 01       	movw	r26, r24
    1afa:	cb 01       	movw	r24, r22
    1afc:	9c 8b       	std	Y+20, r25	; 0x14
    1afe:	8b 8b       	std	Y+19, r24	; 0x13
    1b00:	8b 89       	ldd	r24, Y+19	; 0x13
    1b02:	9c 89       	ldd	r25, Y+20	; 0x14
    1b04:	98 8b       	std	Y+16, r25	; 0x10
    1b06:	8f 87       	std	Y+15, r24	; 0x0f
    1b08:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b0a:	98 89       	ldd	r25, Y+16	; 0x10
    1b0c:	01 97       	sbiw	r24, 0x01	; 1
    1b0e:	f1 f7       	brne	.-4      	; 0x1b0c <Get_Password+0xfc>
    1b10:	98 8b       	std	Y+16, r25	; 0x10
    1b12:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(400);
		key =  KEYPAD_getPressedKey();
    1b14:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <KEYPAD_getPressedKey>
    1b18:	8e 8f       	std	Y+30, r24	; 0x1e
		LCD_displayCharacter('*');
    1b1a:	8a e2       	ldi	r24, 0x2A	; 42
    1b1c:	0e 94 51 13 	call	0x26a2	; 0x26a2 <LCD_displayCharacter>
		password[i] =  key;
    1b20:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b22:	28 2f       	mov	r18, r24
    1b24:	30 e0       	ldi	r19, 0x00	; 0
    1b26:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b28:	98 a1       	ldd	r25, Y+32	; 0x20
    1b2a:	fc 01       	movw	r30, r24
    1b2c:	e2 0f       	add	r30, r18
    1b2e:	f3 1f       	adc	r31, r19
    1b30:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1b32:	80 83       	st	Z, r24
    1b34:	80 e0       	ldi	r24, 0x00	; 0
    1b36:	90 e0       	ldi	r25, 0x00	; 0
    1b38:	a8 e4       	ldi	r26, 0x48	; 72
    1b3a:	b3 e4       	ldi	r27, 0x43	; 67
    1b3c:	8b 87       	std	Y+11, r24	; 0x0b
    1b3e:	9c 87       	std	Y+12, r25	; 0x0c
    1b40:	ad 87       	std	Y+13, r26	; 0x0d
    1b42:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b44:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b46:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b48:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b4c:	20 e0       	ldi	r18, 0x00	; 0
    1b4e:	30 e0       	ldi	r19, 0x00	; 0
    1b50:	4a ef       	ldi	r20, 0xFA	; 250
    1b52:	54 e4       	ldi	r21, 0x44	; 68
    1b54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b58:	dc 01       	movw	r26, r24
    1b5a:	cb 01       	movw	r24, r22
    1b5c:	8f 83       	std	Y+7, r24	; 0x07
    1b5e:	98 87       	std	Y+8, r25	; 0x08
    1b60:	a9 87       	std	Y+9, r26	; 0x09
    1b62:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b64:	6f 81       	ldd	r22, Y+7	; 0x07
    1b66:	78 85       	ldd	r23, Y+8	; 0x08
    1b68:	89 85       	ldd	r24, Y+9	; 0x09
    1b6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b6c:	20 e0       	ldi	r18, 0x00	; 0
    1b6e:	30 e0       	ldi	r19, 0x00	; 0
    1b70:	40 e8       	ldi	r20, 0x80	; 128
    1b72:	5f e3       	ldi	r21, 0x3F	; 63
    1b74:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b78:	88 23       	and	r24, r24
    1b7a:	2c f4       	brge	.+10     	; 0x1b86 <Get_Password+0x176>
		__ticks = 1;
    1b7c:	81 e0       	ldi	r24, 0x01	; 1
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	9e 83       	std	Y+6, r25	; 0x06
    1b82:	8d 83       	std	Y+5, r24	; 0x05
    1b84:	3f c0       	rjmp	.+126    	; 0x1c04 <Get_Password+0x1f4>
	else if (__tmp > 65535)
    1b86:	6f 81       	ldd	r22, Y+7	; 0x07
    1b88:	78 85       	ldd	r23, Y+8	; 0x08
    1b8a:	89 85       	ldd	r24, Y+9	; 0x09
    1b8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b8e:	20 e0       	ldi	r18, 0x00	; 0
    1b90:	3f ef       	ldi	r19, 0xFF	; 255
    1b92:	4f e7       	ldi	r20, 0x7F	; 127
    1b94:	57 e4       	ldi	r21, 0x47	; 71
    1b96:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b9a:	18 16       	cp	r1, r24
    1b9c:	4c f5       	brge	.+82     	; 0x1bf0 <Get_Password+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b9e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ba0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ba2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ba4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ba6:	20 e0       	ldi	r18, 0x00	; 0
    1ba8:	30 e0       	ldi	r19, 0x00	; 0
    1baa:	40 e2       	ldi	r20, 0x20	; 32
    1bac:	51 e4       	ldi	r21, 0x41	; 65
    1bae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bb2:	dc 01       	movw	r26, r24
    1bb4:	cb 01       	movw	r24, r22
    1bb6:	bc 01       	movw	r22, r24
    1bb8:	cd 01       	movw	r24, r26
    1bba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bbe:	dc 01       	movw	r26, r24
    1bc0:	cb 01       	movw	r24, r22
    1bc2:	9e 83       	std	Y+6, r25	; 0x06
    1bc4:	8d 83       	std	Y+5, r24	; 0x05
    1bc6:	0f c0       	rjmp	.+30     	; 0x1be6 <Get_Password+0x1d6>
    1bc8:	88 ec       	ldi	r24, 0xC8	; 200
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	9c 83       	std	Y+4, r25	; 0x04
    1bce:	8b 83       	std	Y+3, r24	; 0x03
    1bd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd2:	9c 81       	ldd	r25, Y+4	; 0x04
    1bd4:	01 97       	sbiw	r24, 0x01	; 1
    1bd6:	f1 f7       	brne	.-4      	; 0x1bd4 <Get_Password+0x1c4>
    1bd8:	9c 83       	std	Y+4, r25	; 0x04
    1bda:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bdc:	8d 81       	ldd	r24, Y+5	; 0x05
    1bde:	9e 81       	ldd	r25, Y+6	; 0x06
    1be0:	01 97       	sbiw	r24, 0x01	; 1
    1be2:	9e 83       	std	Y+6, r25	; 0x06
    1be4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1be6:	8d 81       	ldd	r24, Y+5	; 0x05
    1be8:	9e 81       	ldd	r25, Y+6	; 0x06
    1bea:	00 97       	sbiw	r24, 0x00	; 0
    1bec:	69 f7       	brne	.-38     	; 0x1bc8 <Get_Password+0x1b8>
    1bee:	14 c0       	rjmp	.+40     	; 0x1c18 <Get_Password+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bf0:	6f 81       	ldd	r22, Y+7	; 0x07
    1bf2:	78 85       	ldd	r23, Y+8	; 0x08
    1bf4:	89 85       	ldd	r24, Y+9	; 0x09
    1bf6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bf8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bfc:	dc 01       	movw	r26, r24
    1bfe:	cb 01       	movw	r24, r22
    1c00:	9e 83       	std	Y+6, r25	; 0x06
    1c02:	8d 83       	std	Y+5, r24	; 0x05
    1c04:	8d 81       	ldd	r24, Y+5	; 0x05
    1c06:	9e 81       	ldd	r25, Y+6	; 0x06
    1c08:	9a 83       	std	Y+2, r25	; 0x02
    1c0a:	89 83       	std	Y+1, r24	; 0x01
    1c0c:	89 81       	ldd	r24, Y+1	; 0x01
    1c0e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c10:	01 97       	sbiw	r24, 0x01	; 1
    1c12:	f1 f7       	brne	.-4      	; 0x1c10 <Get_Password+0x200>
    1c14:	9a 83       	std	Y+2, r25	; 0x02
    1c16:	89 83       	std	Y+1, r24	; 0x01
void Get_Password(uint8 *password,uint8 pass_size)
{
	uint8 key;
	uint8 i =0;

	for(i=0 ; i<pass_size ; i++){
    1c18:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c1a:	8f 5f       	subi	r24, 0xFF	; 255
    1c1c:	8d 8f       	std	Y+29, r24	; 0x1d
    1c1e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1c20:	89 a1       	ldd	r24, Y+33	; 0x21
    1c22:	98 17       	cp	r25, r24
    1c24:	08 f4       	brcc	.+2      	; 0x1c28 <Get_Password+0x218>
    1c26:	04 cf       	rjmp	.-504    	; 0x1a30 <Get_Password+0x20>
		LCD_displayCharacter('*');
		password[i] =  key;
		_delay_ms(200);
	}

	while(KEYPAD_getPressedKey() != ENTER);
    1c28:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <KEYPAD_getPressedKey>
    1c2c:	8d 33       	cpi	r24, 0x3D	; 61
    1c2e:	e1 f7       	brne	.-8      	; 0x1c28 <Get_Password+0x218>
}
    1c30:	a1 96       	adiw	r28, 0x21	; 33
    1c32:	0f b6       	in	r0, 0x3f	; 63
    1c34:	f8 94       	cli
    1c36:	de bf       	out	0x3e, r29	; 62
    1c38:	0f be       	out	0x3f, r0	; 63
    1c3a:	cd bf       	out	0x3d, r28	; 61
    1c3c:	cf 91       	pop	r28
    1c3e:	df 91       	pop	r29
    1c40:	08 95       	ret

00001c42 <Motor_Fun>:

void Motor_Fun(void)
{
    1c42:	df 93       	push	r29
    1c44:	cf 93       	push	r28
    1c46:	cd b7       	in	r28, 0x3d	; 61
    1c48:	de b7       	in	r29, 0x3e	; 62
    1c4a:	2e 97       	sbiw	r28, 0x0e	; 14
    1c4c:	0f b6       	in	r0, 0x3f	; 63
    1c4e:	f8 94       	cli
    1c50:	de bf       	out	0x3e, r29	; 62
    1c52:	0f be       	out	0x3f, r0	; 63
    1c54:	cd bf       	out	0x3d, r28	; 61
	/*Opening the door in 15sec*/
	g_ticks=0;
    1c56:	10 92 72 01 	sts	0x0172, r1
	LCD_clearScreen();
    1c5a:	0e 94 e7 15 	call	0x2bce	; 0x2bce <LCD_clearScreen>
	LCD_displayStringRowColumn(0,4,"Door is");
    1c5e:	23 ee       	ldi	r18, 0xE3	; 227
    1c60:	30 e0       	ldi	r19, 0x00	; 0
    1c62:	80 e0       	ldi	r24, 0x00	; 0
    1c64:	64 e0       	ldi	r22, 0x04	; 4
    1c66:	a9 01       	movw	r20, r18
    1c68:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,4,"Unlocking!");
    1c6c:	2b ee       	ldi	r18, 0xEB	; 235
    1c6e:	30 e0       	ldi	r19, 0x00	; 0
    1c70:	81 e0       	ldi	r24, 0x01	; 1
    1c72:	64 e0       	ldi	r22, 0x04	; 4
    1c74:	a9 01       	movw	r20, r18
    1c76:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <LCD_displayStringRowColumn>
	while (g_ticks < DOOR_IS_UNLOCKING);
    1c7a:	80 91 72 01 	lds	r24, 0x0172
    1c7e:	8f 30       	cpi	r24, 0x0F	; 15
    1c80:	e0 f3       	brcs	.-8      	; 0x1c7a <Motor_Fun+0x38>

	/*Holding the door in 3sec*/
	g_ticks=0;
    1c82:	10 92 72 01 	sts	0x0172, r1
	LCD_clearScreen();
    1c86:	0e 94 e7 15 	call	0x2bce	; 0x2bce <LCD_clearScreen>
	LCD_displayString("Door is Unlock!");
    1c8a:	86 ef       	ldi	r24, 0xF6	; 246
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	0e 94 40 15 	call	0x2a80	; 0x2a80 <LCD_displayString>
	while (g_ticks < MOTOR_HOLD);
    1c92:	80 91 72 01 	lds	r24, 0x0172
    1c96:	83 30       	cpi	r24, 0x03	; 3
    1c98:	e0 f3       	brcs	.-8      	; 0x1c92 <Motor_Fun+0x50>

	/*Closing the door in 15sec*/
	g_ticks=0;
    1c9a:	10 92 72 01 	sts	0x0172, r1
	LCD_clearScreen();
    1c9e:	0e 94 e7 15 	call	0x2bce	; 0x2bce <LCD_clearScreen>
	LCD_displayStringRowColumn(0,4,"Door is");
    1ca2:	23 ee       	ldi	r18, 0xE3	; 227
    1ca4:	30 e0       	ldi	r19, 0x00	; 0
    1ca6:	80 e0       	ldi	r24, 0x00	; 0
    1ca8:	64 e0       	ldi	r22, 0x04	; 4
    1caa:	a9 01       	movw	r20, r18
    1cac:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,4,"Locking!");
    1cb0:	26 e0       	ldi	r18, 0x06	; 6
    1cb2:	31 e0       	ldi	r19, 0x01	; 1
    1cb4:	81 e0       	ldi	r24, 0x01	; 1
    1cb6:	64 e0       	ldi	r22, 0x04	; 4
    1cb8:	a9 01       	movw	r20, r18
    1cba:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <LCD_displayStringRowColumn>
	while (g_ticks < DOOR_IS_LOCKING);
    1cbe:	80 91 72 01 	lds	r24, 0x0172
    1cc2:	8f 30       	cpi	r24, 0x0F	; 15
    1cc4:	e0 f3       	brcs	.-8      	; 0x1cbe <Motor_Fun+0x7c>

	/*Stop the Motor*/
	LCD_clearScreen();
    1cc6:	0e 94 e7 15 	call	0x2bce	; 0x2bce <LCD_clearScreen>
	LCD_displayStringRowColumn(0,4,"Door is");
    1cca:	23 ee       	ldi	r18, 0xE3	; 227
    1ccc:	30 e0       	ldi	r19, 0x00	; 0
    1cce:	80 e0       	ldi	r24, 0x00	; 0
    1cd0:	64 e0       	ldi	r22, 0x04	; 4
    1cd2:	a9 01       	movw	r20, r18
    1cd4:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,4,"Locked!");
    1cd8:	2f e0       	ldi	r18, 0x0F	; 15
    1cda:	31 e0       	ldi	r19, 0x01	; 1
    1cdc:	81 e0       	ldi	r24, 0x01	; 1
    1cde:	64 e0       	ldi	r22, 0x04	; 4
    1ce0:	a9 01       	movw	r20, r18
    1ce2:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <LCD_displayStringRowColumn>
    1ce6:	80 e0       	ldi	r24, 0x00	; 0
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	aa e7       	ldi	r26, 0x7A	; 122
    1cec:	b4 e4       	ldi	r27, 0x44	; 68
    1cee:	8b 87       	std	Y+11, r24	; 0x0b
    1cf0:	9c 87       	std	Y+12, r25	; 0x0c
    1cf2:	ad 87       	std	Y+13, r26	; 0x0d
    1cf4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cf6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cf8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cfa:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cfc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cfe:	20 e0       	ldi	r18, 0x00	; 0
    1d00:	30 e0       	ldi	r19, 0x00	; 0
    1d02:	4a ef       	ldi	r20, 0xFA	; 250
    1d04:	54 e4       	ldi	r21, 0x44	; 68
    1d06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d0a:	dc 01       	movw	r26, r24
    1d0c:	cb 01       	movw	r24, r22
    1d0e:	8f 83       	std	Y+7, r24	; 0x07
    1d10:	98 87       	std	Y+8, r25	; 0x08
    1d12:	a9 87       	std	Y+9, r26	; 0x09
    1d14:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d16:	6f 81       	ldd	r22, Y+7	; 0x07
    1d18:	78 85       	ldd	r23, Y+8	; 0x08
    1d1a:	89 85       	ldd	r24, Y+9	; 0x09
    1d1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d1e:	20 e0       	ldi	r18, 0x00	; 0
    1d20:	30 e0       	ldi	r19, 0x00	; 0
    1d22:	40 e8       	ldi	r20, 0x80	; 128
    1d24:	5f e3       	ldi	r21, 0x3F	; 63
    1d26:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d2a:	88 23       	and	r24, r24
    1d2c:	2c f4       	brge	.+10     	; 0x1d38 <Motor_Fun+0xf6>
		__ticks = 1;
    1d2e:	81 e0       	ldi	r24, 0x01	; 1
    1d30:	90 e0       	ldi	r25, 0x00	; 0
    1d32:	9e 83       	std	Y+6, r25	; 0x06
    1d34:	8d 83       	std	Y+5, r24	; 0x05
    1d36:	3f c0       	rjmp	.+126    	; 0x1db6 <Motor_Fun+0x174>
	else if (__tmp > 65535)
    1d38:	6f 81       	ldd	r22, Y+7	; 0x07
    1d3a:	78 85       	ldd	r23, Y+8	; 0x08
    1d3c:	89 85       	ldd	r24, Y+9	; 0x09
    1d3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d40:	20 e0       	ldi	r18, 0x00	; 0
    1d42:	3f ef       	ldi	r19, 0xFF	; 255
    1d44:	4f e7       	ldi	r20, 0x7F	; 127
    1d46:	57 e4       	ldi	r21, 0x47	; 71
    1d48:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d4c:	18 16       	cp	r1, r24
    1d4e:	4c f5       	brge	.+82     	; 0x1da2 <Motor_Fun+0x160>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d50:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d52:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d54:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d56:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d58:	20 e0       	ldi	r18, 0x00	; 0
    1d5a:	30 e0       	ldi	r19, 0x00	; 0
    1d5c:	40 e2       	ldi	r20, 0x20	; 32
    1d5e:	51 e4       	ldi	r21, 0x41	; 65
    1d60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d64:	dc 01       	movw	r26, r24
    1d66:	cb 01       	movw	r24, r22
    1d68:	bc 01       	movw	r22, r24
    1d6a:	cd 01       	movw	r24, r26
    1d6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d70:	dc 01       	movw	r26, r24
    1d72:	cb 01       	movw	r24, r22
    1d74:	9e 83       	std	Y+6, r25	; 0x06
    1d76:	8d 83       	std	Y+5, r24	; 0x05
    1d78:	0f c0       	rjmp	.+30     	; 0x1d98 <Motor_Fun+0x156>
    1d7a:	88 ec       	ldi	r24, 0xC8	; 200
    1d7c:	90 e0       	ldi	r25, 0x00	; 0
    1d7e:	9c 83       	std	Y+4, r25	; 0x04
    1d80:	8b 83       	std	Y+3, r24	; 0x03
    1d82:	8b 81       	ldd	r24, Y+3	; 0x03
    1d84:	9c 81       	ldd	r25, Y+4	; 0x04
    1d86:	01 97       	sbiw	r24, 0x01	; 1
    1d88:	f1 f7       	brne	.-4      	; 0x1d86 <Motor_Fun+0x144>
    1d8a:	9c 83       	std	Y+4, r25	; 0x04
    1d8c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d90:	9e 81       	ldd	r25, Y+6	; 0x06
    1d92:	01 97       	sbiw	r24, 0x01	; 1
    1d94:	9e 83       	std	Y+6, r25	; 0x06
    1d96:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d98:	8d 81       	ldd	r24, Y+5	; 0x05
    1d9a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d9c:	00 97       	sbiw	r24, 0x00	; 0
    1d9e:	69 f7       	brne	.-38     	; 0x1d7a <Motor_Fun+0x138>
    1da0:	14 c0       	rjmp	.+40     	; 0x1dca <Motor_Fun+0x188>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1da2:	6f 81       	ldd	r22, Y+7	; 0x07
    1da4:	78 85       	ldd	r23, Y+8	; 0x08
    1da6:	89 85       	ldd	r24, Y+9	; 0x09
    1da8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1daa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dae:	dc 01       	movw	r26, r24
    1db0:	cb 01       	movw	r24, r22
    1db2:	9e 83       	std	Y+6, r25	; 0x06
    1db4:	8d 83       	std	Y+5, r24	; 0x05
    1db6:	8d 81       	ldd	r24, Y+5	; 0x05
    1db8:	9e 81       	ldd	r25, Y+6	; 0x06
    1dba:	9a 83       	std	Y+2, r25	; 0x02
    1dbc:	89 83       	std	Y+1, r24	; 0x01
    1dbe:	89 81       	ldd	r24, Y+1	; 0x01
    1dc0:	9a 81       	ldd	r25, Y+2	; 0x02
    1dc2:	01 97       	sbiw	r24, 0x01	; 1
    1dc4:	f1 f7       	brne	.-4      	; 0x1dc2 <Motor_Fun+0x180>
    1dc6:	9a 83       	std	Y+2, r25	; 0x02
    1dc8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	/*The LCD will always display the main system options*/
	LCD_clearScreen();
    1dca:	0e 94 e7 15 	call	0x2bce	; 0x2bce <LCD_clearScreen>
	Main_Options();
    1dce:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <Main_Options>
}
    1dd2:	2e 96       	adiw	r28, 0x0e	; 14
    1dd4:	0f b6       	in	r0, 0x3f	; 63
    1dd6:	f8 94       	cli
    1dd8:	de bf       	out	0x3e, r29	; 62
    1dda:	0f be       	out	0x3f, r0	; 63
    1ddc:	cd bf       	out	0x3d, r28	; 61
    1dde:	cf 91       	pop	r28
    1de0:	df 91       	pop	r29
    1de2:	08 95       	ret

00001de4 <Main_Options>:

void Main_Options(void)
{
    1de4:	df 93       	push	r29
    1de6:	cf 93       	push	r28
    1de8:	cd b7       	in	r28, 0x3d	; 61
    1dea:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    1dec:	0e 94 e7 15 	call	0x2bce	; 0x2bce <LCD_clearScreen>

	/* Display system main options */
	LCD_displayStringRowColumn(0,0,"+ : Open Door");
    1df0:	27 e1       	ldi	r18, 0x17	; 23
    1df2:	31 e0       	ldi	r19, 0x01	; 1
    1df4:	80 e0       	ldi	r24, 0x00	; 0
    1df6:	60 e0       	ldi	r22, 0x00	; 0
    1df8:	a9 01       	movw	r20, r18
    1dfa:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,0,"- : Change Pass");
    1dfe:	25 e2       	ldi	r18, 0x25	; 37
    1e00:	31 e0       	ldi	r19, 0x01	; 1
    1e02:	81 e0       	ldi	r24, 0x01	; 1
    1e04:	60 e0       	ldi	r22, 0x00	; 0
    1e06:	a9 01       	movw	r20, r18
    1e08:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <LCD_displayStringRowColumn>
}
    1e0c:	cf 91       	pop	r28
    1e0e:	df 91       	pop	r29
    1e10:	08 95       	ret

00001e12 <Warning_Message>:

void Warning_Message(void){
    1e12:	df 93       	push	r29
    1e14:	cf 93       	push	r28
    1e16:	cd b7       	in	r28, 0x3d	; 61
    1e18:	de b7       	in	r29, 0x3e	; 62
	g_ticks=0;
    1e1a:	10 92 72 01 	sts	0x0172, r1
	LCD_clearScreen();
    1e1e:	0e 94 e7 15 	call	0x2bce	; 0x2bce <LCD_clearScreen>
    1e22:	07 c0       	rjmp	.+14     	; 0x1e32 <Warning_Message+0x20>
	while(g_ticks < WARNING){
		LCD_displayStringRowColumn(0,2,"!!!Warning!!!");
    1e24:	25 e3       	ldi	r18, 0x35	; 53
    1e26:	31 e0       	ldi	r19, 0x01	; 1
    1e28:	80 e0       	ldi	r24, 0x00	; 0
    1e2a:	62 e0       	ldi	r22, 0x02	; 2
    1e2c:	a9 01       	movw	r20, r18
    1e2e:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <LCD_displayStringRowColumn>
}

void Warning_Message(void){
	g_ticks=0;
	LCD_clearScreen();
	while(g_ticks < WARNING){
    1e32:	80 91 72 01 	lds	r24, 0x0172
    1e36:	8c 33       	cpi	r24, 0x3C	; 60
    1e38:	a8 f3       	brcs	.-22     	; 0x1e24 <Warning_Message+0x12>
		LCD_displayStringRowColumn(0,2,"!!!Warning!!!");
	}
	LCD_clearScreen();
    1e3a:	0e 94 e7 15 	call	0x2bce	; 0x2bce <LCD_clearScreen>
	/*The LCD will always display the main system options*/
	Main_Options();
    1e3e:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <Main_Options>

}
    1e42:	cf 91       	pop	r28
    1e44:	df 91       	pop	r29
    1e46:	08 95       	ret

00001e48 <Change_passMessage>:

void Change_passMessage(void)
{
    1e48:	df 93       	push	r29
    1e4a:	cf 93       	push	r28
    1e4c:	cd b7       	in	r28, 0x3d	; 61
    1e4e:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    1e50:	0e 94 e7 15 	call	0x2bce	; 0x2bce <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"PLZ enter the ");
    1e54:	23 e4       	ldi	r18, 0x43	; 67
    1e56:	31 e0       	ldi	r19, 0x01	; 1
    1e58:	80 e0       	ldi	r24, 0x00	; 0
    1e5a:	60 e0       	ldi	r22, 0x00	; 0
    1e5c:	a9 01       	movw	r20, r18
    1e5e:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,0,"old pass:");
    1e62:	22 e5       	ldi	r18, 0x52	; 82
    1e64:	31 e0       	ldi	r19, 0x01	; 1
    1e66:	81 e0       	ldi	r24, 0x01	; 1
    1e68:	60 e0       	ldi	r22, 0x00	; 0
    1e6a:	a9 01       	movw	r20, r18
    1e6c:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <LCD_displayStringRowColumn>
}
    1e70:	cf 91       	pop	r28
    1e72:	df 91       	pop	r29
    1e74:	08 95       	ret

00001e76 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    1e76:	df 93       	push	r29
    1e78:	cf 93       	push	r28
    1e7a:	cd b7       	in	r28, 0x3d	; 61
    1e7c:	de b7       	in	r29, 0x3e	; 62
    1e7e:	60 97       	sbiw	r28, 0x10	; 16
    1e80:	0f b6       	in	r0, 0x3f	; 63
    1e82:	f8 94       	cli
    1e84:	de bf       	out	0x3e, r29	; 62
    1e86:	0f be       	out	0x3f, r0	; 63
    1e88:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    1e8a:	80 e0       	ldi	r24, 0x00	; 0
    1e8c:	60 e0       	ldi	r22, 0x00	; 0
    1e8e:	40 e0       	ldi	r20, 0x00	; 0
    1e90:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    1e94:	80 e0       	ldi	r24, 0x00	; 0
    1e96:	61 e0       	ldi	r22, 0x01	; 1
    1e98:	40 e0       	ldi	r20, 0x00	; 0
    1e9a:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    1e9e:	80 e0       	ldi	r24, 0x00	; 0
    1ea0:	62 e0       	ldi	r22, 0x02	; 2
    1ea2:	40 e0       	ldi	r20, 0x00	; 0
    1ea4:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    1ea8:	80 e0       	ldi	r24, 0x00	; 0
    1eaa:	63 e0       	ldi	r22, 0x03	; 3
    1eac:	40 e0       	ldi	r20, 0x00	; 0
    1eae:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    1eb2:	80 e0       	ldi	r24, 0x00	; 0
    1eb4:	64 e0       	ldi	r22, 0x04	; 4
    1eb6:	40 e0       	ldi	r20, 0x00	; 0
    1eb8:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    1ebc:	80 e0       	ldi	r24, 0x00	; 0
    1ebe:	65 e0       	ldi	r22, 0x05	; 5
    1ec0:	40 e0       	ldi	r20, 0x00	; 0
    1ec2:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    1ec6:	80 e0       	ldi	r24, 0x00	; 0
    1ec8:	66 e0       	ldi	r22, 0x06	; 6
    1eca:	40 e0       	ldi	r20, 0x00	; 0
    1ecc:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    1ed0:	80 e0       	ldi	r24, 0x00	; 0
    1ed2:	67 e0       	ldi	r22, 0x07	; 7
    1ed4:	40 e0       	ldi	r20, 0x00	; 0
    1ed6:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1eda:	1f 86       	std	Y+15, r1	; 0x0f
    1edc:	ab c0       	rjmp	.+342    	; 0x2034 <KEYPAD_getPressedKey+0x1be>
		{
			/*
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    1ede:	80 e0       	ldi	r24, 0x00	; 0
    1ee0:	6f 85       	ldd	r22, Y+15	; 0x0f
    1ee2:	41 e0       	ldi	r20, 0x01	; 1
    1ee4:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    1ee8:	80 e0       	ldi	r24, 0x00	; 0
    1eea:	6f 85       	ldd	r22, Y+15	; 0x0f
    1eec:	40 e0       	ldi	r20, 0x00	; 0
    1eee:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1ef2:	18 8a       	std	Y+16, r1	; 0x10
    1ef4:	22 c0       	rjmp	.+68     	; 0x1f3a <KEYPAD_getPressedKey+0xc4>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    1ef6:	88 89       	ldd	r24, Y+16	; 0x10
    1ef8:	98 2f       	mov	r25, r24
    1efa:	9c 5f       	subi	r25, 0xFC	; 252
    1efc:	80 e0       	ldi	r24, 0x00	; 0
    1efe:	69 2f       	mov	r22, r25
    1f00:	0e 94 79 07 	call	0xef2	; 0xef2 <GPIO_readPin>
    1f04:	88 23       	and	r24, r24
    1f06:	b1 f4       	brne	.+44     	; 0x1f34 <KEYPAD_getPressedKey+0xbe>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1f08:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f0a:	88 2f       	mov	r24, r24
    1f0c:	90 e0       	ldi	r25, 0x00	; 0
    1f0e:	88 0f       	add	r24, r24
    1f10:	99 1f       	adc	r25, r25
    1f12:	88 0f       	add	r24, r24
    1f14:	99 1f       	adc	r25, r25
    1f16:	98 2f       	mov	r25, r24
    1f18:	88 89       	ldd	r24, Y+16	; 0x10
    1f1a:	89 0f       	add	r24, r25
    1f1c:	8f 5f       	subi	r24, 0xFF	; 255
    1f1e:	0e 94 1f 10 	call	0x203e	; 0x203e <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}
}
    1f22:	60 96       	adiw	r28, 0x10	; 16
    1f24:	0f b6       	in	r0, 0x3f	; 63
    1f26:	f8 94       	cli
    1f28:	de bf       	out	0x3e, r29	; 62
    1f2a:	0f be       	out	0x3f, r0	; 63
    1f2c:	cd bf       	out	0x3d, r28	; 61
    1f2e:	cf 91       	pop	r28
    1f30:	df 91       	pop	r29
    1f32:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1f34:	88 89       	ldd	r24, Y+16	; 0x10
    1f36:	8f 5f       	subi	r24, 0xFF	; 255
    1f38:	88 8b       	std	Y+16, r24	; 0x10
    1f3a:	88 89       	ldd	r24, Y+16	; 0x10
    1f3c:	84 30       	cpi	r24, 0x04	; 4
    1f3e:	d8 f2       	brcs	.-74     	; 0x1ef6 <KEYPAD_getPressedKey+0x80>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    1f40:	80 e0       	ldi	r24, 0x00	; 0
    1f42:	6f 85       	ldd	r22, Y+15	; 0x0f
    1f44:	40 e0       	ldi	r20, 0x00	; 0
    1f46:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
    1f4a:	80 e0       	ldi	r24, 0x00	; 0
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	a0 ea       	ldi	r26, 0xA0	; 160
    1f50:	b0 e4       	ldi	r27, 0x40	; 64
    1f52:	8b 87       	std	Y+11, r24	; 0x0b
    1f54:	9c 87       	std	Y+12, r25	; 0x0c
    1f56:	ad 87       	std	Y+13, r26	; 0x0d
    1f58:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f5a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f5c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f60:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f62:	20 e0       	ldi	r18, 0x00	; 0
    1f64:	30 e0       	ldi	r19, 0x00	; 0
    1f66:	4a ef       	ldi	r20, 0xFA	; 250
    1f68:	54 e4       	ldi	r21, 0x44	; 68
    1f6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f6e:	dc 01       	movw	r26, r24
    1f70:	cb 01       	movw	r24, r22
    1f72:	8f 83       	std	Y+7, r24	; 0x07
    1f74:	98 87       	std	Y+8, r25	; 0x08
    1f76:	a9 87       	std	Y+9, r26	; 0x09
    1f78:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f7a:	6f 81       	ldd	r22, Y+7	; 0x07
    1f7c:	78 85       	ldd	r23, Y+8	; 0x08
    1f7e:	89 85       	ldd	r24, Y+9	; 0x09
    1f80:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f82:	20 e0       	ldi	r18, 0x00	; 0
    1f84:	30 e0       	ldi	r19, 0x00	; 0
    1f86:	40 e8       	ldi	r20, 0x80	; 128
    1f88:	5f e3       	ldi	r21, 0x3F	; 63
    1f8a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f8e:	88 23       	and	r24, r24
    1f90:	2c f4       	brge	.+10     	; 0x1f9c <KEYPAD_getPressedKey+0x126>
		__ticks = 1;
    1f92:	81 e0       	ldi	r24, 0x01	; 1
    1f94:	90 e0       	ldi	r25, 0x00	; 0
    1f96:	9e 83       	std	Y+6, r25	; 0x06
    1f98:	8d 83       	std	Y+5, r24	; 0x05
    1f9a:	3f c0       	rjmp	.+126    	; 0x201a <KEYPAD_getPressedKey+0x1a4>
	else if (__tmp > 65535)
    1f9c:	6f 81       	ldd	r22, Y+7	; 0x07
    1f9e:	78 85       	ldd	r23, Y+8	; 0x08
    1fa0:	89 85       	ldd	r24, Y+9	; 0x09
    1fa2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fa4:	20 e0       	ldi	r18, 0x00	; 0
    1fa6:	3f ef       	ldi	r19, 0xFF	; 255
    1fa8:	4f e7       	ldi	r20, 0x7F	; 127
    1faa:	57 e4       	ldi	r21, 0x47	; 71
    1fac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fb0:	18 16       	cp	r1, r24
    1fb2:	4c f5       	brge	.+82     	; 0x2006 <KEYPAD_getPressedKey+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fb4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fb6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fb8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fba:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fbc:	20 e0       	ldi	r18, 0x00	; 0
    1fbe:	30 e0       	ldi	r19, 0x00	; 0
    1fc0:	40 e2       	ldi	r20, 0x20	; 32
    1fc2:	51 e4       	ldi	r21, 0x41	; 65
    1fc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fc8:	dc 01       	movw	r26, r24
    1fca:	cb 01       	movw	r24, r22
    1fcc:	bc 01       	movw	r22, r24
    1fce:	cd 01       	movw	r24, r26
    1fd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fd4:	dc 01       	movw	r26, r24
    1fd6:	cb 01       	movw	r24, r22
    1fd8:	9e 83       	std	Y+6, r25	; 0x06
    1fda:	8d 83       	std	Y+5, r24	; 0x05
    1fdc:	0f c0       	rjmp	.+30     	; 0x1ffc <KEYPAD_getPressedKey+0x186>
    1fde:	88 ec       	ldi	r24, 0xC8	; 200
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
    1fe2:	9c 83       	std	Y+4, r25	; 0x04
    1fe4:	8b 83       	std	Y+3, r24	; 0x03
    1fe6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe8:	9c 81       	ldd	r25, Y+4	; 0x04
    1fea:	01 97       	sbiw	r24, 0x01	; 1
    1fec:	f1 f7       	brne	.-4      	; 0x1fea <KEYPAD_getPressedKey+0x174>
    1fee:	9c 83       	std	Y+4, r25	; 0x04
    1ff0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ff2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ff4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ff6:	01 97       	sbiw	r24, 0x01	; 1
    1ff8:	9e 83       	std	Y+6, r25	; 0x06
    1ffa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ffc:	8d 81       	ldd	r24, Y+5	; 0x05
    1ffe:	9e 81       	ldd	r25, Y+6	; 0x06
    2000:	00 97       	sbiw	r24, 0x00	; 0
    2002:	69 f7       	brne	.-38     	; 0x1fde <KEYPAD_getPressedKey+0x168>
    2004:	14 c0       	rjmp	.+40     	; 0x202e <KEYPAD_getPressedKey+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2006:	6f 81       	ldd	r22, Y+7	; 0x07
    2008:	78 85       	ldd	r23, Y+8	; 0x08
    200a:	89 85       	ldd	r24, Y+9	; 0x09
    200c:	9a 85       	ldd	r25, Y+10	; 0x0a
    200e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2012:	dc 01       	movw	r26, r24
    2014:	cb 01       	movw	r24, r22
    2016:	9e 83       	std	Y+6, r25	; 0x06
    2018:	8d 83       	std	Y+5, r24	; 0x05
    201a:	8d 81       	ldd	r24, Y+5	; 0x05
    201c:	9e 81       	ldd	r25, Y+6	; 0x06
    201e:	9a 83       	std	Y+2, r25	; 0x02
    2020:	89 83       	std	Y+1, r24	; 0x01
    2022:	89 81       	ldd	r24, Y+1	; 0x01
    2024:	9a 81       	ldd	r25, Y+2	; 0x02
    2026:	01 97       	sbiw	r24, 0x01	; 1
    2028:	f1 f7       	brne	.-4      	; 0x2026 <KEYPAD_getPressedKey+0x1b0>
    202a:	9a 83       	std	Y+2, r25	; 0x02
    202c:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    202e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2030:	8f 5f       	subi	r24, 0xFF	; 255
    2032:	8f 87       	std	Y+15, r24	; 0x0f
    2034:	8f 85       	ldd	r24, Y+15	; 0x0f
    2036:	84 30       	cpi	r24, 0x04	; 4
    2038:	08 f4       	brcc	.+2      	; 0x203c <KEYPAD_getPressedKey+0x1c6>
    203a:	51 cf       	rjmp	.-350    	; 0x1ede <KEYPAD_getPressedKey+0x68>
    203c:	4e cf       	rjmp	.-356    	; 0x1eda <KEYPAD_getPressedKey+0x64>

0000203e <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    203e:	df 93       	push	r29
    2040:	cf 93       	push	r28
    2042:	00 d0       	rcall	.+0      	; 0x2044 <KEYPAD_4x4_adjustKeyNumber+0x6>
    2044:	00 d0       	rcall	.+0      	; 0x2046 <KEYPAD_4x4_adjustKeyNumber+0x8>
    2046:	cd b7       	in	r28, 0x3d	; 61
    2048:	de b7       	in	r29, 0x3e	; 62
    204a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    204c:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    204e:	8a 81       	ldd	r24, Y+2	; 0x02
    2050:	28 2f       	mov	r18, r24
    2052:	30 e0       	ldi	r19, 0x00	; 0
    2054:	3c 83       	std	Y+4, r19	; 0x04
    2056:	2b 83       	std	Y+3, r18	; 0x03
    2058:	8b 81       	ldd	r24, Y+3	; 0x03
    205a:	9c 81       	ldd	r25, Y+4	; 0x04
    205c:	88 30       	cpi	r24, 0x08	; 8
    205e:	91 05       	cpc	r25, r1
    2060:	09 f4       	brne	.+2      	; 0x2064 <KEYPAD_4x4_adjustKeyNumber+0x26>
    2062:	70 c0       	rjmp	.+224    	; 0x2144 <KEYPAD_4x4_adjustKeyNumber+0x106>
    2064:	2b 81       	ldd	r18, Y+3	; 0x03
    2066:	3c 81       	ldd	r19, Y+4	; 0x04
    2068:	29 30       	cpi	r18, 0x09	; 9
    206a:	31 05       	cpc	r19, r1
    206c:	5c f5       	brge	.+86     	; 0x20c4 <KEYPAD_4x4_adjustKeyNumber+0x86>
    206e:	8b 81       	ldd	r24, Y+3	; 0x03
    2070:	9c 81       	ldd	r25, Y+4	; 0x04
    2072:	84 30       	cpi	r24, 0x04	; 4
    2074:	91 05       	cpc	r25, r1
    2076:	09 f4       	brne	.+2      	; 0x207a <KEYPAD_4x4_adjustKeyNumber+0x3c>
    2078:	59 c0       	rjmp	.+178    	; 0x212c <KEYPAD_4x4_adjustKeyNumber+0xee>
    207a:	2b 81       	ldd	r18, Y+3	; 0x03
    207c:	3c 81       	ldd	r19, Y+4	; 0x04
    207e:	25 30       	cpi	r18, 0x05	; 5
    2080:	31 05       	cpc	r19, r1
    2082:	9c f4       	brge	.+38     	; 0x20aa <KEYPAD_4x4_adjustKeyNumber+0x6c>
    2084:	8b 81       	ldd	r24, Y+3	; 0x03
    2086:	9c 81       	ldd	r25, Y+4	; 0x04
    2088:	82 30       	cpi	r24, 0x02	; 2
    208a:	91 05       	cpc	r25, r1
    208c:	09 f4       	brne	.+2      	; 0x2090 <KEYPAD_4x4_adjustKeyNumber+0x52>
    208e:	48 c0       	rjmp	.+144    	; 0x2120 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    2090:	2b 81       	ldd	r18, Y+3	; 0x03
    2092:	3c 81       	ldd	r19, Y+4	; 0x04
    2094:	23 30       	cpi	r18, 0x03	; 3
    2096:	31 05       	cpc	r19, r1
    2098:	0c f0       	brlt	.+2      	; 0x209c <KEYPAD_4x4_adjustKeyNumber+0x5e>
    209a:	45 c0       	rjmp	.+138    	; 0x2126 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    209c:	8b 81       	ldd	r24, Y+3	; 0x03
    209e:	9c 81       	ldd	r25, Y+4	; 0x04
    20a0:	81 30       	cpi	r24, 0x01	; 1
    20a2:	91 05       	cpc	r25, r1
    20a4:	09 f4       	brne	.+2      	; 0x20a8 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    20a6:	39 c0       	rjmp	.+114    	; 0x211a <KEYPAD_4x4_adjustKeyNumber+0xdc>
    20a8:	67 c0       	rjmp	.+206    	; 0x2178 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    20aa:	2b 81       	ldd	r18, Y+3	; 0x03
    20ac:	3c 81       	ldd	r19, Y+4	; 0x04
    20ae:	26 30       	cpi	r18, 0x06	; 6
    20b0:	31 05       	cpc	r19, r1
    20b2:	09 f4       	brne	.+2      	; 0x20b6 <KEYPAD_4x4_adjustKeyNumber+0x78>
    20b4:	41 c0       	rjmp	.+130    	; 0x2138 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    20b6:	8b 81       	ldd	r24, Y+3	; 0x03
    20b8:	9c 81       	ldd	r25, Y+4	; 0x04
    20ba:	87 30       	cpi	r24, 0x07	; 7
    20bc:	91 05       	cpc	r25, r1
    20be:	0c f0       	brlt	.+2      	; 0x20c2 <KEYPAD_4x4_adjustKeyNumber+0x84>
    20c0:	3e c0       	rjmp	.+124    	; 0x213e <KEYPAD_4x4_adjustKeyNumber+0x100>
    20c2:	37 c0       	rjmp	.+110    	; 0x2132 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    20c4:	2b 81       	ldd	r18, Y+3	; 0x03
    20c6:	3c 81       	ldd	r19, Y+4	; 0x04
    20c8:	2c 30       	cpi	r18, 0x0C	; 12
    20ca:	31 05       	cpc	r19, r1
    20cc:	09 f4       	brne	.+2      	; 0x20d0 <KEYPAD_4x4_adjustKeyNumber+0x92>
    20ce:	46 c0       	rjmp	.+140    	; 0x215c <KEYPAD_4x4_adjustKeyNumber+0x11e>
    20d0:	8b 81       	ldd	r24, Y+3	; 0x03
    20d2:	9c 81       	ldd	r25, Y+4	; 0x04
    20d4:	8d 30       	cpi	r24, 0x0D	; 13
    20d6:	91 05       	cpc	r25, r1
    20d8:	5c f4       	brge	.+22     	; 0x20f0 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    20da:	2b 81       	ldd	r18, Y+3	; 0x03
    20dc:	3c 81       	ldd	r19, Y+4	; 0x04
    20de:	2a 30       	cpi	r18, 0x0A	; 10
    20e0:	31 05       	cpc	r19, r1
    20e2:	b1 f1       	breq	.+108    	; 0x2150 <KEYPAD_4x4_adjustKeyNumber+0x112>
    20e4:	8b 81       	ldd	r24, Y+3	; 0x03
    20e6:	9c 81       	ldd	r25, Y+4	; 0x04
    20e8:	8b 30       	cpi	r24, 0x0B	; 11
    20ea:	91 05       	cpc	r25, r1
    20ec:	a4 f5       	brge	.+104    	; 0x2156 <KEYPAD_4x4_adjustKeyNumber+0x118>
    20ee:	2d c0       	rjmp	.+90     	; 0x214a <KEYPAD_4x4_adjustKeyNumber+0x10c>
    20f0:	2b 81       	ldd	r18, Y+3	; 0x03
    20f2:	3c 81       	ldd	r19, Y+4	; 0x04
    20f4:	2e 30       	cpi	r18, 0x0E	; 14
    20f6:	31 05       	cpc	r19, r1
    20f8:	b9 f1       	breq	.+110    	; 0x2168 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    20fa:	8b 81       	ldd	r24, Y+3	; 0x03
    20fc:	9c 81       	ldd	r25, Y+4	; 0x04
    20fe:	8e 30       	cpi	r24, 0x0E	; 14
    2100:	91 05       	cpc	r25, r1
    2102:	7c f1       	brlt	.+94     	; 0x2162 <KEYPAD_4x4_adjustKeyNumber+0x124>
    2104:	2b 81       	ldd	r18, Y+3	; 0x03
    2106:	3c 81       	ldd	r19, Y+4	; 0x04
    2108:	2f 30       	cpi	r18, 0x0F	; 15
    210a:	31 05       	cpc	r19, r1
    210c:	79 f1       	breq	.+94     	; 0x216c <KEYPAD_4x4_adjustKeyNumber+0x12e>
    210e:	8b 81       	ldd	r24, Y+3	; 0x03
    2110:	9c 81       	ldd	r25, Y+4	; 0x04
    2112:	80 31       	cpi	r24, 0x10	; 16
    2114:	91 05       	cpc	r25, r1
    2116:	69 f1       	breq	.+90     	; 0x2172 <KEYPAD_4x4_adjustKeyNumber+0x134>
    2118:	2f c0       	rjmp	.+94     	; 0x2178 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    211a:	87 e0       	ldi	r24, 0x07	; 7
    211c:	89 83       	std	Y+1, r24	; 0x01
    211e:	2e c0       	rjmp	.+92     	; 0x217c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    2120:	88 e0       	ldi	r24, 0x08	; 8
    2122:	89 83       	std	Y+1, r24	; 0x01
    2124:	2b c0       	rjmp	.+86     	; 0x217c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    2126:	89 e0       	ldi	r24, 0x09	; 9
    2128:	89 83       	std	Y+1, r24	; 0x01
    212a:	28 c0       	rjmp	.+80     	; 0x217c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    212c:	85 e2       	ldi	r24, 0x25	; 37
    212e:	89 83       	std	Y+1, r24	; 0x01
    2130:	25 c0       	rjmp	.+74     	; 0x217c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    2132:	84 e0       	ldi	r24, 0x04	; 4
    2134:	89 83       	std	Y+1, r24	; 0x01
    2136:	22 c0       	rjmp	.+68     	; 0x217c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    2138:	85 e0       	ldi	r24, 0x05	; 5
    213a:	89 83       	std	Y+1, r24	; 0x01
    213c:	1f c0       	rjmp	.+62     	; 0x217c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    213e:	86 e0       	ldi	r24, 0x06	; 6
    2140:	89 83       	std	Y+1, r24	; 0x01
    2142:	1c c0       	rjmp	.+56     	; 0x217c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    2144:	8a e2       	ldi	r24, 0x2A	; 42
    2146:	89 83       	std	Y+1, r24	; 0x01
    2148:	19 c0       	rjmp	.+50     	; 0x217c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 9: keypad_button = 1;
    214a:	81 e0       	ldi	r24, 0x01	; 1
    214c:	89 83       	std	Y+1, r24	; 0x01
    214e:	16 c0       	rjmp	.+44     	; 0x217c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    2150:	82 e0       	ldi	r24, 0x02	; 2
    2152:	89 83       	std	Y+1, r24	; 0x01
    2154:	13 c0       	rjmp	.+38     	; 0x217c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    2156:	83 e0       	ldi	r24, 0x03	; 3
    2158:	89 83       	std	Y+1, r24	; 0x01
    215a:	10 c0       	rjmp	.+32     	; 0x217c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    215c:	8d e2       	ldi	r24, 0x2D	; 45
    215e:	89 83       	std	Y+1, r24	; 0x01
    2160:	0d c0       	rjmp	.+26     	; 0x217c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    2162:	8d e0       	ldi	r24, 0x0D	; 13
    2164:	89 83       	std	Y+1, r24	; 0x01
    2166:	0a c0       	rjmp	.+20     	; 0x217c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 14: keypad_button = 0;
    2168:	19 82       	std	Y+1, r1	; 0x01
    216a:	08 c0       	rjmp	.+16     	; 0x217c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    216c:	8d e3       	ldi	r24, 0x3D	; 61
    216e:	89 83       	std	Y+1, r24	; 0x01
    2170:	05 c0       	rjmp	.+10     	; 0x217c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    2172:	8b e2       	ldi	r24, 0x2B	; 43
    2174:	89 83       	std	Y+1, r24	; 0x01
    2176:	02 c0       	rjmp	.+4      	; 0x217c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    2178:	8a 81       	ldd	r24, Y+2	; 0x02
    217a:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    217c:	89 81       	ldd	r24, Y+1	; 0x01
}
    217e:	0f 90       	pop	r0
    2180:	0f 90       	pop	r0
    2182:	0f 90       	pop	r0
    2184:	0f 90       	pop	r0
    2186:	cf 91       	pop	r28
    2188:	df 91       	pop	r29
    218a:	08 95       	ret

0000218c <LCD_init>:
                      2. Setup the LCD Data Mode 4-bits or 8-bits.
 *[ARGUMENTS]		: void
 *[RETURNS]			: void
 */
void LCD_init(void)
{
    218c:	df 93       	push	r29
    218e:	cf 93       	push	r28
    2190:	cd b7       	in	r28, 0x3d	; 61
    2192:	de b7       	in	r29, 0x3e	; 62
    2194:	2e 97       	sbiw	r28, 0x0e	; 14
    2196:	0f b6       	in	r0, 0x3f	; 63
    2198:	f8 94       	cli
    219a:	de bf       	out	0x3e, r29	; 62
    219c:	0f be       	out	0x3f, r0	; 63
    219e:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction of RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    21a0:	83 e0       	ldi	r24, 0x03	; 3
    21a2:	62 e0       	ldi	r22, 0x02	; 2
    21a4:	41 e0       	ldi	r20, 0x01	; 1
    21a6:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    21aa:	83 e0       	ldi	r24, 0x03	; 3
    21ac:	63 e0       	ldi	r22, 0x03	; 3
    21ae:	41 e0       	ldi	r20, 0x01	; 1
    21b0:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
    21b4:	80 e0       	ldi	r24, 0x00	; 0
    21b6:	90 e0       	ldi	r25, 0x00	; 0
    21b8:	a0 ea       	ldi	r26, 0xA0	; 160
    21ba:	b1 e4       	ldi	r27, 0x41	; 65
    21bc:	8b 87       	std	Y+11, r24	; 0x0b
    21be:	9c 87       	std	Y+12, r25	; 0x0c
    21c0:	ad 87       	std	Y+13, r26	; 0x0d
    21c2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    21c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    21c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    21ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    21cc:	20 e0       	ldi	r18, 0x00	; 0
    21ce:	30 e0       	ldi	r19, 0x00	; 0
    21d0:	4a ef       	ldi	r20, 0xFA	; 250
    21d2:	54 e4       	ldi	r21, 0x44	; 68
    21d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21d8:	dc 01       	movw	r26, r24
    21da:	cb 01       	movw	r24, r22
    21dc:	8f 83       	std	Y+7, r24	; 0x07
    21de:	98 87       	std	Y+8, r25	; 0x08
    21e0:	a9 87       	std	Y+9, r26	; 0x09
    21e2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21e4:	6f 81       	ldd	r22, Y+7	; 0x07
    21e6:	78 85       	ldd	r23, Y+8	; 0x08
    21e8:	89 85       	ldd	r24, Y+9	; 0x09
    21ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    21ec:	20 e0       	ldi	r18, 0x00	; 0
    21ee:	30 e0       	ldi	r19, 0x00	; 0
    21f0:	40 e8       	ldi	r20, 0x80	; 128
    21f2:	5f e3       	ldi	r21, 0x3F	; 63
    21f4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21f8:	88 23       	and	r24, r24
    21fa:	2c f4       	brge	.+10     	; 0x2206 <LCD_init+0x7a>
		__ticks = 1;
    21fc:	81 e0       	ldi	r24, 0x01	; 1
    21fe:	90 e0       	ldi	r25, 0x00	; 0
    2200:	9e 83       	std	Y+6, r25	; 0x06
    2202:	8d 83       	std	Y+5, r24	; 0x05
    2204:	3f c0       	rjmp	.+126    	; 0x2284 <LCD_init+0xf8>
	else if (__tmp > 65535)
    2206:	6f 81       	ldd	r22, Y+7	; 0x07
    2208:	78 85       	ldd	r23, Y+8	; 0x08
    220a:	89 85       	ldd	r24, Y+9	; 0x09
    220c:	9a 85       	ldd	r25, Y+10	; 0x0a
    220e:	20 e0       	ldi	r18, 0x00	; 0
    2210:	3f ef       	ldi	r19, 0xFF	; 255
    2212:	4f e7       	ldi	r20, 0x7F	; 127
    2214:	57 e4       	ldi	r21, 0x47	; 71
    2216:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    221a:	18 16       	cp	r1, r24
    221c:	4c f5       	brge	.+82     	; 0x2270 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    221e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2220:	7c 85       	ldd	r23, Y+12	; 0x0c
    2222:	8d 85       	ldd	r24, Y+13	; 0x0d
    2224:	9e 85       	ldd	r25, Y+14	; 0x0e
    2226:	20 e0       	ldi	r18, 0x00	; 0
    2228:	30 e0       	ldi	r19, 0x00	; 0
    222a:	40 e2       	ldi	r20, 0x20	; 32
    222c:	51 e4       	ldi	r21, 0x41	; 65
    222e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2232:	dc 01       	movw	r26, r24
    2234:	cb 01       	movw	r24, r22
    2236:	bc 01       	movw	r22, r24
    2238:	cd 01       	movw	r24, r26
    223a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    223e:	dc 01       	movw	r26, r24
    2240:	cb 01       	movw	r24, r22
    2242:	9e 83       	std	Y+6, r25	; 0x06
    2244:	8d 83       	std	Y+5, r24	; 0x05
    2246:	0f c0       	rjmp	.+30     	; 0x2266 <LCD_init+0xda>
    2248:	88 ec       	ldi	r24, 0xC8	; 200
    224a:	90 e0       	ldi	r25, 0x00	; 0
    224c:	9c 83       	std	Y+4, r25	; 0x04
    224e:	8b 83       	std	Y+3, r24	; 0x03
    2250:	8b 81       	ldd	r24, Y+3	; 0x03
    2252:	9c 81       	ldd	r25, Y+4	; 0x04
    2254:	01 97       	sbiw	r24, 0x01	; 1
    2256:	f1 f7       	brne	.-4      	; 0x2254 <LCD_init+0xc8>
    2258:	9c 83       	std	Y+4, r25	; 0x04
    225a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    225c:	8d 81       	ldd	r24, Y+5	; 0x05
    225e:	9e 81       	ldd	r25, Y+6	; 0x06
    2260:	01 97       	sbiw	r24, 0x01	; 1
    2262:	9e 83       	std	Y+6, r25	; 0x06
    2264:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2266:	8d 81       	ldd	r24, Y+5	; 0x05
    2268:	9e 81       	ldd	r25, Y+6	; 0x06
    226a:	00 97       	sbiw	r24, 0x00	; 0
    226c:	69 f7       	brne	.-38     	; 0x2248 <LCD_init+0xbc>
    226e:	14 c0       	rjmp	.+40     	; 0x2298 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2270:	6f 81       	ldd	r22, Y+7	; 0x07
    2272:	78 85       	ldd	r23, Y+8	; 0x08
    2274:	89 85       	ldd	r24, Y+9	; 0x09
    2276:	9a 85       	ldd	r25, Y+10	; 0x0a
    2278:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    227c:	dc 01       	movw	r26, r24
    227e:	cb 01       	movw	r24, r22
    2280:	9e 83       	std	Y+6, r25	; 0x06
    2282:	8d 83       	std	Y+5, r24	; 0x05
    2284:	8d 81       	ldd	r24, Y+5	; 0x05
    2286:	9e 81       	ldd	r25, Y+6	; 0x06
    2288:	9a 83       	std	Y+2, r25	; 0x02
    228a:	89 83       	std	Y+1, r24	; 0x01
    228c:	89 81       	ldd	r24, Y+1	; 0x01
    228e:	9a 81       	ldd	r25, Y+2	; 0x02
    2290:	01 97       	sbiw	r24, 0x01	; 1
    2292:	f1 f7       	brne	.-4      	; 0x2290 <LCD_init+0x104>
    2294:	9a 83       	std	Y+2, r25	; 0x02
    2296:	89 83       	std	Y+1, r24	; 0x01
	/* Use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    2298:	82 e0       	ldi	r24, 0x02	; 2
    229a:	6f ef       	ldi	r22, 0xFF	; 255
    229c:	0e 94 14 08 	call	0x1028	; 0x1028 <GPIO_setupPortDirection>

	/* Use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    22a0:	88 e3       	ldi	r24, 0x38	; 56
    22a2:	0e 94 62 11 	call	0x22c4	; 0x22c4 <LCD_sendCommand>

#endif
	LCD_sendCommand(LCD_CURSOR_OFF); /* Cursor OFF */
    22a6:	8c e0       	ldi	r24, 0x0C	; 12
    22a8:	0e 94 62 11 	call	0x22c4	; 0x22c4 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Clear LCD at the beginning */
    22ac:	81 e0       	ldi	r24, 0x01	; 1
    22ae:	0e 94 62 11 	call	0x22c4	; 0x22c4 <LCD_sendCommand>

}
    22b2:	2e 96       	adiw	r28, 0x0e	; 14
    22b4:	0f b6       	in	r0, 0x3f	; 63
    22b6:	f8 94       	cli
    22b8:	de bf       	out	0x3e, r29	; 62
    22ba:	0f be       	out	0x3f, r0	; 63
    22bc:	cd bf       	out	0x3d, r28	; 61
    22be:	cf 91       	pop	r28
    22c0:	df 91       	pop	r29
    22c2:	08 95       	ret

000022c4 <LCD_sendCommand>:
 *[DESCRIPTION]		: Send the required command to the screen
 *[ARGUMENTS]		: command of type uint8
 *[RETURNS]			: void
 */
void LCD_sendCommand(uint8 cmd)
{
    22c4:	df 93       	push	r29
    22c6:	cf 93       	push	r28
    22c8:	cd b7       	in	r28, 0x3d	; 61
    22ca:	de b7       	in	r29, 0x3e	; 62
    22cc:	e9 97       	sbiw	r28, 0x39	; 57
    22ce:	0f b6       	in	r0, 0x3f	; 63
    22d0:	f8 94       	cli
    22d2:	de bf       	out	0x3e, r29	; 62
    22d4:	0f be       	out	0x3f, r0	; 63
    22d6:	cd bf       	out	0x3d, r28	; 61
    22d8:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction mode -> RS = 0 */
    22da:	83 e0       	ldi	r24, 0x03	; 3
    22dc:	62 e0       	ldi	r22, 0x02	; 2
    22de:	40 e0       	ldi	r20, 0x00	; 0
    22e0:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    22e4:	80 e0       	ldi	r24, 0x00	; 0
    22e6:	90 e0       	ldi	r25, 0x00	; 0
    22e8:	a0 e8       	ldi	r26, 0x80	; 128
    22ea:	bf e3       	ldi	r27, 0x3F	; 63
    22ec:	8d ab       	std	Y+53, r24	; 0x35
    22ee:	9e ab       	std	Y+54, r25	; 0x36
    22f0:	af ab       	std	Y+55, r26	; 0x37
    22f2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22f4:	6d a9       	ldd	r22, Y+53	; 0x35
    22f6:	7e a9       	ldd	r23, Y+54	; 0x36
    22f8:	8f a9       	ldd	r24, Y+55	; 0x37
    22fa:	98 ad       	ldd	r25, Y+56	; 0x38
    22fc:	20 e0       	ldi	r18, 0x00	; 0
    22fe:	30 e0       	ldi	r19, 0x00	; 0
    2300:	4a ef       	ldi	r20, 0xFA	; 250
    2302:	54 e4       	ldi	r21, 0x44	; 68
    2304:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2308:	dc 01       	movw	r26, r24
    230a:	cb 01       	movw	r24, r22
    230c:	89 ab       	std	Y+49, r24	; 0x31
    230e:	9a ab       	std	Y+50, r25	; 0x32
    2310:	ab ab       	std	Y+51, r26	; 0x33
    2312:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2314:	69 a9       	ldd	r22, Y+49	; 0x31
    2316:	7a a9       	ldd	r23, Y+50	; 0x32
    2318:	8b a9       	ldd	r24, Y+51	; 0x33
    231a:	9c a9       	ldd	r25, Y+52	; 0x34
    231c:	20 e0       	ldi	r18, 0x00	; 0
    231e:	30 e0       	ldi	r19, 0x00	; 0
    2320:	40 e8       	ldi	r20, 0x80	; 128
    2322:	5f e3       	ldi	r21, 0x3F	; 63
    2324:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2328:	88 23       	and	r24, r24
    232a:	2c f4       	brge	.+10     	; 0x2336 <LCD_sendCommand+0x72>
		__ticks = 1;
    232c:	81 e0       	ldi	r24, 0x01	; 1
    232e:	90 e0       	ldi	r25, 0x00	; 0
    2330:	98 ab       	std	Y+48, r25	; 0x30
    2332:	8f a7       	std	Y+47, r24	; 0x2f
    2334:	3f c0       	rjmp	.+126    	; 0x23b4 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    2336:	69 a9       	ldd	r22, Y+49	; 0x31
    2338:	7a a9       	ldd	r23, Y+50	; 0x32
    233a:	8b a9       	ldd	r24, Y+51	; 0x33
    233c:	9c a9       	ldd	r25, Y+52	; 0x34
    233e:	20 e0       	ldi	r18, 0x00	; 0
    2340:	3f ef       	ldi	r19, 0xFF	; 255
    2342:	4f e7       	ldi	r20, 0x7F	; 127
    2344:	57 e4       	ldi	r21, 0x47	; 71
    2346:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    234a:	18 16       	cp	r1, r24
    234c:	4c f5       	brge	.+82     	; 0x23a0 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    234e:	6d a9       	ldd	r22, Y+53	; 0x35
    2350:	7e a9       	ldd	r23, Y+54	; 0x36
    2352:	8f a9       	ldd	r24, Y+55	; 0x37
    2354:	98 ad       	ldd	r25, Y+56	; 0x38
    2356:	20 e0       	ldi	r18, 0x00	; 0
    2358:	30 e0       	ldi	r19, 0x00	; 0
    235a:	40 e2       	ldi	r20, 0x20	; 32
    235c:	51 e4       	ldi	r21, 0x41	; 65
    235e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2362:	dc 01       	movw	r26, r24
    2364:	cb 01       	movw	r24, r22
    2366:	bc 01       	movw	r22, r24
    2368:	cd 01       	movw	r24, r26
    236a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    236e:	dc 01       	movw	r26, r24
    2370:	cb 01       	movw	r24, r22
    2372:	98 ab       	std	Y+48, r25	; 0x30
    2374:	8f a7       	std	Y+47, r24	; 0x2f
    2376:	0f c0       	rjmp	.+30     	; 0x2396 <LCD_sendCommand+0xd2>
    2378:	88 ec       	ldi	r24, 0xC8	; 200
    237a:	90 e0       	ldi	r25, 0x00	; 0
    237c:	9e a7       	std	Y+46, r25	; 0x2e
    237e:	8d a7       	std	Y+45, r24	; 0x2d
    2380:	8d a5       	ldd	r24, Y+45	; 0x2d
    2382:	9e a5       	ldd	r25, Y+46	; 0x2e
    2384:	01 97       	sbiw	r24, 0x01	; 1
    2386:	f1 f7       	brne	.-4      	; 0x2384 <LCD_sendCommand+0xc0>
    2388:	9e a7       	std	Y+46, r25	; 0x2e
    238a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    238c:	8f a5       	ldd	r24, Y+47	; 0x2f
    238e:	98 a9       	ldd	r25, Y+48	; 0x30
    2390:	01 97       	sbiw	r24, 0x01	; 1
    2392:	98 ab       	std	Y+48, r25	; 0x30
    2394:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2396:	8f a5       	ldd	r24, Y+47	; 0x2f
    2398:	98 a9       	ldd	r25, Y+48	; 0x30
    239a:	00 97       	sbiw	r24, 0x00	; 0
    239c:	69 f7       	brne	.-38     	; 0x2378 <LCD_sendCommand+0xb4>
    239e:	14 c0       	rjmp	.+40     	; 0x23c8 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23a0:	69 a9       	ldd	r22, Y+49	; 0x31
    23a2:	7a a9       	ldd	r23, Y+50	; 0x32
    23a4:	8b a9       	ldd	r24, Y+51	; 0x33
    23a6:	9c a9       	ldd	r25, Y+52	; 0x34
    23a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ac:	dc 01       	movw	r26, r24
    23ae:	cb 01       	movw	r24, r22
    23b0:	98 ab       	std	Y+48, r25	; 0x30
    23b2:	8f a7       	std	Y+47, r24	; 0x2f
    23b4:	8f a5       	ldd	r24, Y+47	; 0x2f
    23b6:	98 a9       	ldd	r25, Y+48	; 0x30
    23b8:	9c a7       	std	Y+44, r25	; 0x2c
    23ba:	8b a7       	std	Y+43, r24	; 0x2b
    23bc:	8b a5       	ldd	r24, Y+43	; 0x2b
    23be:	9c a5       	ldd	r25, Y+44	; 0x2c
    23c0:	01 97       	sbiw	r24, 0x01	; 1
    23c2:	f1 f7       	brne	.-4      	; 0x23c0 <LCD_sendCommand+0xfc>
    23c4:	9c a7       	std	Y+44, r25	; 0x2c
    23c6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E = 1 */
    23c8:	83 e0       	ldi	r24, 0x03	; 3
    23ca:	63 e0       	ldi	r22, 0x03	; 3
    23cc:	41 e0       	ldi	r20, 0x01	; 1
    23ce:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    23d2:	80 e0       	ldi	r24, 0x00	; 0
    23d4:	90 e0       	ldi	r25, 0x00	; 0
    23d6:	a0 e8       	ldi	r26, 0x80	; 128
    23d8:	bf e3       	ldi	r27, 0x3F	; 63
    23da:	8f a3       	std	Y+39, r24	; 0x27
    23dc:	98 a7       	std	Y+40, r25	; 0x28
    23de:	a9 a7       	std	Y+41, r26	; 0x29
    23e0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23e2:	6f a1       	ldd	r22, Y+39	; 0x27
    23e4:	78 a5       	ldd	r23, Y+40	; 0x28
    23e6:	89 a5       	ldd	r24, Y+41	; 0x29
    23e8:	9a a5       	ldd	r25, Y+42	; 0x2a
    23ea:	20 e0       	ldi	r18, 0x00	; 0
    23ec:	30 e0       	ldi	r19, 0x00	; 0
    23ee:	4a ef       	ldi	r20, 0xFA	; 250
    23f0:	54 e4       	ldi	r21, 0x44	; 68
    23f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23f6:	dc 01       	movw	r26, r24
    23f8:	cb 01       	movw	r24, r22
    23fa:	8b a3       	std	Y+35, r24	; 0x23
    23fc:	9c a3       	std	Y+36, r25	; 0x24
    23fe:	ad a3       	std	Y+37, r26	; 0x25
    2400:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2402:	6b a1       	ldd	r22, Y+35	; 0x23
    2404:	7c a1       	ldd	r23, Y+36	; 0x24
    2406:	8d a1       	ldd	r24, Y+37	; 0x25
    2408:	9e a1       	ldd	r25, Y+38	; 0x26
    240a:	20 e0       	ldi	r18, 0x00	; 0
    240c:	30 e0       	ldi	r19, 0x00	; 0
    240e:	40 e8       	ldi	r20, 0x80	; 128
    2410:	5f e3       	ldi	r21, 0x3F	; 63
    2412:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2416:	88 23       	and	r24, r24
    2418:	2c f4       	brge	.+10     	; 0x2424 <LCD_sendCommand+0x160>
		__ticks = 1;
    241a:	81 e0       	ldi	r24, 0x01	; 1
    241c:	90 e0       	ldi	r25, 0x00	; 0
    241e:	9a a3       	std	Y+34, r25	; 0x22
    2420:	89 a3       	std	Y+33, r24	; 0x21
    2422:	3f c0       	rjmp	.+126    	; 0x24a2 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    2424:	6b a1       	ldd	r22, Y+35	; 0x23
    2426:	7c a1       	ldd	r23, Y+36	; 0x24
    2428:	8d a1       	ldd	r24, Y+37	; 0x25
    242a:	9e a1       	ldd	r25, Y+38	; 0x26
    242c:	20 e0       	ldi	r18, 0x00	; 0
    242e:	3f ef       	ldi	r19, 0xFF	; 255
    2430:	4f e7       	ldi	r20, 0x7F	; 127
    2432:	57 e4       	ldi	r21, 0x47	; 71
    2434:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2438:	18 16       	cp	r1, r24
    243a:	4c f5       	brge	.+82     	; 0x248e <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    243c:	6f a1       	ldd	r22, Y+39	; 0x27
    243e:	78 a5       	ldd	r23, Y+40	; 0x28
    2440:	89 a5       	ldd	r24, Y+41	; 0x29
    2442:	9a a5       	ldd	r25, Y+42	; 0x2a
    2444:	20 e0       	ldi	r18, 0x00	; 0
    2446:	30 e0       	ldi	r19, 0x00	; 0
    2448:	40 e2       	ldi	r20, 0x20	; 32
    244a:	51 e4       	ldi	r21, 0x41	; 65
    244c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2450:	dc 01       	movw	r26, r24
    2452:	cb 01       	movw	r24, r22
    2454:	bc 01       	movw	r22, r24
    2456:	cd 01       	movw	r24, r26
    2458:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    245c:	dc 01       	movw	r26, r24
    245e:	cb 01       	movw	r24, r22
    2460:	9a a3       	std	Y+34, r25	; 0x22
    2462:	89 a3       	std	Y+33, r24	; 0x21
    2464:	0f c0       	rjmp	.+30     	; 0x2484 <LCD_sendCommand+0x1c0>
    2466:	88 ec       	ldi	r24, 0xC8	; 200
    2468:	90 e0       	ldi	r25, 0x00	; 0
    246a:	98 a3       	std	Y+32, r25	; 0x20
    246c:	8f 8f       	std	Y+31, r24	; 0x1f
    246e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2470:	98 a1       	ldd	r25, Y+32	; 0x20
    2472:	01 97       	sbiw	r24, 0x01	; 1
    2474:	f1 f7       	brne	.-4      	; 0x2472 <LCD_sendCommand+0x1ae>
    2476:	98 a3       	std	Y+32, r25	; 0x20
    2478:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    247a:	89 a1       	ldd	r24, Y+33	; 0x21
    247c:	9a a1       	ldd	r25, Y+34	; 0x22
    247e:	01 97       	sbiw	r24, 0x01	; 1
    2480:	9a a3       	std	Y+34, r25	; 0x22
    2482:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2484:	89 a1       	ldd	r24, Y+33	; 0x21
    2486:	9a a1       	ldd	r25, Y+34	; 0x22
    2488:	00 97       	sbiw	r24, 0x00	; 0
    248a:	69 f7       	brne	.-38     	; 0x2466 <LCD_sendCommand+0x1a2>
    248c:	14 c0       	rjmp	.+40     	; 0x24b6 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    248e:	6b a1       	ldd	r22, Y+35	; 0x23
    2490:	7c a1       	ldd	r23, Y+36	; 0x24
    2492:	8d a1       	ldd	r24, Y+37	; 0x25
    2494:	9e a1       	ldd	r25, Y+38	; 0x26
    2496:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    249a:	dc 01       	movw	r26, r24
    249c:	cb 01       	movw	r24, r22
    249e:	9a a3       	std	Y+34, r25	; 0x22
    24a0:	89 a3       	std	Y+33, r24	; 0x21
    24a2:	89 a1       	ldd	r24, Y+33	; 0x21
    24a4:	9a a1       	ldd	r25, Y+34	; 0x22
    24a6:	9e 8f       	std	Y+30, r25	; 0x1e
    24a8:	8d 8f       	std	Y+29, r24	; 0x1d
    24aa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    24ac:	9e 8d       	ldd	r25, Y+30	; 0x1e
    24ae:	01 97       	sbiw	r24, 0x01	; 1
    24b0:	f1 f7       	brne	.-4      	; 0x24ae <LCD_sendCommand+0x1ea>
    24b2:	9e 8f       	std	Y+30, r25	; 0x1e
    24b4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,cmd); /* Write the required command to the data bus D0 --> D7 */
    24b6:	82 e0       	ldi	r24, 0x02	; 2
    24b8:	69 ad       	ldd	r22, Y+57	; 0x39
    24ba:	0e 94 58 08 	call	0x10b0	; 0x10b0 <GPIO_writePort>
    24be:	80 e0       	ldi	r24, 0x00	; 0
    24c0:	90 e0       	ldi	r25, 0x00	; 0
    24c2:	a0 e8       	ldi	r26, 0x80	; 128
    24c4:	bf e3       	ldi	r27, 0x3F	; 63
    24c6:	89 8f       	std	Y+25, r24	; 0x19
    24c8:	9a 8f       	std	Y+26, r25	; 0x1a
    24ca:	ab 8f       	std	Y+27, r26	; 0x1b
    24cc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24ce:	69 8d       	ldd	r22, Y+25	; 0x19
    24d0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24d2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24d4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24d6:	20 e0       	ldi	r18, 0x00	; 0
    24d8:	30 e0       	ldi	r19, 0x00	; 0
    24da:	4a ef       	ldi	r20, 0xFA	; 250
    24dc:	54 e4       	ldi	r21, 0x44	; 68
    24de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24e2:	dc 01       	movw	r26, r24
    24e4:	cb 01       	movw	r24, r22
    24e6:	8d 8b       	std	Y+21, r24	; 0x15
    24e8:	9e 8b       	std	Y+22, r25	; 0x16
    24ea:	af 8b       	std	Y+23, r26	; 0x17
    24ec:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    24ee:	6d 89       	ldd	r22, Y+21	; 0x15
    24f0:	7e 89       	ldd	r23, Y+22	; 0x16
    24f2:	8f 89       	ldd	r24, Y+23	; 0x17
    24f4:	98 8d       	ldd	r25, Y+24	; 0x18
    24f6:	20 e0       	ldi	r18, 0x00	; 0
    24f8:	30 e0       	ldi	r19, 0x00	; 0
    24fa:	40 e8       	ldi	r20, 0x80	; 128
    24fc:	5f e3       	ldi	r21, 0x3F	; 63
    24fe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2502:	88 23       	and	r24, r24
    2504:	2c f4       	brge	.+10     	; 0x2510 <LCD_sendCommand+0x24c>
		__ticks = 1;
    2506:	81 e0       	ldi	r24, 0x01	; 1
    2508:	90 e0       	ldi	r25, 0x00	; 0
    250a:	9c 8b       	std	Y+20, r25	; 0x14
    250c:	8b 8b       	std	Y+19, r24	; 0x13
    250e:	3f c0       	rjmp	.+126    	; 0x258e <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    2510:	6d 89       	ldd	r22, Y+21	; 0x15
    2512:	7e 89       	ldd	r23, Y+22	; 0x16
    2514:	8f 89       	ldd	r24, Y+23	; 0x17
    2516:	98 8d       	ldd	r25, Y+24	; 0x18
    2518:	20 e0       	ldi	r18, 0x00	; 0
    251a:	3f ef       	ldi	r19, 0xFF	; 255
    251c:	4f e7       	ldi	r20, 0x7F	; 127
    251e:	57 e4       	ldi	r21, 0x47	; 71
    2520:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2524:	18 16       	cp	r1, r24
    2526:	4c f5       	brge	.+82     	; 0x257a <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2528:	69 8d       	ldd	r22, Y+25	; 0x19
    252a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    252c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    252e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2530:	20 e0       	ldi	r18, 0x00	; 0
    2532:	30 e0       	ldi	r19, 0x00	; 0
    2534:	40 e2       	ldi	r20, 0x20	; 32
    2536:	51 e4       	ldi	r21, 0x41	; 65
    2538:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    253c:	dc 01       	movw	r26, r24
    253e:	cb 01       	movw	r24, r22
    2540:	bc 01       	movw	r22, r24
    2542:	cd 01       	movw	r24, r26
    2544:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2548:	dc 01       	movw	r26, r24
    254a:	cb 01       	movw	r24, r22
    254c:	9c 8b       	std	Y+20, r25	; 0x14
    254e:	8b 8b       	std	Y+19, r24	; 0x13
    2550:	0f c0       	rjmp	.+30     	; 0x2570 <LCD_sendCommand+0x2ac>
    2552:	88 ec       	ldi	r24, 0xC8	; 200
    2554:	90 e0       	ldi	r25, 0x00	; 0
    2556:	9a 8b       	std	Y+18, r25	; 0x12
    2558:	89 8b       	std	Y+17, r24	; 0x11
    255a:	89 89       	ldd	r24, Y+17	; 0x11
    255c:	9a 89       	ldd	r25, Y+18	; 0x12
    255e:	01 97       	sbiw	r24, 0x01	; 1
    2560:	f1 f7       	brne	.-4      	; 0x255e <LCD_sendCommand+0x29a>
    2562:	9a 8b       	std	Y+18, r25	; 0x12
    2564:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2566:	8b 89       	ldd	r24, Y+19	; 0x13
    2568:	9c 89       	ldd	r25, Y+20	; 0x14
    256a:	01 97       	sbiw	r24, 0x01	; 1
    256c:	9c 8b       	std	Y+20, r25	; 0x14
    256e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2570:	8b 89       	ldd	r24, Y+19	; 0x13
    2572:	9c 89       	ldd	r25, Y+20	; 0x14
    2574:	00 97       	sbiw	r24, 0x00	; 0
    2576:	69 f7       	brne	.-38     	; 0x2552 <LCD_sendCommand+0x28e>
    2578:	14 c0       	rjmp	.+40     	; 0x25a2 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    257a:	6d 89       	ldd	r22, Y+21	; 0x15
    257c:	7e 89       	ldd	r23, Y+22	; 0x16
    257e:	8f 89       	ldd	r24, Y+23	; 0x17
    2580:	98 8d       	ldd	r25, Y+24	; 0x18
    2582:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2586:	dc 01       	movw	r26, r24
    2588:	cb 01       	movw	r24, r22
    258a:	9c 8b       	std	Y+20, r25	; 0x14
    258c:	8b 8b       	std	Y+19, r24	; 0x13
    258e:	8b 89       	ldd	r24, Y+19	; 0x13
    2590:	9c 89       	ldd	r25, Y+20	; 0x14
    2592:	98 8b       	std	Y+16, r25	; 0x10
    2594:	8f 87       	std	Y+15, r24	; 0x0f
    2596:	8f 85       	ldd	r24, Y+15	; 0x0f
    2598:	98 89       	ldd	r25, Y+16	; 0x10
    259a:	01 97       	sbiw	r24, 0x01	; 1
    259c:	f1 f7       	brne	.-4      	; 0x259a <LCD_sendCommand+0x2d6>
    259e:	98 8b       	std	Y+16, r25	; 0x10
    25a0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    25a2:	83 e0       	ldi	r24, 0x03	; 3
    25a4:	63 e0       	ldi	r22, 0x03	; 3
    25a6:	40 e0       	ldi	r20, 0x00	; 0
    25a8:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    25ac:	80 e0       	ldi	r24, 0x00	; 0
    25ae:	90 e0       	ldi	r25, 0x00	; 0
    25b0:	a0 e8       	ldi	r26, 0x80	; 128
    25b2:	bf e3       	ldi	r27, 0x3F	; 63
    25b4:	8b 87       	std	Y+11, r24	; 0x0b
    25b6:	9c 87       	std	Y+12, r25	; 0x0c
    25b8:	ad 87       	std	Y+13, r26	; 0x0d
    25ba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    25be:	7c 85       	ldd	r23, Y+12	; 0x0c
    25c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    25c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    25c4:	20 e0       	ldi	r18, 0x00	; 0
    25c6:	30 e0       	ldi	r19, 0x00	; 0
    25c8:	4a ef       	ldi	r20, 0xFA	; 250
    25ca:	54 e4       	ldi	r21, 0x44	; 68
    25cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25d0:	dc 01       	movw	r26, r24
    25d2:	cb 01       	movw	r24, r22
    25d4:	8f 83       	std	Y+7, r24	; 0x07
    25d6:	98 87       	std	Y+8, r25	; 0x08
    25d8:	a9 87       	std	Y+9, r26	; 0x09
    25da:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25dc:	6f 81       	ldd	r22, Y+7	; 0x07
    25de:	78 85       	ldd	r23, Y+8	; 0x08
    25e0:	89 85       	ldd	r24, Y+9	; 0x09
    25e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    25e4:	20 e0       	ldi	r18, 0x00	; 0
    25e6:	30 e0       	ldi	r19, 0x00	; 0
    25e8:	40 e8       	ldi	r20, 0x80	; 128
    25ea:	5f e3       	ldi	r21, 0x3F	; 63
    25ec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25f0:	88 23       	and	r24, r24
    25f2:	2c f4       	brge	.+10     	; 0x25fe <LCD_sendCommand+0x33a>
		__ticks = 1;
    25f4:	81 e0       	ldi	r24, 0x01	; 1
    25f6:	90 e0       	ldi	r25, 0x00	; 0
    25f8:	9e 83       	std	Y+6, r25	; 0x06
    25fa:	8d 83       	std	Y+5, r24	; 0x05
    25fc:	3f c0       	rjmp	.+126    	; 0x267c <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    25fe:	6f 81       	ldd	r22, Y+7	; 0x07
    2600:	78 85       	ldd	r23, Y+8	; 0x08
    2602:	89 85       	ldd	r24, Y+9	; 0x09
    2604:	9a 85       	ldd	r25, Y+10	; 0x0a
    2606:	20 e0       	ldi	r18, 0x00	; 0
    2608:	3f ef       	ldi	r19, 0xFF	; 255
    260a:	4f e7       	ldi	r20, 0x7F	; 127
    260c:	57 e4       	ldi	r21, 0x47	; 71
    260e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2612:	18 16       	cp	r1, r24
    2614:	4c f5       	brge	.+82     	; 0x2668 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2616:	6b 85       	ldd	r22, Y+11	; 0x0b
    2618:	7c 85       	ldd	r23, Y+12	; 0x0c
    261a:	8d 85       	ldd	r24, Y+13	; 0x0d
    261c:	9e 85       	ldd	r25, Y+14	; 0x0e
    261e:	20 e0       	ldi	r18, 0x00	; 0
    2620:	30 e0       	ldi	r19, 0x00	; 0
    2622:	40 e2       	ldi	r20, 0x20	; 32
    2624:	51 e4       	ldi	r21, 0x41	; 65
    2626:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    262a:	dc 01       	movw	r26, r24
    262c:	cb 01       	movw	r24, r22
    262e:	bc 01       	movw	r22, r24
    2630:	cd 01       	movw	r24, r26
    2632:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2636:	dc 01       	movw	r26, r24
    2638:	cb 01       	movw	r24, r22
    263a:	9e 83       	std	Y+6, r25	; 0x06
    263c:	8d 83       	std	Y+5, r24	; 0x05
    263e:	0f c0       	rjmp	.+30     	; 0x265e <LCD_sendCommand+0x39a>
    2640:	88 ec       	ldi	r24, 0xC8	; 200
    2642:	90 e0       	ldi	r25, 0x00	; 0
    2644:	9c 83       	std	Y+4, r25	; 0x04
    2646:	8b 83       	std	Y+3, r24	; 0x03
    2648:	8b 81       	ldd	r24, Y+3	; 0x03
    264a:	9c 81       	ldd	r25, Y+4	; 0x04
    264c:	01 97       	sbiw	r24, 0x01	; 1
    264e:	f1 f7       	brne	.-4      	; 0x264c <LCD_sendCommand+0x388>
    2650:	9c 83       	std	Y+4, r25	; 0x04
    2652:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2654:	8d 81       	ldd	r24, Y+5	; 0x05
    2656:	9e 81       	ldd	r25, Y+6	; 0x06
    2658:	01 97       	sbiw	r24, 0x01	; 1
    265a:	9e 83       	std	Y+6, r25	; 0x06
    265c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    265e:	8d 81       	ldd	r24, Y+5	; 0x05
    2660:	9e 81       	ldd	r25, Y+6	; 0x06
    2662:	00 97       	sbiw	r24, 0x00	; 0
    2664:	69 f7       	brne	.-38     	; 0x2640 <LCD_sendCommand+0x37c>
    2666:	14 c0       	rjmp	.+40     	; 0x2690 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2668:	6f 81       	ldd	r22, Y+7	; 0x07
    266a:	78 85       	ldd	r23, Y+8	; 0x08
    266c:	89 85       	ldd	r24, Y+9	; 0x09
    266e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2670:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2674:	dc 01       	movw	r26, r24
    2676:	cb 01       	movw	r24, r22
    2678:	9e 83       	std	Y+6, r25	; 0x06
    267a:	8d 83       	std	Y+5, r24	; 0x05
    267c:	8d 81       	ldd	r24, Y+5	; 0x05
    267e:	9e 81       	ldd	r25, Y+6	; 0x06
    2680:	9a 83       	std	Y+2, r25	; 0x02
    2682:	89 83       	std	Y+1, r24	; 0x01
    2684:	89 81       	ldd	r24, Y+1	; 0x01
    2686:	9a 81       	ldd	r25, Y+2	; 0x02
    2688:	01 97       	sbiw	r24, 0x01	; 1
    268a:	f1 f7       	brne	.-4      	; 0x2688 <LCD_sendCommand+0x3c4>
    268c:	9a 83       	std	Y+2, r25	; 0x02
    268e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */

#endif
}
    2690:	e9 96       	adiw	r28, 0x39	; 57
    2692:	0f b6       	in	r0, 0x3f	; 63
    2694:	f8 94       	cli
    2696:	de bf       	out	0x3e, r29	; 62
    2698:	0f be       	out	0x3f, r0	; 63
    269a:	cd bf       	out	0x3d, r28	; 61
    269c:	cf 91       	pop	r28
    269e:	df 91       	pop	r29
    26a0:	08 95       	ret

000026a2 <LCD_displayCharacter>:
 *[DESCRIPTION]		: Send the required command to the screen
 *[ARGUMENTS]		: data of type uint8
 *[RETURNS]			: void
 */
void LCD_displayCharacter(uint8 data)
{
    26a2:	df 93       	push	r29
    26a4:	cf 93       	push	r28
    26a6:	cd b7       	in	r28, 0x3d	; 61
    26a8:	de b7       	in	r29, 0x3e	; 62
    26aa:	e9 97       	sbiw	r28, 0x39	; 57
    26ac:	0f b6       	in	r0, 0x3f	; 63
    26ae:	f8 94       	cli
    26b0:	de bf       	out	0x3e, r29	; 62
    26b2:	0f be       	out	0x3f, r0	; 63
    26b4:	cd bf       	out	0x3d, r28	; 61
    26b6:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data mode -> RS = 1 */
    26b8:	83 e0       	ldi	r24, 0x03	; 3
    26ba:	62 e0       	ldi	r22, 0x02	; 2
    26bc:	41 e0       	ldi	r20, 0x01	; 1
    26be:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    26c2:	80 e0       	ldi	r24, 0x00	; 0
    26c4:	90 e0       	ldi	r25, 0x00	; 0
    26c6:	a0 e8       	ldi	r26, 0x80	; 128
    26c8:	bf e3       	ldi	r27, 0x3F	; 63
    26ca:	8d ab       	std	Y+53, r24	; 0x35
    26cc:	9e ab       	std	Y+54, r25	; 0x36
    26ce:	af ab       	std	Y+55, r26	; 0x37
    26d0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26d2:	6d a9       	ldd	r22, Y+53	; 0x35
    26d4:	7e a9       	ldd	r23, Y+54	; 0x36
    26d6:	8f a9       	ldd	r24, Y+55	; 0x37
    26d8:	98 ad       	ldd	r25, Y+56	; 0x38
    26da:	20 e0       	ldi	r18, 0x00	; 0
    26dc:	30 e0       	ldi	r19, 0x00	; 0
    26de:	4a ef       	ldi	r20, 0xFA	; 250
    26e0:	54 e4       	ldi	r21, 0x44	; 68
    26e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26e6:	dc 01       	movw	r26, r24
    26e8:	cb 01       	movw	r24, r22
    26ea:	89 ab       	std	Y+49, r24	; 0x31
    26ec:	9a ab       	std	Y+50, r25	; 0x32
    26ee:	ab ab       	std	Y+51, r26	; 0x33
    26f0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    26f2:	69 a9       	ldd	r22, Y+49	; 0x31
    26f4:	7a a9       	ldd	r23, Y+50	; 0x32
    26f6:	8b a9       	ldd	r24, Y+51	; 0x33
    26f8:	9c a9       	ldd	r25, Y+52	; 0x34
    26fa:	20 e0       	ldi	r18, 0x00	; 0
    26fc:	30 e0       	ldi	r19, 0x00	; 0
    26fe:	40 e8       	ldi	r20, 0x80	; 128
    2700:	5f e3       	ldi	r21, 0x3F	; 63
    2702:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2706:	88 23       	and	r24, r24
    2708:	2c f4       	brge	.+10     	; 0x2714 <LCD_displayCharacter+0x72>
		__ticks = 1;
    270a:	81 e0       	ldi	r24, 0x01	; 1
    270c:	90 e0       	ldi	r25, 0x00	; 0
    270e:	98 ab       	std	Y+48, r25	; 0x30
    2710:	8f a7       	std	Y+47, r24	; 0x2f
    2712:	3f c0       	rjmp	.+126    	; 0x2792 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    2714:	69 a9       	ldd	r22, Y+49	; 0x31
    2716:	7a a9       	ldd	r23, Y+50	; 0x32
    2718:	8b a9       	ldd	r24, Y+51	; 0x33
    271a:	9c a9       	ldd	r25, Y+52	; 0x34
    271c:	20 e0       	ldi	r18, 0x00	; 0
    271e:	3f ef       	ldi	r19, 0xFF	; 255
    2720:	4f e7       	ldi	r20, 0x7F	; 127
    2722:	57 e4       	ldi	r21, 0x47	; 71
    2724:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2728:	18 16       	cp	r1, r24
    272a:	4c f5       	brge	.+82     	; 0x277e <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    272c:	6d a9       	ldd	r22, Y+53	; 0x35
    272e:	7e a9       	ldd	r23, Y+54	; 0x36
    2730:	8f a9       	ldd	r24, Y+55	; 0x37
    2732:	98 ad       	ldd	r25, Y+56	; 0x38
    2734:	20 e0       	ldi	r18, 0x00	; 0
    2736:	30 e0       	ldi	r19, 0x00	; 0
    2738:	40 e2       	ldi	r20, 0x20	; 32
    273a:	51 e4       	ldi	r21, 0x41	; 65
    273c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2740:	dc 01       	movw	r26, r24
    2742:	cb 01       	movw	r24, r22
    2744:	bc 01       	movw	r22, r24
    2746:	cd 01       	movw	r24, r26
    2748:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    274c:	dc 01       	movw	r26, r24
    274e:	cb 01       	movw	r24, r22
    2750:	98 ab       	std	Y+48, r25	; 0x30
    2752:	8f a7       	std	Y+47, r24	; 0x2f
    2754:	0f c0       	rjmp	.+30     	; 0x2774 <LCD_displayCharacter+0xd2>
    2756:	88 ec       	ldi	r24, 0xC8	; 200
    2758:	90 e0       	ldi	r25, 0x00	; 0
    275a:	9e a7       	std	Y+46, r25	; 0x2e
    275c:	8d a7       	std	Y+45, r24	; 0x2d
    275e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2760:	9e a5       	ldd	r25, Y+46	; 0x2e
    2762:	01 97       	sbiw	r24, 0x01	; 1
    2764:	f1 f7       	brne	.-4      	; 0x2762 <LCD_displayCharacter+0xc0>
    2766:	9e a7       	std	Y+46, r25	; 0x2e
    2768:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    276a:	8f a5       	ldd	r24, Y+47	; 0x2f
    276c:	98 a9       	ldd	r25, Y+48	; 0x30
    276e:	01 97       	sbiw	r24, 0x01	; 1
    2770:	98 ab       	std	Y+48, r25	; 0x30
    2772:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2774:	8f a5       	ldd	r24, Y+47	; 0x2f
    2776:	98 a9       	ldd	r25, Y+48	; 0x30
    2778:	00 97       	sbiw	r24, 0x00	; 0
    277a:	69 f7       	brne	.-38     	; 0x2756 <LCD_displayCharacter+0xb4>
    277c:	14 c0       	rjmp	.+40     	; 0x27a6 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    277e:	69 a9       	ldd	r22, Y+49	; 0x31
    2780:	7a a9       	ldd	r23, Y+50	; 0x32
    2782:	8b a9       	ldd	r24, Y+51	; 0x33
    2784:	9c a9       	ldd	r25, Y+52	; 0x34
    2786:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    278a:	dc 01       	movw	r26, r24
    278c:	cb 01       	movw	r24, r22
    278e:	98 ab       	std	Y+48, r25	; 0x30
    2790:	8f a7       	std	Y+47, r24	; 0x2f
    2792:	8f a5       	ldd	r24, Y+47	; 0x2f
    2794:	98 a9       	ldd	r25, Y+48	; 0x30
    2796:	9c a7       	std	Y+44, r25	; 0x2c
    2798:	8b a7       	std	Y+43, r24	; 0x2b
    279a:	8b a5       	ldd	r24, Y+43	; 0x2b
    279c:	9c a5       	ldd	r25, Y+44	; 0x2c
    279e:	01 97       	sbiw	r24, 0x01	; 1
    27a0:	f1 f7       	brne	.-4      	; 0x279e <LCD_displayCharacter+0xfc>
    27a2:	9c a7       	std	Y+44, r25	; 0x2c
    27a4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);/* Dealy for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E = 1 */
    27a6:	83 e0       	ldi	r24, 0x03	; 3
    27a8:	63 e0       	ldi	r22, 0x03	; 3
    27aa:	41 e0       	ldi	r20, 0x01	; 1
    27ac:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    27b0:	80 e0       	ldi	r24, 0x00	; 0
    27b2:	90 e0       	ldi	r25, 0x00	; 0
    27b4:	a0 e8       	ldi	r26, 0x80	; 128
    27b6:	bf e3       	ldi	r27, 0x3F	; 63
    27b8:	8f a3       	std	Y+39, r24	; 0x27
    27ba:	98 a7       	std	Y+40, r25	; 0x28
    27bc:	a9 a7       	std	Y+41, r26	; 0x29
    27be:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27c0:	6f a1       	ldd	r22, Y+39	; 0x27
    27c2:	78 a5       	ldd	r23, Y+40	; 0x28
    27c4:	89 a5       	ldd	r24, Y+41	; 0x29
    27c6:	9a a5       	ldd	r25, Y+42	; 0x2a
    27c8:	20 e0       	ldi	r18, 0x00	; 0
    27ca:	30 e0       	ldi	r19, 0x00	; 0
    27cc:	4a ef       	ldi	r20, 0xFA	; 250
    27ce:	54 e4       	ldi	r21, 0x44	; 68
    27d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27d4:	dc 01       	movw	r26, r24
    27d6:	cb 01       	movw	r24, r22
    27d8:	8b a3       	std	Y+35, r24	; 0x23
    27da:	9c a3       	std	Y+36, r25	; 0x24
    27dc:	ad a3       	std	Y+37, r26	; 0x25
    27de:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    27e0:	6b a1       	ldd	r22, Y+35	; 0x23
    27e2:	7c a1       	ldd	r23, Y+36	; 0x24
    27e4:	8d a1       	ldd	r24, Y+37	; 0x25
    27e6:	9e a1       	ldd	r25, Y+38	; 0x26
    27e8:	20 e0       	ldi	r18, 0x00	; 0
    27ea:	30 e0       	ldi	r19, 0x00	; 0
    27ec:	40 e8       	ldi	r20, 0x80	; 128
    27ee:	5f e3       	ldi	r21, 0x3F	; 63
    27f0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27f4:	88 23       	and	r24, r24
    27f6:	2c f4       	brge	.+10     	; 0x2802 <LCD_displayCharacter+0x160>
		__ticks = 1;
    27f8:	81 e0       	ldi	r24, 0x01	; 1
    27fa:	90 e0       	ldi	r25, 0x00	; 0
    27fc:	9a a3       	std	Y+34, r25	; 0x22
    27fe:	89 a3       	std	Y+33, r24	; 0x21
    2800:	3f c0       	rjmp	.+126    	; 0x2880 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    2802:	6b a1       	ldd	r22, Y+35	; 0x23
    2804:	7c a1       	ldd	r23, Y+36	; 0x24
    2806:	8d a1       	ldd	r24, Y+37	; 0x25
    2808:	9e a1       	ldd	r25, Y+38	; 0x26
    280a:	20 e0       	ldi	r18, 0x00	; 0
    280c:	3f ef       	ldi	r19, 0xFF	; 255
    280e:	4f e7       	ldi	r20, 0x7F	; 127
    2810:	57 e4       	ldi	r21, 0x47	; 71
    2812:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2816:	18 16       	cp	r1, r24
    2818:	4c f5       	brge	.+82     	; 0x286c <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    281a:	6f a1       	ldd	r22, Y+39	; 0x27
    281c:	78 a5       	ldd	r23, Y+40	; 0x28
    281e:	89 a5       	ldd	r24, Y+41	; 0x29
    2820:	9a a5       	ldd	r25, Y+42	; 0x2a
    2822:	20 e0       	ldi	r18, 0x00	; 0
    2824:	30 e0       	ldi	r19, 0x00	; 0
    2826:	40 e2       	ldi	r20, 0x20	; 32
    2828:	51 e4       	ldi	r21, 0x41	; 65
    282a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    282e:	dc 01       	movw	r26, r24
    2830:	cb 01       	movw	r24, r22
    2832:	bc 01       	movw	r22, r24
    2834:	cd 01       	movw	r24, r26
    2836:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    283a:	dc 01       	movw	r26, r24
    283c:	cb 01       	movw	r24, r22
    283e:	9a a3       	std	Y+34, r25	; 0x22
    2840:	89 a3       	std	Y+33, r24	; 0x21
    2842:	0f c0       	rjmp	.+30     	; 0x2862 <LCD_displayCharacter+0x1c0>
    2844:	88 ec       	ldi	r24, 0xC8	; 200
    2846:	90 e0       	ldi	r25, 0x00	; 0
    2848:	98 a3       	std	Y+32, r25	; 0x20
    284a:	8f 8f       	std	Y+31, r24	; 0x1f
    284c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    284e:	98 a1       	ldd	r25, Y+32	; 0x20
    2850:	01 97       	sbiw	r24, 0x01	; 1
    2852:	f1 f7       	brne	.-4      	; 0x2850 <LCD_displayCharacter+0x1ae>
    2854:	98 a3       	std	Y+32, r25	; 0x20
    2856:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2858:	89 a1       	ldd	r24, Y+33	; 0x21
    285a:	9a a1       	ldd	r25, Y+34	; 0x22
    285c:	01 97       	sbiw	r24, 0x01	; 1
    285e:	9a a3       	std	Y+34, r25	; 0x22
    2860:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2862:	89 a1       	ldd	r24, Y+33	; 0x21
    2864:	9a a1       	ldd	r25, Y+34	; 0x22
    2866:	00 97       	sbiw	r24, 0x00	; 0
    2868:	69 f7       	brne	.-38     	; 0x2844 <LCD_displayCharacter+0x1a2>
    286a:	14 c0       	rjmp	.+40     	; 0x2894 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    286c:	6b a1       	ldd	r22, Y+35	; 0x23
    286e:	7c a1       	ldd	r23, Y+36	; 0x24
    2870:	8d a1       	ldd	r24, Y+37	; 0x25
    2872:	9e a1       	ldd	r25, Y+38	; 0x26
    2874:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2878:	dc 01       	movw	r26, r24
    287a:	cb 01       	movw	r24, r22
    287c:	9a a3       	std	Y+34, r25	; 0x22
    287e:	89 a3       	std	Y+33, r24	; 0x21
    2880:	89 a1       	ldd	r24, Y+33	; 0x21
    2882:	9a a1       	ldd	r25, Y+34	; 0x22
    2884:	9e 8f       	std	Y+30, r25	; 0x1e
    2886:	8d 8f       	std	Y+29, r24	; 0x1d
    2888:	8d 8d       	ldd	r24, Y+29	; 0x1d
    288a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    288c:	01 97       	sbiw	r24, 0x01	; 1
    288e:	f1 f7       	brne	.-4      	; 0x288c <LCD_displayCharacter+0x1ea>
    2890:	9e 8f       	std	Y+30, r25	; 0x1e
    2892:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* Write the required command to the data bus D0 --> D7 */
    2894:	82 e0       	ldi	r24, 0x02	; 2
    2896:	69 ad       	ldd	r22, Y+57	; 0x39
    2898:	0e 94 58 08 	call	0x10b0	; 0x10b0 <GPIO_writePort>
    289c:	80 e0       	ldi	r24, 0x00	; 0
    289e:	90 e0       	ldi	r25, 0x00	; 0
    28a0:	a0 e8       	ldi	r26, 0x80	; 128
    28a2:	bf e3       	ldi	r27, 0x3F	; 63
    28a4:	89 8f       	std	Y+25, r24	; 0x19
    28a6:	9a 8f       	std	Y+26, r25	; 0x1a
    28a8:	ab 8f       	std	Y+27, r26	; 0x1b
    28aa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28ac:	69 8d       	ldd	r22, Y+25	; 0x19
    28ae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28b0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28b2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28b4:	20 e0       	ldi	r18, 0x00	; 0
    28b6:	30 e0       	ldi	r19, 0x00	; 0
    28b8:	4a ef       	ldi	r20, 0xFA	; 250
    28ba:	54 e4       	ldi	r21, 0x44	; 68
    28bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28c0:	dc 01       	movw	r26, r24
    28c2:	cb 01       	movw	r24, r22
    28c4:	8d 8b       	std	Y+21, r24	; 0x15
    28c6:	9e 8b       	std	Y+22, r25	; 0x16
    28c8:	af 8b       	std	Y+23, r26	; 0x17
    28ca:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    28cc:	6d 89       	ldd	r22, Y+21	; 0x15
    28ce:	7e 89       	ldd	r23, Y+22	; 0x16
    28d0:	8f 89       	ldd	r24, Y+23	; 0x17
    28d2:	98 8d       	ldd	r25, Y+24	; 0x18
    28d4:	20 e0       	ldi	r18, 0x00	; 0
    28d6:	30 e0       	ldi	r19, 0x00	; 0
    28d8:	40 e8       	ldi	r20, 0x80	; 128
    28da:	5f e3       	ldi	r21, 0x3F	; 63
    28dc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28e0:	88 23       	and	r24, r24
    28e2:	2c f4       	brge	.+10     	; 0x28ee <LCD_displayCharacter+0x24c>
		__ticks = 1;
    28e4:	81 e0       	ldi	r24, 0x01	; 1
    28e6:	90 e0       	ldi	r25, 0x00	; 0
    28e8:	9c 8b       	std	Y+20, r25	; 0x14
    28ea:	8b 8b       	std	Y+19, r24	; 0x13
    28ec:	3f c0       	rjmp	.+126    	; 0x296c <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    28ee:	6d 89       	ldd	r22, Y+21	; 0x15
    28f0:	7e 89       	ldd	r23, Y+22	; 0x16
    28f2:	8f 89       	ldd	r24, Y+23	; 0x17
    28f4:	98 8d       	ldd	r25, Y+24	; 0x18
    28f6:	20 e0       	ldi	r18, 0x00	; 0
    28f8:	3f ef       	ldi	r19, 0xFF	; 255
    28fa:	4f e7       	ldi	r20, 0x7F	; 127
    28fc:	57 e4       	ldi	r21, 0x47	; 71
    28fe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2902:	18 16       	cp	r1, r24
    2904:	4c f5       	brge	.+82     	; 0x2958 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2906:	69 8d       	ldd	r22, Y+25	; 0x19
    2908:	7a 8d       	ldd	r23, Y+26	; 0x1a
    290a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    290c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    290e:	20 e0       	ldi	r18, 0x00	; 0
    2910:	30 e0       	ldi	r19, 0x00	; 0
    2912:	40 e2       	ldi	r20, 0x20	; 32
    2914:	51 e4       	ldi	r21, 0x41	; 65
    2916:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    291a:	dc 01       	movw	r26, r24
    291c:	cb 01       	movw	r24, r22
    291e:	bc 01       	movw	r22, r24
    2920:	cd 01       	movw	r24, r26
    2922:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2926:	dc 01       	movw	r26, r24
    2928:	cb 01       	movw	r24, r22
    292a:	9c 8b       	std	Y+20, r25	; 0x14
    292c:	8b 8b       	std	Y+19, r24	; 0x13
    292e:	0f c0       	rjmp	.+30     	; 0x294e <LCD_displayCharacter+0x2ac>
    2930:	88 ec       	ldi	r24, 0xC8	; 200
    2932:	90 e0       	ldi	r25, 0x00	; 0
    2934:	9a 8b       	std	Y+18, r25	; 0x12
    2936:	89 8b       	std	Y+17, r24	; 0x11
    2938:	89 89       	ldd	r24, Y+17	; 0x11
    293a:	9a 89       	ldd	r25, Y+18	; 0x12
    293c:	01 97       	sbiw	r24, 0x01	; 1
    293e:	f1 f7       	brne	.-4      	; 0x293c <LCD_displayCharacter+0x29a>
    2940:	9a 8b       	std	Y+18, r25	; 0x12
    2942:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2944:	8b 89       	ldd	r24, Y+19	; 0x13
    2946:	9c 89       	ldd	r25, Y+20	; 0x14
    2948:	01 97       	sbiw	r24, 0x01	; 1
    294a:	9c 8b       	std	Y+20, r25	; 0x14
    294c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    294e:	8b 89       	ldd	r24, Y+19	; 0x13
    2950:	9c 89       	ldd	r25, Y+20	; 0x14
    2952:	00 97       	sbiw	r24, 0x00	; 0
    2954:	69 f7       	brne	.-38     	; 0x2930 <LCD_displayCharacter+0x28e>
    2956:	14 c0       	rjmp	.+40     	; 0x2980 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2958:	6d 89       	ldd	r22, Y+21	; 0x15
    295a:	7e 89       	ldd	r23, Y+22	; 0x16
    295c:	8f 89       	ldd	r24, Y+23	; 0x17
    295e:	98 8d       	ldd	r25, Y+24	; 0x18
    2960:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2964:	dc 01       	movw	r26, r24
    2966:	cb 01       	movw	r24, r22
    2968:	9c 8b       	std	Y+20, r25	; 0x14
    296a:	8b 8b       	std	Y+19, r24	; 0x13
    296c:	8b 89       	ldd	r24, Y+19	; 0x13
    296e:	9c 89       	ldd	r25, Y+20	; 0x14
    2970:	98 8b       	std	Y+16, r25	; 0x10
    2972:	8f 87       	std	Y+15, r24	; 0x0f
    2974:	8f 85       	ldd	r24, Y+15	; 0x0f
    2976:	98 89       	ldd	r25, Y+16	; 0x10
    2978:	01 97       	sbiw	r24, 0x01	; 1
    297a:	f1 f7       	brne	.-4      	; 0x2978 <LCD_displayCharacter+0x2d6>
    297c:	98 8b       	std	Y+16, r25	; 0x10
    297e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */

	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2980:	83 e0       	ldi	r24, 0x03	; 3
    2982:	63 e0       	ldi	r22, 0x03	; 3
    2984:	40 e0       	ldi	r20, 0x00	; 0
    2986:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    298a:	80 e0       	ldi	r24, 0x00	; 0
    298c:	90 e0       	ldi	r25, 0x00	; 0
    298e:	a0 e8       	ldi	r26, 0x80	; 128
    2990:	bf e3       	ldi	r27, 0x3F	; 63
    2992:	8b 87       	std	Y+11, r24	; 0x0b
    2994:	9c 87       	std	Y+12, r25	; 0x0c
    2996:	ad 87       	std	Y+13, r26	; 0x0d
    2998:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    299a:	6b 85       	ldd	r22, Y+11	; 0x0b
    299c:	7c 85       	ldd	r23, Y+12	; 0x0c
    299e:	8d 85       	ldd	r24, Y+13	; 0x0d
    29a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    29a2:	20 e0       	ldi	r18, 0x00	; 0
    29a4:	30 e0       	ldi	r19, 0x00	; 0
    29a6:	4a ef       	ldi	r20, 0xFA	; 250
    29a8:	54 e4       	ldi	r21, 0x44	; 68
    29aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ae:	dc 01       	movw	r26, r24
    29b0:	cb 01       	movw	r24, r22
    29b2:	8f 83       	std	Y+7, r24	; 0x07
    29b4:	98 87       	std	Y+8, r25	; 0x08
    29b6:	a9 87       	std	Y+9, r26	; 0x09
    29b8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29ba:	6f 81       	ldd	r22, Y+7	; 0x07
    29bc:	78 85       	ldd	r23, Y+8	; 0x08
    29be:	89 85       	ldd	r24, Y+9	; 0x09
    29c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    29c2:	20 e0       	ldi	r18, 0x00	; 0
    29c4:	30 e0       	ldi	r19, 0x00	; 0
    29c6:	40 e8       	ldi	r20, 0x80	; 128
    29c8:	5f e3       	ldi	r21, 0x3F	; 63
    29ca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29ce:	88 23       	and	r24, r24
    29d0:	2c f4       	brge	.+10     	; 0x29dc <LCD_displayCharacter+0x33a>
		__ticks = 1;
    29d2:	81 e0       	ldi	r24, 0x01	; 1
    29d4:	90 e0       	ldi	r25, 0x00	; 0
    29d6:	9e 83       	std	Y+6, r25	; 0x06
    29d8:	8d 83       	std	Y+5, r24	; 0x05
    29da:	3f c0       	rjmp	.+126    	; 0x2a5a <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    29dc:	6f 81       	ldd	r22, Y+7	; 0x07
    29de:	78 85       	ldd	r23, Y+8	; 0x08
    29e0:	89 85       	ldd	r24, Y+9	; 0x09
    29e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    29e4:	20 e0       	ldi	r18, 0x00	; 0
    29e6:	3f ef       	ldi	r19, 0xFF	; 255
    29e8:	4f e7       	ldi	r20, 0x7F	; 127
    29ea:	57 e4       	ldi	r21, 0x47	; 71
    29ec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29f0:	18 16       	cp	r1, r24
    29f2:	4c f5       	brge	.+82     	; 0x2a46 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    29f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    29f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    29fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    29fc:	20 e0       	ldi	r18, 0x00	; 0
    29fe:	30 e0       	ldi	r19, 0x00	; 0
    2a00:	40 e2       	ldi	r20, 0x20	; 32
    2a02:	51 e4       	ldi	r21, 0x41	; 65
    2a04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a08:	dc 01       	movw	r26, r24
    2a0a:	cb 01       	movw	r24, r22
    2a0c:	bc 01       	movw	r22, r24
    2a0e:	cd 01       	movw	r24, r26
    2a10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a14:	dc 01       	movw	r26, r24
    2a16:	cb 01       	movw	r24, r22
    2a18:	9e 83       	std	Y+6, r25	; 0x06
    2a1a:	8d 83       	std	Y+5, r24	; 0x05
    2a1c:	0f c0       	rjmp	.+30     	; 0x2a3c <LCD_displayCharacter+0x39a>
    2a1e:	88 ec       	ldi	r24, 0xC8	; 200
    2a20:	90 e0       	ldi	r25, 0x00	; 0
    2a22:	9c 83       	std	Y+4, r25	; 0x04
    2a24:	8b 83       	std	Y+3, r24	; 0x03
    2a26:	8b 81       	ldd	r24, Y+3	; 0x03
    2a28:	9c 81       	ldd	r25, Y+4	; 0x04
    2a2a:	01 97       	sbiw	r24, 0x01	; 1
    2a2c:	f1 f7       	brne	.-4      	; 0x2a2a <LCD_displayCharacter+0x388>
    2a2e:	9c 83       	std	Y+4, r25	; 0x04
    2a30:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a32:	8d 81       	ldd	r24, Y+5	; 0x05
    2a34:	9e 81       	ldd	r25, Y+6	; 0x06
    2a36:	01 97       	sbiw	r24, 0x01	; 1
    2a38:	9e 83       	std	Y+6, r25	; 0x06
    2a3a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a3c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a3e:	9e 81       	ldd	r25, Y+6	; 0x06
    2a40:	00 97       	sbiw	r24, 0x00	; 0
    2a42:	69 f7       	brne	.-38     	; 0x2a1e <LCD_displayCharacter+0x37c>
    2a44:	14 c0       	rjmp	.+40     	; 0x2a6e <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a46:	6f 81       	ldd	r22, Y+7	; 0x07
    2a48:	78 85       	ldd	r23, Y+8	; 0x08
    2a4a:	89 85       	ldd	r24, Y+9	; 0x09
    2a4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a52:	dc 01       	movw	r26, r24
    2a54:	cb 01       	movw	r24, r22
    2a56:	9e 83       	std	Y+6, r25	; 0x06
    2a58:	8d 83       	std	Y+5, r24	; 0x05
    2a5a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a5c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a5e:	9a 83       	std	Y+2, r25	; 0x02
    2a60:	89 83       	std	Y+1, r24	; 0x01
    2a62:	89 81       	ldd	r24, Y+1	; 0x01
    2a64:	9a 81       	ldd	r25, Y+2	; 0x02
    2a66:	01 97       	sbiw	r24, 0x01	; 1
    2a68:	f1 f7       	brne	.-4      	; 0x2a66 <LCD_displayCharacter+0x3c4>
    2a6a:	9a 83       	std	Y+2, r25	; 0x02
    2a6c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */

#endif
}
    2a6e:	e9 96       	adiw	r28, 0x39	; 57
    2a70:	0f b6       	in	r0, 0x3f	; 63
    2a72:	f8 94       	cli
    2a74:	de bf       	out	0x3e, r29	; 62
    2a76:	0f be       	out	0x3f, r0	; 63
    2a78:	cd bf       	out	0x3d, r28	; 61
    2a7a:	cf 91       	pop	r28
    2a7c:	df 91       	pop	r29
    2a7e:	08 95       	ret

00002a80 <LCD_displayString>:
 *[DESCRIPTION]		: Display the required string on the screen
 *[ARGUMENTS]		: pointer to const data of type char
 *[RETURNS]			: void
 */
void LCD_displayString(const char *str)
{
    2a80:	df 93       	push	r29
    2a82:	cf 93       	push	r28
    2a84:	00 d0       	rcall	.+0      	; 0x2a86 <LCD_displayString+0x6>
    2a86:	0f 92       	push	r0
    2a88:	cd b7       	in	r28, 0x3d	; 61
    2a8a:	de b7       	in	r29, 0x3e	; 62
    2a8c:	9b 83       	std	Y+3, r25	; 0x03
    2a8e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2a90:	19 82       	std	Y+1, r1	; 0x01
    2a92:	0e c0       	rjmp	.+28     	; 0x2ab0 <LCD_displayString+0x30>
	while(str[i] != '\0')
	{
		LCD_displayCharacter(str[i]);
    2a94:	89 81       	ldd	r24, Y+1	; 0x01
    2a96:	28 2f       	mov	r18, r24
    2a98:	30 e0       	ldi	r19, 0x00	; 0
    2a9a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a9c:	9b 81       	ldd	r25, Y+3	; 0x03
    2a9e:	fc 01       	movw	r30, r24
    2aa0:	e2 0f       	add	r30, r18
    2aa2:	f3 1f       	adc	r31, r19
    2aa4:	80 81       	ld	r24, Z
    2aa6:	0e 94 51 13 	call	0x26a2	; 0x26a2 <LCD_displayCharacter>
		i++;
    2aaa:	89 81       	ldd	r24, Y+1	; 0x01
    2aac:	8f 5f       	subi	r24, 0xFF	; 255
    2aae:	89 83       	std	Y+1, r24	; 0x01
 *[RETURNS]			: void
 */
void LCD_displayString(const char *str)
{
	uint8 i = 0;
	while(str[i] != '\0')
    2ab0:	89 81       	ldd	r24, Y+1	; 0x01
    2ab2:	28 2f       	mov	r18, r24
    2ab4:	30 e0       	ldi	r19, 0x00	; 0
    2ab6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ab8:	9b 81       	ldd	r25, Y+3	; 0x03
    2aba:	fc 01       	movw	r30, r24
    2abc:	e2 0f       	add	r30, r18
    2abe:	f3 1f       	adc	r31, r19
    2ac0:	80 81       	ld	r24, Z
    2ac2:	88 23       	and	r24, r24
    2ac4:	39 f7       	brne	.-50     	; 0x2a94 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(str[i]);
		i++;
	}
}
    2ac6:	0f 90       	pop	r0
    2ac8:	0f 90       	pop	r0
    2aca:	0f 90       	pop	r0
    2acc:	cf 91       	pop	r28
    2ace:	df 91       	pop	r29
    2ad0:	08 95       	ret

00002ad2 <LCD_moveCursor>:
 *[DESCRIPTION]		: Move the cursor to a specified row and column index on the screen
 *[ARGUMENTS]		: row number and column number of type uint8
 *[RETURNS]			: void
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2ad2:	df 93       	push	r29
    2ad4:	cf 93       	push	r28
    2ad6:	00 d0       	rcall	.+0      	; 0x2ad8 <LCD_moveCursor+0x6>
    2ad8:	00 d0       	rcall	.+0      	; 0x2ada <LCD_moveCursor+0x8>
    2ada:	0f 92       	push	r0
    2adc:	cd b7       	in	r28, 0x3d	; 61
    2ade:	de b7       	in	r29, 0x3e	; 62
    2ae0:	8a 83       	std	Y+2, r24	; 0x02
    2ae2:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2ae4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ae6:	28 2f       	mov	r18, r24
    2ae8:	30 e0       	ldi	r19, 0x00	; 0
    2aea:	3d 83       	std	Y+5, r19	; 0x05
    2aec:	2c 83       	std	Y+4, r18	; 0x04
    2aee:	8c 81       	ldd	r24, Y+4	; 0x04
    2af0:	9d 81       	ldd	r25, Y+5	; 0x05
    2af2:	81 30       	cpi	r24, 0x01	; 1
    2af4:	91 05       	cpc	r25, r1
    2af6:	c1 f0       	breq	.+48     	; 0x2b28 <LCD_moveCursor+0x56>
    2af8:	2c 81       	ldd	r18, Y+4	; 0x04
    2afa:	3d 81       	ldd	r19, Y+5	; 0x05
    2afc:	22 30       	cpi	r18, 0x02	; 2
    2afe:	31 05       	cpc	r19, r1
    2b00:	2c f4       	brge	.+10     	; 0x2b0c <LCD_moveCursor+0x3a>
    2b02:	8c 81       	ldd	r24, Y+4	; 0x04
    2b04:	9d 81       	ldd	r25, Y+5	; 0x05
    2b06:	00 97       	sbiw	r24, 0x00	; 0
    2b08:	61 f0       	breq	.+24     	; 0x2b22 <LCD_moveCursor+0x50>
    2b0a:	19 c0       	rjmp	.+50     	; 0x2b3e <LCD_moveCursor+0x6c>
    2b0c:	2c 81       	ldd	r18, Y+4	; 0x04
    2b0e:	3d 81       	ldd	r19, Y+5	; 0x05
    2b10:	22 30       	cpi	r18, 0x02	; 2
    2b12:	31 05       	cpc	r19, r1
    2b14:	69 f0       	breq	.+26     	; 0x2b30 <LCD_moveCursor+0x5e>
    2b16:	8c 81       	ldd	r24, Y+4	; 0x04
    2b18:	9d 81       	ldd	r25, Y+5	; 0x05
    2b1a:	83 30       	cpi	r24, 0x03	; 3
    2b1c:	91 05       	cpc	r25, r1
    2b1e:	61 f0       	breq	.+24     	; 0x2b38 <LCD_moveCursor+0x66>
    2b20:	0e c0       	rjmp	.+28     	; 0x2b3e <LCD_moveCursor+0x6c>
	{
	case 0:
		lcd_memory_address = col;
    2b22:	8b 81       	ldd	r24, Y+3	; 0x03
    2b24:	89 83       	std	Y+1, r24	; 0x01
    2b26:	0b c0       	rjmp	.+22     	; 0x2b3e <LCD_moveCursor+0x6c>
		break;
	case 1:
		lcd_memory_address = col + 0x40;
    2b28:	8b 81       	ldd	r24, Y+3	; 0x03
    2b2a:	80 5c       	subi	r24, 0xC0	; 192
    2b2c:	89 83       	std	Y+1, r24	; 0x01
    2b2e:	07 c0       	rjmp	.+14     	; 0x2b3e <LCD_moveCursor+0x6c>
		break;
	case 2:
		lcd_memory_address = col + 0x10;
    2b30:	8b 81       	ldd	r24, Y+3	; 0x03
    2b32:	80 5f       	subi	r24, 0xF0	; 240
    2b34:	89 83       	std	Y+1, r24	; 0x01
    2b36:	03 c0       	rjmp	.+6      	; 0x2b3e <LCD_moveCursor+0x6c>
		break;
	case 3:
		lcd_memory_address = col + 0x50;
    2b38:	8b 81       	ldd	r24, Y+3	; 0x03
    2b3a:	80 5b       	subi	r24, 0xB0	; 176
    2b3c:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2b3e:	89 81       	ldd	r24, Y+1	; 0x01
    2b40:	80 68       	ori	r24, 0x80	; 128
    2b42:	0e 94 62 11 	call	0x22c4	; 0x22c4 <LCD_sendCommand>

}
    2b46:	0f 90       	pop	r0
    2b48:	0f 90       	pop	r0
    2b4a:	0f 90       	pop	r0
    2b4c:	0f 90       	pop	r0
    2b4e:	0f 90       	pop	r0
    2b50:	cf 91       	pop	r28
    2b52:	df 91       	pop	r29
    2b54:	08 95       	ret

00002b56 <LCD_displayStringRowColumn>:
 *[ARGUMENTS]		: 1.row number and column number of type uint8
                      2.pointer to const data of type char
 *[RETURNS]			: void
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col, const char *str)
{
    2b56:	df 93       	push	r29
    2b58:	cf 93       	push	r28
    2b5a:	00 d0       	rcall	.+0      	; 0x2b5c <LCD_displayStringRowColumn+0x6>
    2b5c:	00 d0       	rcall	.+0      	; 0x2b5e <LCD_displayStringRowColumn+0x8>
    2b5e:	cd b7       	in	r28, 0x3d	; 61
    2b60:	de b7       	in	r29, 0x3e	; 62
    2b62:	89 83       	std	Y+1, r24	; 0x01
    2b64:	6a 83       	std	Y+2, r22	; 0x02
    2b66:	5c 83       	std	Y+4, r21	; 0x04
    2b68:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* Go to the required LCD position */
    2b6a:	89 81       	ldd	r24, Y+1	; 0x01
    2b6c:	6a 81       	ldd	r22, Y+2	; 0x02
    2b6e:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <LCD_moveCursor>
	LCD_displayString(str);  /* Display String */
    2b72:	8b 81       	ldd	r24, Y+3	; 0x03
    2b74:	9c 81       	ldd	r25, Y+4	; 0x04
    2b76:	0e 94 40 15 	call	0x2a80	; 0x2a80 <LCD_displayString>
}
    2b7a:	0f 90       	pop	r0
    2b7c:	0f 90       	pop	r0
    2b7e:	0f 90       	pop	r0
    2b80:	0f 90       	pop	r0
    2b82:	cf 91       	pop	r28
    2b84:	df 91       	pop	r29
    2b86:	08 95       	ret

00002b88 <LCD_integerToString>:
 *[DESCRIPTION]		: Display the required decimal value on the screen
 *[ARGUMENTS]		: data of type int
 *[RETURNS]			: void
 */
void LCD_integerToString(int data)
{
    2b88:	df 93       	push	r29
    2b8a:	cf 93       	push	r28
    2b8c:	cd b7       	in	r28, 0x3d	; 61
    2b8e:	de b7       	in	r29, 0x3e	; 62
    2b90:	62 97       	sbiw	r28, 0x12	; 18
    2b92:	0f b6       	in	r0, 0x3f	; 63
    2b94:	f8 94       	cli
    2b96:	de bf       	out	0x3e, r29	; 62
    2b98:	0f be       	out	0x3f, r0	; 63
    2b9a:	cd bf       	out	0x3d, r28	; 61
    2b9c:	9a 8b       	std	Y+18, r25	; 0x12
    2b9e:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16]; /* String to hold the ascii result */
	itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ascii value, 10 for decimal */
    2ba0:	89 89       	ldd	r24, Y+17	; 0x11
    2ba2:	9a 89       	ldd	r25, Y+18	; 0x12
    2ba4:	9e 01       	movw	r18, r28
    2ba6:	2f 5f       	subi	r18, 0xFF	; 255
    2ba8:	3f 4f       	sbci	r19, 0xFF	; 255
    2baa:	b9 01       	movw	r22, r18
    2bac:	4a e0       	ldi	r20, 0x0A	; 10
    2bae:	50 e0       	ldi	r21, 0x00	; 0
    2bb0:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <itoa>
	LCD_displayString(buff); /* Display the resulting String */
    2bb4:	ce 01       	movw	r24, r28
    2bb6:	01 96       	adiw	r24, 0x01	; 1
    2bb8:	0e 94 40 15 	call	0x2a80	; 0x2a80 <LCD_displayString>

}
    2bbc:	62 96       	adiw	r28, 0x12	; 18
    2bbe:	0f b6       	in	r0, 0x3f	; 63
    2bc0:	f8 94       	cli
    2bc2:	de bf       	out	0x3e, r29	; 62
    2bc4:	0f be       	out	0x3f, r0	; 63
    2bc6:	cd bf       	out	0x3d, r28	; 61
    2bc8:	cf 91       	pop	r28
    2bca:	df 91       	pop	r29
    2bcc:	08 95       	ret

00002bce <LCD_clearScreen>:
 *[DESCRIPTION]		: Send the clear screen command
 *[ARGUMENTS]		: void
 *[RETURNS]			: void
 */
void LCD_clearScreen(void)
{
    2bce:	df 93       	push	r29
    2bd0:	cf 93       	push	r28
    2bd2:	cd b7       	in	r28, 0x3d	; 61
    2bd4:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2bd6:	81 e0       	ldi	r24, 0x01	; 1
    2bd8:	0e 94 62 11 	call	0x22c4	; 0x22c4 <LCD_sendCommand>
}
    2bdc:	cf 91       	pop	r28
    2bde:	df 91       	pop	r29
    2be0:	08 95       	ret

00002be2 <__vector_7>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER1_COMPA_vect)
{
    2be2:	1f 92       	push	r1
    2be4:	0f 92       	push	r0
    2be6:	0f b6       	in	r0, 0x3f	; 63
    2be8:	0f 92       	push	r0
    2bea:	11 24       	eor	r1, r1
    2bec:	2f 93       	push	r18
    2bee:	3f 93       	push	r19
    2bf0:	4f 93       	push	r20
    2bf2:	5f 93       	push	r21
    2bf4:	6f 93       	push	r22
    2bf6:	7f 93       	push	r23
    2bf8:	8f 93       	push	r24
    2bfa:	9f 93       	push	r25
    2bfc:	af 93       	push	r26
    2bfe:	bf 93       	push	r27
    2c00:	ef 93       	push	r30
    2c02:	ff 93       	push	r31
    2c04:	df 93       	push	r29
    2c06:	cf 93       	push	r28
    2c08:	cd b7       	in	r28, 0x3d	; 61
    2c0a:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    2c0c:	80 91 74 01 	lds	r24, 0x0174
    2c10:	90 91 75 01 	lds	r25, 0x0175
    2c14:	00 97       	sbiw	r24, 0x00	; 0
    2c16:	29 f0       	breq	.+10     	; 0x2c22 <__vector_7+0x40>
	{
		(*g_callBackPtr)();
    2c18:	e0 91 74 01 	lds	r30, 0x0174
    2c1c:	f0 91 75 01 	lds	r31, 0x0175
    2c20:	09 95       	icall
	}
}
    2c22:	cf 91       	pop	r28
    2c24:	df 91       	pop	r29
    2c26:	ff 91       	pop	r31
    2c28:	ef 91       	pop	r30
    2c2a:	bf 91       	pop	r27
    2c2c:	af 91       	pop	r26
    2c2e:	9f 91       	pop	r25
    2c30:	8f 91       	pop	r24
    2c32:	7f 91       	pop	r23
    2c34:	6f 91       	pop	r22
    2c36:	5f 91       	pop	r21
    2c38:	4f 91       	pop	r20
    2c3a:	3f 91       	pop	r19
    2c3c:	2f 91       	pop	r18
    2c3e:	0f 90       	pop	r0
    2c40:	0f be       	out	0x3f, r0	; 63
    2c42:	0f 90       	pop	r0
    2c44:	1f 90       	pop	r1
    2c46:	18 95       	reti

00002c48 <__vector_9>:

ISR(TIMER1_OVF_vect)
{
    2c48:	1f 92       	push	r1
    2c4a:	0f 92       	push	r0
    2c4c:	0f b6       	in	r0, 0x3f	; 63
    2c4e:	0f 92       	push	r0
    2c50:	11 24       	eor	r1, r1
    2c52:	2f 93       	push	r18
    2c54:	3f 93       	push	r19
    2c56:	4f 93       	push	r20
    2c58:	5f 93       	push	r21
    2c5a:	6f 93       	push	r22
    2c5c:	7f 93       	push	r23
    2c5e:	8f 93       	push	r24
    2c60:	9f 93       	push	r25
    2c62:	af 93       	push	r26
    2c64:	bf 93       	push	r27
    2c66:	ef 93       	push	r30
    2c68:	ff 93       	push	r31
    2c6a:	df 93       	push	r29
    2c6c:	cf 93       	push	r28
    2c6e:	cd b7       	in	r28, 0x3d	; 61
    2c70:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    2c72:	80 91 74 01 	lds	r24, 0x0174
    2c76:	90 91 75 01 	lds	r25, 0x0175
    2c7a:	00 97       	sbiw	r24, 0x00	; 0
    2c7c:	29 f0       	breq	.+10     	; 0x2c88 <__vector_9+0x40>
	{
		(*g_callBackPtr)();
    2c7e:	e0 91 74 01 	lds	r30, 0x0174
    2c82:	f0 91 75 01 	lds	r31, 0x0175
    2c86:	09 95       	icall
	}
}
    2c88:	cf 91       	pop	r28
    2c8a:	df 91       	pop	r29
    2c8c:	ff 91       	pop	r31
    2c8e:	ef 91       	pop	r30
    2c90:	bf 91       	pop	r27
    2c92:	af 91       	pop	r26
    2c94:	9f 91       	pop	r25
    2c96:	8f 91       	pop	r24
    2c98:	7f 91       	pop	r23
    2c9a:	6f 91       	pop	r22
    2c9c:	5f 91       	pop	r21
    2c9e:	4f 91       	pop	r20
    2ca0:	3f 91       	pop	r19
    2ca2:	2f 91       	pop	r18
    2ca4:	0f 90       	pop	r0
    2ca6:	0f be       	out	0x3f, r0	; 63
    2ca8:	0f 90       	pop	r0
    2caa:	1f 90       	pop	r1
    2cac:	18 95       	reti

00002cae <Timer1_init>:
/*******************************************************************************
 *                                Functions Definitions                        *
 *******************************************************************************/


void Timer1_init(const Timer1_ConfigType * Config_Ptr){
    2cae:	df 93       	push	r29
    2cb0:	cf 93       	push	r28
    2cb2:	00 d0       	rcall	.+0      	; 0x2cb4 <Timer1_init+0x6>
    2cb4:	cd b7       	in	r28, 0x3d	; 61
    2cb6:	de b7       	in	r29, 0x3e	; 62
    2cb8:	9a 83       	std	Y+2, r25	; 0x02
    2cba:	89 83       	std	Y+1, r24	; 0x01

	/*first two bits is common in two modes 00 for both*/
	TCCR1A = (1 << FOC1A) | (Config_Ptr->mode & 3);
    2cbc:	af e4       	ldi	r26, 0x4F	; 79
    2cbe:	b0 e0       	ldi	r27, 0x00	; 0
    2cc0:	e9 81       	ldd	r30, Y+1	; 0x01
    2cc2:	fa 81       	ldd	r31, Y+2	; 0x02
    2cc4:	85 81       	ldd	r24, Z+5	; 0x05
    2cc6:	83 70       	andi	r24, 0x03	; 3
    2cc8:	88 60       	ori	r24, 0x08	; 8
    2cca:	8c 93       	st	X, r24
	if (Config_Ptr->mode == CTC) {
    2ccc:	e9 81       	ldd	r30, Y+1	; 0x01
    2cce:	fa 81       	ldd	r31, Y+2	; 0x02
    2cd0:	85 81       	ldd	r24, Z+5	; 0x05
    2cd2:	84 30       	cpi	r24, 0x04	; 4
    2cd4:	29 f5       	brne	.+74     	; 0x2d20 <Timer1_init+0x72>
		/* Set the Compare value to value in Configuration */
		OCR1A = Config_Ptr->compare_value;
    2cd6:	aa e4       	ldi	r26, 0x4A	; 74
    2cd8:	b0 e0       	ldi	r27, 0x00	; 0
    2cda:	e9 81       	ldd	r30, Y+1	; 0x01
    2cdc:	fa 81       	ldd	r31, Y+2	; 0x02
    2cde:	82 81       	ldd	r24, Z+2	; 0x02
    2ce0:	93 81       	ldd	r25, Z+3	; 0x03
    2ce2:	11 96       	adiw	r26, 0x01	; 1
    2ce4:	9c 93       	st	X, r25
    2ce6:	8e 93       	st	-X, r24

		/* Enable Timer1 Compare A Interrupt */
		TIMSK |= (1 << OCIE1A);
    2ce8:	a9 e5       	ldi	r26, 0x59	; 89
    2cea:	b0 e0       	ldi	r27, 0x00	; 0
    2cec:	e9 e5       	ldi	r30, 0x59	; 89
    2cee:	f0 e0       	ldi	r31, 0x00	; 0
    2cf0:	80 81       	ld	r24, Z
    2cf2:	80 61       	ori	r24, 0x10	; 16
    2cf4:	8c 93       	st	X, r24
		TCCR1B = (Config_Ptr->prescaler) | ((Config_Ptr->mode >> 2) << 3);
    2cf6:	ae e4       	ldi	r26, 0x4E	; 78
    2cf8:	b0 e0       	ldi	r27, 0x00	; 0
    2cfa:	e9 81       	ldd	r30, Y+1	; 0x01
    2cfc:	fa 81       	ldd	r31, Y+2	; 0x02
    2cfe:	84 81       	ldd	r24, Z+4	; 0x04
    2d00:	28 2f       	mov	r18, r24
    2d02:	e9 81       	ldd	r30, Y+1	; 0x01
    2d04:	fa 81       	ldd	r31, Y+2	; 0x02
    2d06:	85 81       	ldd	r24, Z+5	; 0x05
    2d08:	86 95       	lsr	r24
    2d0a:	86 95       	lsr	r24
    2d0c:	88 2f       	mov	r24, r24
    2d0e:	90 e0       	ldi	r25, 0x00	; 0
    2d10:	88 0f       	add	r24, r24
    2d12:	99 1f       	adc	r25, r25
    2d14:	88 0f       	add	r24, r24
    2d16:	99 1f       	adc	r25, r25
    2d18:	88 0f       	add	r24, r24
    2d1a:	99 1f       	adc	r25, r25
    2d1c:	82 2b       	or	r24, r18
    2d1e:	8c 93       	st	X, r24
	}
	if (Config_Ptr->mode == NORMAL) {
    2d20:	e9 81       	ldd	r30, Y+1	; 0x01
    2d22:	fa 81       	ldd	r31, Y+2	; 0x02
    2d24:	85 81       	ldd	r24, Z+5	; 0x05
    2d26:	88 23       	and	r24, r24
    2d28:	69 f4       	brne	.+26     	; 0x2d44 <Timer1_init+0x96>
		/*Timer_ 1 Overflow  Interrupt Enable*/
		TIMSK |= (1<<TOIE1);
    2d2a:	a9 e5       	ldi	r26, 0x59	; 89
    2d2c:	b0 e0       	ldi	r27, 0x00	; 0
    2d2e:	e9 e5       	ldi	r30, 0x59	; 89
    2d30:	f0 e0       	ldi	r31, 0x00	; 0
    2d32:	80 81       	ld	r24, Z
    2d34:	84 60       	ori	r24, 0x04	; 4
    2d36:	8c 93       	st	X, r24
		/*set prescaler chosen in Configuration*/
		TCCR1B = (Config_Ptr->prescaler);
    2d38:	ae e4       	ldi	r26, 0x4E	; 78
    2d3a:	b0 e0       	ldi	r27, 0x00	; 0
    2d3c:	e9 81       	ldd	r30, Y+1	; 0x01
    2d3e:	fa 81       	ldd	r31, Y+2	; 0x02
    2d40:	84 81       	ldd	r24, Z+4	; 0x04
    2d42:	8c 93       	st	X, r24
	}
	TCNT1 = Config_Ptr->initial_value;
    2d44:	ec e4       	ldi	r30, 0x4C	; 76
    2d46:	f0 e0       	ldi	r31, 0x00	; 0
    2d48:	a9 81       	ldd	r26, Y+1	; 0x01
    2d4a:	ba 81       	ldd	r27, Y+2	; 0x02
    2d4c:	8d 91       	ld	r24, X+
    2d4e:	9c 91       	ld	r25, X
    2d50:	11 97       	sbiw	r26, 0x01	; 1
    2d52:	91 83       	std	Z+1, r25	; 0x01
    2d54:	80 83       	st	Z, r24
}
    2d56:	0f 90       	pop	r0
    2d58:	0f 90       	pop	r0
    2d5a:	cf 91       	pop	r28
    2d5c:	df 91       	pop	r29
    2d5e:	08 95       	ret

00002d60 <Timer1_deInit>:

void Timer1_deInit(void)
{
    2d60:	df 93       	push	r29
    2d62:	cf 93       	push	r28
    2d64:	cd b7       	in	r28, 0x3d	; 61
    2d66:	de b7       	in	r29, 0x3e	; 62
	/* Clear all initialized registers */
	TCCR1A = 0;
    2d68:	ef e4       	ldi	r30, 0x4F	; 79
    2d6a:	f0 e0       	ldi	r31, 0x00	; 0
    2d6c:	10 82       	st	Z, r1
	TCCR1B = 0;
    2d6e:	ee e4       	ldi	r30, 0x4E	; 78
    2d70:	f0 e0       	ldi	r31, 0x00	; 0
    2d72:	10 82       	st	Z, r1
	TCNT1 = 0;
    2d74:	ec e4       	ldi	r30, 0x4C	; 76
    2d76:	f0 e0       	ldi	r31, 0x00	; 0
    2d78:	11 82       	std	Z+1, r1	; 0x01
    2d7a:	10 82       	st	Z, r1
	OCR1A = 0;
    2d7c:	ea e4       	ldi	r30, 0x4A	; 74
    2d7e:	f0 e0       	ldi	r31, 0x00	; 0
    2d80:	11 82       	std	Z+1, r1	; 0x01
    2d82:	10 82       	st	Z, r1

	/* Reset the global pointer value */
	g_callBackPtr = NULL_PTR;
    2d84:	10 92 75 01 	sts	0x0175, r1
    2d88:	10 92 74 01 	sts	0x0174, r1

	/* Disable Interrupts */
	CLEAR_BIT(TIMSK,OCIE1A);
    2d8c:	a9 e5       	ldi	r26, 0x59	; 89
    2d8e:	b0 e0       	ldi	r27, 0x00	; 0
    2d90:	e9 e5       	ldi	r30, 0x59	; 89
    2d92:	f0 e0       	ldi	r31, 0x00	; 0
    2d94:	80 81       	ld	r24, Z
    2d96:	8f 7e       	andi	r24, 0xEF	; 239
    2d98:	8c 93       	st	X, r24
	CLEAR_BIT(TIMSK,TOIE1);
    2d9a:	a9 e5       	ldi	r26, 0x59	; 89
    2d9c:	b0 e0       	ldi	r27, 0x00	; 0
    2d9e:	e9 e5       	ldi	r30, 0x59	; 89
    2da0:	f0 e0       	ldi	r31, 0x00	; 0
    2da2:	80 81       	ld	r24, Z
    2da4:	8b 7f       	andi	r24, 0xFB	; 251
    2da6:	8c 93       	st	X, r24
}
    2da8:	cf 91       	pop	r28
    2daa:	df 91       	pop	r29
    2dac:	08 95       	ret

00002dae <Timer1_setCallBack>:

void Timer1_setCallBack(void(*a_ptr)(void))
{
    2dae:	df 93       	push	r29
    2db0:	cf 93       	push	r28
    2db2:	00 d0       	rcall	.+0      	; 0x2db4 <Timer1_setCallBack+0x6>
    2db4:	cd b7       	in	r28, 0x3d	; 61
    2db6:	de b7       	in	r29, 0x3e	; 62
    2db8:	9a 83       	std	Y+2, r25	; 0x02
    2dba:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr = a_ptr;
    2dbc:	89 81       	ldd	r24, Y+1	; 0x01
    2dbe:	9a 81       	ldd	r25, Y+2	; 0x02
    2dc0:	90 93 75 01 	sts	0x0175, r25
    2dc4:	80 93 74 01 	sts	0x0174, r24
}
    2dc8:	0f 90       	pop	r0
    2dca:	0f 90       	pop	r0
    2dcc:	cf 91       	pop	r28
    2dce:	df 91       	pop	r29
    2dd0:	08 95       	ret

00002dd2 <UART_init>:
 *[ARGUMENTS]		: void
 *[RETURNS]			: void
 */

void UART_init(const UART_ConfigType *uartConfig_ptr)
{
    2dd2:	df 93       	push	r29
    2dd4:	cf 93       	push	r28
    2dd6:	00 d0       	rcall	.+0      	; 0x2dd8 <UART_init+0x6>
    2dd8:	00 d0       	rcall	.+0      	; 0x2dda <UART_init+0x8>
    2dda:	cd b7       	in	r28, 0x3d	; 61
    2ddc:	de b7       	in	r29, 0x3e	; 62
    2dde:	9c 83       	std	Y+4, r25	; 0x04
    2de0:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2de2:	1a 82       	std	Y+2, r1	; 0x02
    2de4:	19 82       	std	Y+1, r1	; 0x01

	/* Set U2X bit to Double the USART Transmission Speed */
	UCSRA = (1<<U2X);
    2de6:	eb e2       	ldi	r30, 0x2B	; 43
    2de8:	f0 e0       	ldi	r31, 0x00	; 0
    2dea:	82 e0       	ldi	r24, 0x02	; 2
    2dec:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2dee:	ea e2       	ldi	r30, 0x2A	; 42
    2df0:	f0 e0       	ldi	r31, 0x00	; 0
    2df2:	88 e1       	ldi	r24, 0x18	; 24
    2df4:	80 83       	st	Z, r24
	UCSRB = (UCSRB & 0xfb) | (((uartConfig_ptr->bit_data) & 0xfb) << 2);
    2df6:	aa e2       	ldi	r26, 0x2A	; 42
    2df8:	b0 e0       	ldi	r27, 0x00	; 0
    2dfa:	ea e2       	ldi	r30, 0x2A	; 42
    2dfc:	f0 e0       	ldi	r31, 0x00	; 0
    2dfe:	80 81       	ld	r24, Z
    2e00:	28 2f       	mov	r18, r24
    2e02:	2b 7f       	andi	r18, 0xFB	; 251
    2e04:	eb 81       	ldd	r30, Y+3	; 0x03
    2e06:	fc 81       	ldd	r31, Y+4	; 0x04
    2e08:	80 81       	ld	r24, Z
    2e0a:	88 2f       	mov	r24, r24
    2e0c:	90 e0       	ldi	r25, 0x00	; 0
    2e0e:	8b 7f       	andi	r24, 0xFB	; 251
    2e10:	90 70       	andi	r25, 0x00	; 0
    2e12:	88 0f       	add	r24, r24
    2e14:	99 1f       	adc	r25, r25
    2e16:	88 0f       	add	r24, r24
    2e18:	99 1f       	adc	r25, r25
    2e1a:	82 2b       	or	r24, r18
    2e1c:	8c 93       	st	X, r24
	 * UPM1:0  = parity type
	 * USBS    = stop bit type
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1<<URSEL);
    2e1e:	e0 e4       	ldi	r30, 0x40	; 64
    2e20:	f0 e0       	ldi	r31, 0x00	; 0
    2e22:	80 e8       	ldi	r24, 0x80	; 128
    2e24:	80 83       	st	Z, r24
	UCSRC = (UCSRC & 0xf9) | (((uartConfig_ptr->bit_data) & 0xf9) << 1);
    2e26:	a0 e4       	ldi	r26, 0x40	; 64
    2e28:	b0 e0       	ldi	r27, 0x00	; 0
    2e2a:	e0 e4       	ldi	r30, 0x40	; 64
    2e2c:	f0 e0       	ldi	r31, 0x00	; 0
    2e2e:	80 81       	ld	r24, Z
    2e30:	28 2f       	mov	r18, r24
    2e32:	29 7f       	andi	r18, 0xF9	; 249
    2e34:	eb 81       	ldd	r30, Y+3	; 0x03
    2e36:	fc 81       	ldd	r31, Y+4	; 0x04
    2e38:	80 81       	ld	r24, Z
    2e3a:	88 2f       	mov	r24, r24
    2e3c:	90 e0       	ldi	r25, 0x00	; 0
    2e3e:	89 7f       	andi	r24, 0xF9	; 249
    2e40:	90 70       	andi	r25, 0x00	; 0
    2e42:	88 0f       	add	r24, r24
    2e44:	99 1f       	adc	r25, r25
    2e46:	82 2b       	or	r24, r18
    2e48:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xcf) | ((uartConfig_ptr->parity) << 4);
    2e4a:	a0 e4       	ldi	r26, 0x40	; 64
    2e4c:	b0 e0       	ldi	r27, 0x00	; 0
    2e4e:	e0 e4       	ldi	r30, 0x40	; 64
    2e50:	f0 e0       	ldi	r31, 0x00	; 0
    2e52:	80 81       	ld	r24, Z
    2e54:	28 2f       	mov	r18, r24
    2e56:	2f 7c       	andi	r18, 0xCF	; 207
    2e58:	eb 81       	ldd	r30, Y+3	; 0x03
    2e5a:	fc 81       	ldd	r31, Y+4	; 0x04
    2e5c:	81 81       	ldd	r24, Z+1	; 0x01
    2e5e:	88 2f       	mov	r24, r24
    2e60:	90 e0       	ldi	r25, 0x00	; 0
    2e62:	82 95       	swap	r24
    2e64:	92 95       	swap	r25
    2e66:	90 7f       	andi	r25, 0xF0	; 240
    2e68:	98 27       	eor	r25, r24
    2e6a:	80 7f       	andi	r24, 0xF0	; 240
    2e6c:	98 27       	eor	r25, r24
    2e6e:	82 2b       	or	r24, r18
    2e70:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xf7) | ((uartConfig_ptr->stop_bit) << 3);
    2e72:	a0 e4       	ldi	r26, 0x40	; 64
    2e74:	b0 e0       	ldi	r27, 0x00	; 0
    2e76:	e0 e4       	ldi	r30, 0x40	; 64
    2e78:	f0 e0       	ldi	r31, 0x00	; 0
    2e7a:	80 81       	ld	r24, Z
    2e7c:	28 2f       	mov	r18, r24
    2e7e:	27 7f       	andi	r18, 0xF7	; 247
    2e80:	eb 81       	ldd	r30, Y+3	; 0x03
    2e82:	fc 81       	ldd	r31, Y+4	; 0x04
    2e84:	82 81       	ldd	r24, Z+2	; 0x02
    2e86:	88 2f       	mov	r24, r24
    2e88:	90 e0       	ldi	r25, 0x00	; 0
    2e8a:	88 0f       	add	r24, r24
    2e8c:	99 1f       	adc	r25, r25
    2e8e:	88 0f       	add	r24, r24
    2e90:	99 1f       	adc	r25, r25
    2e92:	88 0f       	add	r24, r24
    2e94:	99 1f       	adc	r25, r25
    2e96:	82 2b       	or	r24, r18
    2e98:	8c 93       	st	X, r24

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (uartConfig_ptr->baud_rate * 8UL))) - 1);
    2e9a:	eb 81       	ldd	r30, Y+3	; 0x03
    2e9c:	fc 81       	ldd	r31, Y+4	; 0x04
    2e9e:	83 81       	ldd	r24, Z+3	; 0x03
    2ea0:	94 81       	ldd	r25, Z+4	; 0x04
    2ea2:	a5 81       	ldd	r26, Z+5	; 0x05
    2ea4:	b6 81       	ldd	r27, Z+6	; 0x06
    2ea6:	88 0f       	add	r24, r24
    2ea8:	99 1f       	adc	r25, r25
    2eaa:	aa 1f       	adc	r26, r26
    2eac:	bb 1f       	adc	r27, r27
    2eae:	88 0f       	add	r24, r24
    2eb0:	99 1f       	adc	r25, r25
    2eb2:	aa 1f       	adc	r26, r26
    2eb4:	bb 1f       	adc	r27, r27
    2eb6:	88 0f       	add	r24, r24
    2eb8:	99 1f       	adc	r25, r25
    2eba:	aa 1f       	adc	r26, r26
    2ebc:	bb 1f       	adc	r27, r27
    2ebe:	9c 01       	movw	r18, r24
    2ec0:	ad 01       	movw	r20, r26
    2ec2:	80 e0       	ldi	r24, 0x00	; 0
    2ec4:	92 e1       	ldi	r25, 0x12	; 18
    2ec6:	aa e7       	ldi	r26, 0x7A	; 122
    2ec8:	b0 e0       	ldi	r27, 0x00	; 0
    2eca:	bc 01       	movw	r22, r24
    2ecc:	cd 01       	movw	r24, r26
    2ece:	0e 94 12 18 	call	0x3024	; 0x3024 <__udivmodsi4>
    2ed2:	da 01       	movw	r26, r20
    2ed4:	c9 01       	movw	r24, r18
    2ed6:	01 97       	sbiw	r24, 0x01	; 1
    2ed8:	9a 83       	std	Y+2, r25	; 0x02
    2eda:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2edc:	e0 e4       	ldi	r30, 0x40	; 64
    2ede:	f0 e0       	ldi	r31, 0x00	; 0
    2ee0:	89 81       	ldd	r24, Y+1	; 0x01
    2ee2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ee4:	89 2f       	mov	r24, r25
    2ee6:	99 27       	eor	r25, r25
    2ee8:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2eea:	e9 e2       	ldi	r30, 0x29	; 41
    2eec:	f0 e0       	ldi	r31, 0x00	; 0
    2eee:	89 81       	ldd	r24, Y+1	; 0x01
    2ef0:	80 83       	st	Z, r24
}
    2ef2:	0f 90       	pop	r0
    2ef4:	0f 90       	pop	r0
    2ef6:	0f 90       	pop	r0
    2ef8:	0f 90       	pop	r0
    2efa:	cf 91       	pop	r28
    2efc:	df 91       	pop	r29
    2efe:	08 95       	ret

00002f00 <UART_sendByte>:
 *[ARGUMENTS]		: data of type uint8
 *[RETURNS]			: void
 */

void UART_sendByte(const uint8 data)
{
    2f00:	df 93       	push	r29
    2f02:	cf 93       	push	r28
    2f04:	0f 92       	push	r0
    2f06:	cd b7       	in	r28, 0x3d	; 61
    2f08:	de b7       	in	r29, 0x3e	; 62
    2f0a:	89 83       	std	Y+1, r24	; 0x01
	/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,UDRE));
    2f0c:	eb e2       	ldi	r30, 0x2B	; 43
    2f0e:	f0 e0       	ldi	r31, 0x00	; 0
    2f10:	80 81       	ld	r24, Z
    2f12:	88 2f       	mov	r24, r24
    2f14:	90 e0       	ldi	r25, 0x00	; 0
    2f16:	80 72       	andi	r24, 0x20	; 32
    2f18:	90 70       	andi	r25, 0x00	; 0
    2f1a:	00 97       	sbiw	r24, 0x00	; 0
    2f1c:	b9 f3       	breq	.-18     	; 0x2f0c <UART_sendByte+0xc>

	/* Put the required data in the UDR register and it also clear the UDR slag
	 * as the UDR register is not empty now */
	UDR = data;
    2f1e:	ec e2       	ldi	r30, 0x2C	; 44
    2f20:	f0 e0       	ldi	r31, 0x00	; 0
    2f22:	89 81       	ldd	r24, Y+1	; 0x01
    2f24:	80 83       	st	Z, r24
}
    2f26:	0f 90       	pop	r0
    2f28:	cf 91       	pop	r28
    2f2a:	df 91       	pop	r29
    2f2c:	08 95       	ret

00002f2e <UART_recieveByte>:
 *[ARGUMENTS]		: void
 *[RETURNS]			: data of type uint8
 */

uint8 UART_recieveByte(void)
{
    2f2e:	df 93       	push	r29
    2f30:	cf 93       	push	r28
    2f32:	cd b7       	in	r28, 0x3d	; 61
    2f34:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC));
    2f36:	eb e2       	ldi	r30, 0x2B	; 43
    2f38:	f0 e0       	ldi	r31, 0x00	; 0
    2f3a:	80 81       	ld	r24, Z
    2f3c:	88 23       	and	r24, r24
    2f3e:	dc f7       	brge	.-10     	; 0x2f36 <UART_recieveByte+0x8>

	/* Read the received data from the Rx buffer (UDR)
	 * the RXC flag will be cleared after read the data */
	return UDR;
    2f40:	ec e2       	ldi	r30, 0x2C	; 44
    2f42:	f0 e0       	ldi	r31, 0x00	; 0
    2f44:	80 81       	ld	r24, Z
}
    2f46:	cf 91       	pop	r28
    2f48:	df 91       	pop	r29
    2f4a:	08 95       	ret

00002f4c <UART_sendString>:
 *[ARGUMENTS]		: string (pointer to uint8/char)
 *[RETURNS]			: void
 */

void UART_sendString(const uint8 *str)
{
    2f4c:	df 93       	push	r29
    2f4e:	cf 93       	push	r28
    2f50:	00 d0       	rcall	.+0      	; 0x2f52 <UART_sendString+0x6>
    2f52:	0f 92       	push	r0
    2f54:	cd b7       	in	r28, 0x3d	; 61
    2f56:	de b7       	in	r29, 0x3e	; 62
    2f58:	9b 83       	std	Y+3, r25	; 0x03
    2f5a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2f5c:	19 82       	std	Y+1, r1	; 0x01
    2f5e:	0e c0       	rjmp	.+28     	; 0x2f7c <UART_sendString+0x30>

	/* Send the whole string */
	while(str[i] != '\0')
	{
		UART_sendByte(str[i]);
    2f60:	89 81       	ldd	r24, Y+1	; 0x01
    2f62:	28 2f       	mov	r18, r24
    2f64:	30 e0       	ldi	r19, 0x00	; 0
    2f66:	8a 81       	ldd	r24, Y+2	; 0x02
    2f68:	9b 81       	ldd	r25, Y+3	; 0x03
    2f6a:	fc 01       	movw	r30, r24
    2f6c:	e2 0f       	add	r30, r18
    2f6e:	f3 1f       	adc	r31, r19
    2f70:	80 81       	ld	r24, Z
    2f72:	0e 94 80 17 	call	0x2f00	; 0x2f00 <UART_sendByte>
		i++;
    2f76:	89 81       	ldd	r24, Y+1	; 0x01
    2f78:	8f 5f       	subi	r24, 0xFF	; 255
    2f7a:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(str[i] != '\0')
    2f7c:	89 81       	ldd	r24, Y+1	; 0x01
    2f7e:	28 2f       	mov	r18, r24
    2f80:	30 e0       	ldi	r19, 0x00	; 0
    2f82:	8a 81       	ldd	r24, Y+2	; 0x02
    2f84:	9b 81       	ldd	r25, Y+3	; 0x03
    2f86:	fc 01       	movw	r30, r24
    2f88:	e2 0f       	add	r30, r18
    2f8a:	f3 1f       	adc	r31, r19
    2f8c:	80 81       	ld	r24, Z
    2f8e:	88 23       	and	r24, r24
    2f90:	39 f7       	brne	.-50     	; 0x2f60 <UART_sendString+0x14>
	{
		UART_sendByte(str[i]);
		i++;
	}
}
    2f92:	0f 90       	pop	r0
    2f94:	0f 90       	pop	r0
    2f96:	0f 90       	pop	r0
    2f98:	cf 91       	pop	r28
    2f9a:	df 91       	pop	r29
    2f9c:	08 95       	ret

00002f9e <UART_receiveString>:
 *[ARGUMENTS]		: void
 *[RETURNS]			: string (pointer to uint8/char)
 */

void UART_receiveString(uint8 *str)
{
    2f9e:	0f 93       	push	r16
    2fa0:	1f 93       	push	r17
    2fa2:	df 93       	push	r29
    2fa4:	cf 93       	push	r28
    2fa6:	00 d0       	rcall	.+0      	; 0x2fa8 <UART_receiveString+0xa>
    2fa8:	0f 92       	push	r0
    2faa:	cd b7       	in	r28, 0x3d	; 61
    2fac:	de b7       	in	r29, 0x3e	; 62
    2fae:	9b 83       	std	Y+3, r25	; 0x03
    2fb0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2fb2:	19 82       	std	Y+1, r1	; 0x01

	/* Receive first byte */
	str[i] = UART_recieveByte();
    2fb4:	89 81       	ldd	r24, Y+1	; 0x01
    2fb6:	28 2f       	mov	r18, r24
    2fb8:	30 e0       	ldi	r19, 0x00	; 0
    2fba:	8a 81       	ldd	r24, Y+2	; 0x02
    2fbc:	9b 81       	ldd	r25, Y+3	; 0x03
    2fbe:	8c 01       	movw	r16, r24
    2fc0:	02 0f       	add	r16, r18
    2fc2:	13 1f       	adc	r17, r19
    2fc4:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <UART_recieveByte>
    2fc8:	f8 01       	movw	r30, r16
    2fca:	80 83       	st	Z, r24
    2fcc:	0f c0       	rjmp	.+30     	; 0x2fec <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(str[i] != '=')
	{
		i++;
    2fce:	89 81       	ldd	r24, Y+1	; 0x01
    2fd0:	8f 5f       	subi	r24, 0xFF	; 255
    2fd2:	89 83       	std	Y+1, r24	; 0x01
		str[i] = UART_recieveByte();
    2fd4:	89 81       	ldd	r24, Y+1	; 0x01
    2fd6:	28 2f       	mov	r18, r24
    2fd8:	30 e0       	ldi	r19, 0x00	; 0
    2fda:	8a 81       	ldd	r24, Y+2	; 0x02
    2fdc:	9b 81       	ldd	r25, Y+3	; 0x03
    2fde:	8c 01       	movw	r16, r24
    2fe0:	02 0f       	add	r16, r18
    2fe2:	13 1f       	adc	r17, r19
    2fe4:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <UART_recieveByte>
    2fe8:	f8 01       	movw	r30, r16
    2fea:	80 83       	st	Z, r24

	/* Receive first byte */
	str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(str[i] != '=')
    2fec:	89 81       	ldd	r24, Y+1	; 0x01
    2fee:	28 2f       	mov	r18, r24
    2ff0:	30 e0       	ldi	r19, 0x00	; 0
    2ff2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ff4:	9b 81       	ldd	r25, Y+3	; 0x03
    2ff6:	fc 01       	movw	r30, r24
    2ff8:	e2 0f       	add	r30, r18
    2ffa:	f3 1f       	adc	r31, r19
    2ffc:	80 81       	ld	r24, Z
    2ffe:	8d 33       	cpi	r24, 0x3D	; 61
    3000:	31 f7       	brne	.-52     	; 0x2fce <UART_receiveString+0x30>
		i++;
		str[i] = UART_recieveByte();
	}

	/* After receiving the string until the '#', replace the '#' with '\0' */
	str[i] = '\0';
    3002:	89 81       	ldd	r24, Y+1	; 0x01
    3004:	28 2f       	mov	r18, r24
    3006:	30 e0       	ldi	r19, 0x00	; 0
    3008:	8a 81       	ldd	r24, Y+2	; 0x02
    300a:	9b 81       	ldd	r25, Y+3	; 0x03
    300c:	fc 01       	movw	r30, r24
    300e:	e2 0f       	add	r30, r18
    3010:	f3 1f       	adc	r31, r19
    3012:	10 82       	st	Z, r1
}
    3014:	0f 90       	pop	r0
    3016:	0f 90       	pop	r0
    3018:	0f 90       	pop	r0
    301a:	cf 91       	pop	r28
    301c:	df 91       	pop	r29
    301e:	1f 91       	pop	r17
    3020:	0f 91       	pop	r16
    3022:	08 95       	ret

00003024 <__udivmodsi4>:
    3024:	a1 e2       	ldi	r26, 0x21	; 33
    3026:	1a 2e       	mov	r1, r26
    3028:	aa 1b       	sub	r26, r26
    302a:	bb 1b       	sub	r27, r27
    302c:	fd 01       	movw	r30, r26
    302e:	0d c0       	rjmp	.+26     	; 0x304a <__udivmodsi4_ep>

00003030 <__udivmodsi4_loop>:
    3030:	aa 1f       	adc	r26, r26
    3032:	bb 1f       	adc	r27, r27
    3034:	ee 1f       	adc	r30, r30
    3036:	ff 1f       	adc	r31, r31
    3038:	a2 17       	cp	r26, r18
    303a:	b3 07       	cpc	r27, r19
    303c:	e4 07       	cpc	r30, r20
    303e:	f5 07       	cpc	r31, r21
    3040:	20 f0       	brcs	.+8      	; 0x304a <__udivmodsi4_ep>
    3042:	a2 1b       	sub	r26, r18
    3044:	b3 0b       	sbc	r27, r19
    3046:	e4 0b       	sbc	r30, r20
    3048:	f5 0b       	sbc	r31, r21

0000304a <__udivmodsi4_ep>:
    304a:	66 1f       	adc	r22, r22
    304c:	77 1f       	adc	r23, r23
    304e:	88 1f       	adc	r24, r24
    3050:	99 1f       	adc	r25, r25
    3052:	1a 94       	dec	r1
    3054:	69 f7       	brne	.-38     	; 0x3030 <__udivmodsi4_loop>
    3056:	60 95       	com	r22
    3058:	70 95       	com	r23
    305a:	80 95       	com	r24
    305c:	90 95       	com	r25
    305e:	9b 01       	movw	r18, r22
    3060:	ac 01       	movw	r20, r24
    3062:	bd 01       	movw	r22, r26
    3064:	cf 01       	movw	r24, r30
    3066:	08 95       	ret

00003068 <__prologue_saves__>:
    3068:	2f 92       	push	r2
    306a:	3f 92       	push	r3
    306c:	4f 92       	push	r4
    306e:	5f 92       	push	r5
    3070:	6f 92       	push	r6
    3072:	7f 92       	push	r7
    3074:	8f 92       	push	r8
    3076:	9f 92       	push	r9
    3078:	af 92       	push	r10
    307a:	bf 92       	push	r11
    307c:	cf 92       	push	r12
    307e:	df 92       	push	r13
    3080:	ef 92       	push	r14
    3082:	ff 92       	push	r15
    3084:	0f 93       	push	r16
    3086:	1f 93       	push	r17
    3088:	cf 93       	push	r28
    308a:	df 93       	push	r29
    308c:	cd b7       	in	r28, 0x3d	; 61
    308e:	de b7       	in	r29, 0x3e	; 62
    3090:	ca 1b       	sub	r28, r26
    3092:	db 0b       	sbc	r29, r27
    3094:	0f b6       	in	r0, 0x3f	; 63
    3096:	f8 94       	cli
    3098:	de bf       	out	0x3e, r29	; 62
    309a:	0f be       	out	0x3f, r0	; 63
    309c:	cd bf       	out	0x3d, r28	; 61
    309e:	09 94       	ijmp

000030a0 <__epilogue_restores__>:
    30a0:	2a 88       	ldd	r2, Y+18	; 0x12
    30a2:	39 88       	ldd	r3, Y+17	; 0x11
    30a4:	48 88       	ldd	r4, Y+16	; 0x10
    30a6:	5f 84       	ldd	r5, Y+15	; 0x0f
    30a8:	6e 84       	ldd	r6, Y+14	; 0x0e
    30aa:	7d 84       	ldd	r7, Y+13	; 0x0d
    30ac:	8c 84       	ldd	r8, Y+12	; 0x0c
    30ae:	9b 84       	ldd	r9, Y+11	; 0x0b
    30b0:	aa 84       	ldd	r10, Y+10	; 0x0a
    30b2:	b9 84       	ldd	r11, Y+9	; 0x09
    30b4:	c8 84       	ldd	r12, Y+8	; 0x08
    30b6:	df 80       	ldd	r13, Y+7	; 0x07
    30b8:	ee 80       	ldd	r14, Y+6	; 0x06
    30ba:	fd 80       	ldd	r15, Y+5	; 0x05
    30bc:	0c 81       	ldd	r16, Y+4	; 0x04
    30be:	1b 81       	ldd	r17, Y+3	; 0x03
    30c0:	aa 81       	ldd	r26, Y+2	; 0x02
    30c2:	b9 81       	ldd	r27, Y+1	; 0x01
    30c4:	ce 0f       	add	r28, r30
    30c6:	d1 1d       	adc	r29, r1
    30c8:	0f b6       	in	r0, 0x3f	; 63
    30ca:	f8 94       	cli
    30cc:	de bf       	out	0x3e, r29	; 62
    30ce:	0f be       	out	0x3f, r0	; 63
    30d0:	cd bf       	out	0x3d, r28	; 61
    30d2:	ed 01       	movw	r28, r26
    30d4:	08 95       	ret

000030d6 <itoa>:
    30d6:	fb 01       	movw	r30, r22
    30d8:	9f 01       	movw	r18, r30
    30da:	e8 94       	clt
    30dc:	42 30       	cpi	r20, 0x02	; 2
    30de:	c4 f0       	brlt	.+48     	; 0x3110 <itoa+0x3a>
    30e0:	45 32       	cpi	r20, 0x25	; 37
    30e2:	b4 f4       	brge	.+44     	; 0x3110 <itoa+0x3a>
    30e4:	4a 30       	cpi	r20, 0x0A	; 10
    30e6:	29 f4       	brne	.+10     	; 0x30f2 <itoa+0x1c>
    30e8:	97 fb       	bst	r25, 7
    30ea:	1e f4       	brtc	.+6      	; 0x30f2 <itoa+0x1c>
    30ec:	90 95       	com	r25
    30ee:	81 95       	neg	r24
    30f0:	9f 4f       	sbci	r25, 0xFF	; 255
    30f2:	64 2f       	mov	r22, r20
    30f4:	77 27       	eor	r23, r23
    30f6:	0e 94 9c 18 	call	0x3138	; 0x3138 <__udivmodhi4>
    30fa:	80 5d       	subi	r24, 0xD0	; 208
    30fc:	8a 33       	cpi	r24, 0x3A	; 58
    30fe:	0c f0       	brlt	.+2      	; 0x3102 <itoa+0x2c>
    3100:	89 5d       	subi	r24, 0xD9	; 217
    3102:	81 93       	st	Z+, r24
    3104:	cb 01       	movw	r24, r22
    3106:	00 97       	sbiw	r24, 0x00	; 0
    3108:	a1 f7       	brne	.-24     	; 0x30f2 <itoa+0x1c>
    310a:	16 f4       	brtc	.+4      	; 0x3110 <itoa+0x3a>
    310c:	5d e2       	ldi	r21, 0x2D	; 45
    310e:	51 93       	st	Z+, r21
    3110:	10 82       	st	Z, r1
    3112:	c9 01       	movw	r24, r18
    3114:	0c 94 8c 18 	jmp	0x3118	; 0x3118 <strrev>

00003118 <strrev>:
    3118:	dc 01       	movw	r26, r24
    311a:	fc 01       	movw	r30, r24
    311c:	67 2f       	mov	r22, r23
    311e:	71 91       	ld	r23, Z+
    3120:	77 23       	and	r23, r23
    3122:	e1 f7       	brne	.-8      	; 0x311c <strrev+0x4>
    3124:	32 97       	sbiw	r30, 0x02	; 2
    3126:	04 c0       	rjmp	.+8      	; 0x3130 <strrev+0x18>
    3128:	7c 91       	ld	r23, X
    312a:	6d 93       	st	X+, r22
    312c:	70 83       	st	Z, r23
    312e:	62 91       	ld	r22, -Z
    3130:	ae 17       	cp	r26, r30
    3132:	bf 07       	cpc	r27, r31
    3134:	c8 f3       	brcs	.-14     	; 0x3128 <strrev+0x10>
    3136:	08 95       	ret

00003138 <__udivmodhi4>:
    3138:	aa 1b       	sub	r26, r26
    313a:	bb 1b       	sub	r27, r27
    313c:	51 e1       	ldi	r21, 0x11	; 17
    313e:	07 c0       	rjmp	.+14     	; 0x314e <__udivmodhi4_ep>

00003140 <__udivmodhi4_loop>:
    3140:	aa 1f       	adc	r26, r26
    3142:	bb 1f       	adc	r27, r27
    3144:	a6 17       	cp	r26, r22
    3146:	b7 07       	cpc	r27, r23
    3148:	10 f0       	brcs	.+4      	; 0x314e <__udivmodhi4_ep>
    314a:	a6 1b       	sub	r26, r22
    314c:	b7 0b       	sbc	r27, r23

0000314e <__udivmodhi4_ep>:
    314e:	88 1f       	adc	r24, r24
    3150:	99 1f       	adc	r25, r25
    3152:	5a 95       	dec	r21
    3154:	a9 f7       	brne	.-22     	; 0x3140 <__udivmodhi4_loop>
    3156:	80 95       	com	r24
    3158:	90 95       	com	r25
    315a:	bc 01       	movw	r22, r24
    315c:	cd 01       	movw	r24, r26
    315e:	08 95       	ret

00003160 <_exit>:
    3160:	f8 94       	cli

00003162 <__stop_program>:
    3162:	ff cf       	rjmp	.-2      	; 0x3162 <__stop_program>
